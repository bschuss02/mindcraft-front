{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nvar _excluded = [\"id\", \"initialRouteName\", \"children\", \"screenListeners\", \"screenOptions\"];\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _extends() {\n  _extends = Object.assign ? Object.assign.bind() : function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n  return _extends.apply(this, arguments);\n}\n\nimport { createNavigatorFactory, StackActions, StackRouter, useNavigationBuilder } from '@react-navigation/native';\nimport * as React from 'react';\nimport warnOnce from 'warn-once';\nimport StackView from \"../views/Stack/StackView\";\n\nfunction StackNavigator(_ref) {\n  var id = _ref.id,\n      initialRouteName = _ref.initialRouteName,\n      children = _ref.children,\n      screenListeners = _ref.screenListeners,\n      screenOptions = _ref.screenOptions,\n      rest = _objectWithoutProperties(_ref, _excluded);\n\n  var mode = rest.mode;\n  warnOnce(mode != null, \"Stack Navigator: 'mode=\\\"\" + mode + \"\\\"' is deprecated. Use 'presentation: \\\"\" + mode + \"\\\"' in 'screenOptions' instead.\\n\\nSee https://reactnavigation.org/docs/stack-navigator#presentation for more details.\");\n  var headerMode = rest.headerMode;\n  warnOnce(headerMode === 'none', \"Stack Navigator: 'headerMode=\\\"none\\\"' is deprecated. Use 'headerShown: false' in 'screenOptions' instead.\\n\\nSee https://reactnavigation.org/docs/stack-navigator/#headershown for more details.\");\n  warnOnce(headerMode != null && headerMode !== 'none', \"Stack Navigator: 'headerMode' is moved to 'options'. Moved it to 'screenOptions' to keep current behavior.\\n\\nSee https://reactnavigation.org/docs/stack-navigator/#headermode for more details.\");\n  var keyboardHandlingEnabled = rest.keyboardHandlingEnabled;\n  warnOnce(keyboardHandlingEnabled !== undefined, \"Stack Navigator: 'keyboardHandlingEnabled' is moved to 'options'. Moved it to 'screenOptions' to keep current behavior.\\n\\nSee https://reactnavigation.org/docs/stack-navigator/#keyboardhandlingenabled for more details.\");\n  var defaultScreenOptions = {\n    presentation: mode,\n    headerShown: headerMode ? headerMode !== 'none' : true,\n    headerMode: headerMode && headerMode !== 'none' ? headerMode : undefined,\n    keyboardHandlingEnabled: keyboardHandlingEnabled\n  };\n\n  var _useNavigationBuilder = useNavigationBuilder(StackRouter, {\n    id: id,\n    initialRouteName: initialRouteName,\n    children: children,\n    screenListeners: screenListeners,\n    screenOptions: screenOptions,\n    defaultScreenOptions: defaultScreenOptions\n  }),\n      state = _useNavigationBuilder.state,\n      descriptors = _useNavigationBuilder.descriptors,\n      navigation = _useNavigationBuilder.navigation,\n      NavigationContent = _useNavigationBuilder.NavigationContent;\n\n  React.useEffect(function () {\n    var _navigation$addListen;\n\n    return (_navigation$addListen = navigation.addListener) === null || _navigation$addListen === void 0 ? void 0 : _navigation$addListen.call(navigation, 'tabPress', function (e) {\n      var isFocused = navigation.isFocused();\n      requestAnimationFrame(function () {\n        if (state.index > 0 && isFocused && !e.defaultPrevented) {\n          navigation.dispatch(_objectSpread(_objectSpread({}, StackActions.popToTop()), {}, {\n            target: state.key\n          }));\n        }\n      });\n    });\n  }, [navigation, state.index, state.key]);\n  return React.createElement(NavigationContent, null, React.createElement(StackView, _extends({}, rest, {\n    state: state,\n    descriptors: descriptors,\n    navigation: navigation\n  })));\n}\n\nexport default createNavigatorFactory(StackNavigator);","map":{"version":3,"sources":["navigators/createStackNavigator.tsx"],"names":["createNavigatorFactory","StackActions","StackRouter","useNavigationBuilder","React","warnOnce","StackView","StackNavigator","id","initialRouteName","children","screenListeners","screenOptions","rest","mode","headerMode","keyboardHandlingEnabled","undefined","defaultScreenOptions","presentation","headerShown","state","descriptors","navigation","NavigationContent","useEffect","addListener","e","isFocused","requestAnimationFrame","index","defaultPrevented","dispatch","popToTop","target","key"],"mappings":"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","sourceRoot":"../../../src","sourcesContent":["function _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\nimport { createNavigatorFactory, StackActions, StackRouter, useNavigationBuilder } from '@react-navigation/native';\nimport * as React from 'react';\nimport warnOnce from 'warn-once';\nimport StackView from '../views/Stack/StackView';\nfunction StackNavigator(_ref) {\n  let {\n    id,\n    initialRouteName,\n    children,\n    screenListeners,\n    screenOptions,\n    ...rest\n  } = _ref;\n  // @ts-expect-error: mode is deprecated\n  const mode = rest.mode;\n  warnOnce(mode != null, `Stack Navigator: 'mode=\"${mode}\"' is deprecated. Use 'presentation: \"${mode}\"' in 'screenOptions' instead.\\n\\nSee https://reactnavigation.org/docs/stack-navigator#presentation for more details.`);\n\n  // @ts-expect-error: headerMode='none' is deprecated\n  const headerMode = rest.headerMode;\n  warnOnce(headerMode === 'none', `Stack Navigator: 'headerMode=\"none\"' is deprecated. Use 'headerShown: false' in 'screenOptions' instead.\\n\\nSee https://reactnavigation.org/docs/stack-navigator/#headershown for more details.`);\n  warnOnce(headerMode != null && headerMode !== 'none', `Stack Navigator: 'headerMode' is moved to 'options'. Moved it to 'screenOptions' to keep current behavior.\\n\\nSee https://reactnavigation.org/docs/stack-navigator/#headermode for more details.`);\n\n  // @ts-expect-error: headerMode='none' is deprecated\n  const keyboardHandlingEnabled = rest.keyboardHandlingEnabled;\n  warnOnce(keyboardHandlingEnabled !== undefined, `Stack Navigator: 'keyboardHandlingEnabled' is moved to 'options'. Moved it to 'screenOptions' to keep current behavior.\\n\\nSee https://reactnavigation.org/docs/stack-navigator/#keyboardhandlingenabled for more details.`);\n  const defaultScreenOptions = {\n    presentation: mode,\n    headerShown: headerMode ? headerMode !== 'none' : true,\n    headerMode: headerMode && headerMode !== 'none' ? headerMode : undefined,\n    keyboardHandlingEnabled\n  };\n  const {\n    state,\n    descriptors,\n    navigation,\n    NavigationContent\n  } = useNavigationBuilder(StackRouter, {\n    id,\n    initialRouteName,\n    children,\n    screenListeners,\n    screenOptions,\n    defaultScreenOptions\n  });\n  React.useEffect(() => {\n    var _navigation$addListen;\n    return (// @ts-expect-error: there may not be a tab navigator in parent\n      (_navigation$addListen = navigation.addListener) === null || _navigation$addListen === void 0 ? void 0 : _navigation$addListen.call(navigation, 'tabPress', e => {\n        const isFocused = navigation.isFocused();\n\n        // Run the operation in the next frame so we're sure all listeners have been run\n        // This is necessary to know if preventDefault() has been called\n        requestAnimationFrame(() => {\n          if (state.index > 0 && isFocused && !e.defaultPrevented) {\n            // When user taps on already focused tab and we're inside the tab,\n            // reset the stack to replicate native behaviour\n            navigation.dispatch({\n              ...StackActions.popToTop(),\n              target: state.key\n            });\n          }\n        });\n      })\n    );\n  }, [navigation, state.index, state.key]);\n  return /*#__PURE__*/React.createElement(NavigationContent, null, /*#__PURE__*/React.createElement(StackView, _extends({}, rest, {\n    state: state,\n    descriptors: descriptors,\n    navigation: navigation\n  })));\n}\nexport default createNavigatorFactory(StackNavigator);\n//# sourceMappingURL=createStackNavigator.js.map"]},"metadata":{},"sourceType":"module"}