{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nvar _excluded = [\"children\", \"style\", \"visible\", \"size\"],\n    _excluded2 = [\"backgroundColor\"];\n\nfunction _extends() {\n  _extends = Object.assign ? Object.assign.bind() : function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n  return _extends.apply(this, arguments);\n}\n\nimport { useTheme } from '@react-navigation/native';\nimport color from 'color';\nimport * as React from 'react';\nimport Animated from \"react-native-web/dist/exports/Animated\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nexport default function Badge(_ref) {\n  var children = _ref.children,\n      style = _ref.style,\n      _ref$visible = _ref.visible,\n      visible = _ref$visible === void 0 ? true : _ref$visible,\n      _ref$size = _ref.size,\n      size = _ref$size === void 0 ? 18 : _ref$size,\n      rest = _objectWithoutProperties(_ref, _excluded);\n\n  var _React$useState = React.useState(function () {\n    return new Animated.Value(visible ? 1 : 0);\n  }),\n      _React$useState2 = _slicedToArray(_React$useState, 1),\n      opacity = _React$useState2[0];\n\n  var _React$useState3 = React.useState(visible),\n      _React$useState4 = _slicedToArray(_React$useState3, 2),\n      rendered = _React$useState4[0],\n      setRendered = _React$useState4[1];\n\n  var theme = useTheme();\n  React.useEffect(function () {\n    if (!rendered) {\n      return;\n    }\n\n    Animated.timing(opacity, {\n      toValue: visible ? 1 : 0,\n      duration: 150,\n      useNativeDriver: true\n    }).start(function (_ref2) {\n      var finished = _ref2.finished;\n\n      if (finished && !visible) {\n        setRendered(false);\n      }\n    });\n    return function () {\n      return opacity.stopAnimation();\n    };\n  }, [opacity, rendered, visible]);\n\n  if (!rendered) {\n    if (visible) {\n      setRendered(true);\n    } else {\n      return null;\n    }\n  }\n\n  var _ref3 = StyleSheet.flatten(style) || {},\n      _ref3$backgroundColor = _ref3.backgroundColor,\n      backgroundColor = _ref3$backgroundColor === void 0 ? theme.colors.notification : _ref3$backgroundColor,\n      restStyle = _objectWithoutProperties(_ref3, _excluded2);\n\n  var textColor = color(backgroundColor).isLight() ? 'black' : 'white';\n  var borderRadius = size / 2;\n  var fontSize = Math.floor(size * 3 / 4);\n  return React.createElement(Animated.Text, _extends({\n    numberOfLines: 1,\n    style: [{\n      transform: [{\n        scale: opacity.interpolate({\n          inputRange: [0, 1],\n          outputRange: [0.5, 1]\n        })\n      }],\n      color: textColor,\n      lineHeight: size - 1,\n      height: size,\n      minWidth: size,\n      opacity: opacity,\n      backgroundColor: backgroundColor,\n      fontSize: fontSize,\n      borderRadius: borderRadius\n    }, styles.container, restStyle]\n  }, rest), children);\n}\nvar styles = StyleSheet.create({\n  container: {\n    alignSelf: 'flex-end',\n    textAlign: 'center',\n    paddingHorizontal: 4,\n    overflow: 'hidden'\n  }\n});","map":{"version":3,"sources":["views/Badge.tsx"],"names":["useTheme","color","React","Badge","children","style","visible","size","rest","opacity","useState","Animated","Value","rendered","setRendered","theme","useEffect","timing","toValue","duration","useNativeDriver","start","finished","stopAnimation","backgroundColor","colors","notification","restStyle","StyleSheet","flatten","textColor","isLight","borderRadius","fontSize","Math","floor","transform","scale","interpolate","inputRange","outputRange","lineHeight","height","minWidth","styles","container","create","alignSelf","textAlign","paddingHorizontal","overflow"],"mappings":"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","sourceRoot":"../../../src","sourcesContent":["function _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\nimport { useTheme } from '@react-navigation/native';\nimport color from 'color';\nimport * as React from 'react';\nimport { Animated, StyleSheet } from 'react-native';\nexport default function Badge(_ref) {\n  let {\n    children,\n    style,\n    visible = true,\n    size = 18,\n    ...rest\n  } = _ref;\n  const [opacity] = React.useState(() => new Animated.Value(visible ? 1 : 0));\n  const [rendered, setRendered] = React.useState(visible);\n  const theme = useTheme();\n  React.useEffect(() => {\n    if (!rendered) {\n      return;\n    }\n    Animated.timing(opacity, {\n      toValue: visible ? 1 : 0,\n      duration: 150,\n      useNativeDriver: true\n    }).start(_ref2 => {\n      let {\n        finished\n      } = _ref2;\n      if (finished && !visible) {\n        setRendered(false);\n      }\n    });\n    return () => opacity.stopAnimation();\n  }, [opacity, rendered, visible]);\n  if (!rendered) {\n    if (visible) {\n      setRendered(true);\n    } else {\n      return null;\n    }\n  }\n\n  // @ts-expect-error: backgroundColor definitely exists\n  const {\n    backgroundColor = theme.colors.notification,\n    ...restStyle\n  } = StyleSheet.flatten(style) || {};\n  const textColor = color(backgroundColor).isLight() ? 'black' : 'white';\n  const borderRadius = size / 2;\n  const fontSize = Math.floor(size * 3 / 4);\n  return /*#__PURE__*/React.createElement(Animated.Text, _extends({\n    numberOfLines: 1,\n    style: [{\n      transform: [{\n        scale: opacity.interpolate({\n          inputRange: [0, 1],\n          outputRange: [0.5, 1]\n        })\n      }],\n      color: textColor,\n      lineHeight: size - 1,\n      height: size,\n      minWidth: size,\n      opacity,\n      backgroundColor,\n      fontSize,\n      borderRadius\n    }, styles.container, restStyle]\n  }, rest), children);\n}\nconst styles = StyleSheet.create({\n  container: {\n    alignSelf: 'flex-end',\n    textAlign: 'center',\n    paddingHorizontal: 4,\n    overflow: 'hidden'\n  }\n});\n//# sourceMappingURL=Badge.js.map"]},"metadata":{},"sourceType":"module"}