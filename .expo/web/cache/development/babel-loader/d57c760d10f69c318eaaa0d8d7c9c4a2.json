{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport { nanoid } from 'nanoid/non-secure';\nimport * as React from 'react';\nimport useLatestCallback from 'use-latest-callback';\nimport useNavigation from \"./useNavigation\";\nimport usePreventRemoveContext from \"./usePreventRemoveContext\";\nimport useRoute from \"./useRoute\";\nexport default function usePreventRemove(preventRemove, callback) {\n  var _React$useState = React.useState(function () {\n    return nanoid();\n  }),\n      _React$useState2 = _slicedToArray(_React$useState, 1),\n      id = _React$useState2[0];\n\n  var navigation = useNavigation();\n\n  var _useRoute = useRoute(),\n      routeKey = _useRoute.key;\n\n  var _usePreventRemoveCont = usePreventRemoveContext(),\n      setPreventRemove = _usePreventRemoveCont.setPreventRemove;\n\n  React.useEffect(function () {\n    setPreventRemove(id, routeKey, preventRemove);\n    return function () {\n      setPreventRemove(id, routeKey, false);\n    };\n  }, [setPreventRemove, id, routeKey, preventRemove]);\n  var beforeRemoveListener = useLatestCallback(function (e) {\n    if (!preventRemove) {\n      return;\n    }\n\n    e.preventDefault();\n    callback({\n      data: e.data\n    });\n  });\n  React.useEffect(function () {\n    return navigation === null || navigation === void 0 ? void 0 : navigation.addListener('beforeRemove', beforeRemoveListener);\n  }, [navigation, beforeRemoveListener]);\n}","map":{"version":3,"sources":["usePreventRemove.tsx"],"names":["nanoid","React","useLatestCallback","useNavigation","usePreventRemoveContext","useRoute","usePreventRemove","preventRemove","callback","id","useState","navigation","key","routeKey","setPreventRemove","useEffect","beforeRemoveListener","e","preventDefault","data","addListener"],"mappings":";AACA,SAASA,MAAT,QAAuB,mBAAvB;AACA,OAAO,KAAKC,KAAZ,MAAuB,OAAvB;AACA,OAAOC,iBAAP,MAA8B,qBAA9B;AAGA,OAAOC,aAAP;AACA,OAAOC,uBAAP;AACA,OAAOC,QAAP;AAQA,eAAe,SAASC,gBAAT,CACbC,aADa,EAEbC,QAFa,EAGb;AACA,wBAAaP,KAAK,CAACS,QAANT,CAAe;AAAA,WAAMD,MAAM,EAAZ;AAAA,GAAfC,CAAb;AAAA;AAAA,MAAOQ,EAAP;;AAEA,MAAME,UAAU,GAAGR,aAAa,EAAhC;;AACA,kBAA0BE,QAAQ,EAAlC;AAAA,MAAaQ,QAAb,aAAQD,GAAR;;AAEA,8BAA6BR,uBAAuB,EAApD;AAAA,MAAQU,gBAAR,yBAAQA,gBAAR;;AAEAb,EAAAA,KAAK,CAACc,SAANd,CAAgB,YAAM;AACpBa,IAAAA,gBAAgB,CAACL,EAAD,EAAKI,QAAL,EAAeN,aAAf,CAAhBO;AACA,WAAO,YAAM;AACXA,MAAAA,gBAAgB,CAACL,EAAD,EAAKI,QAAL,EAAe,KAAf,CAAhBC;AACD,KAFD;AAGD,GALDb,EAKG,CAACa,gBAAD,EAAmBL,EAAnB,EAAuBI,QAAvB,EAAiCN,aAAjC,CALHN;AAOA,MAAMe,oBAAoB,GAAGd,iBAAiB,CAE3Ce,UAAAA,CAAC,EAAK;AACP,QAAI,CAACV,aAAL,EAAoB;AAClB;AACF;;AAEAU,IAAAA,CAAC,CAACC,cAAFD;AAEAT,IAAAA,QAAQ,CAAC;AAAEW,MAAAA,IAAI,EAAEF,CAAC,CAACE;AAAV,KAAD,CAARX;AACD,GAV6C,CAA9C;AAYAP,EAAAA,KAAK,CAACc,SAANd,CACE;AAAA,WAAMU,UAAU,KAAA,IAAVA,IAAAA,UAAU,KAAA,KAAA,CAAVA,GAAU,KAAA,CAAVA,GAAAA,UAAU,CAAES,WAAZT,CAAwB,cAAxBA,EAAwCK,oBAAxCL,CAAN;AAAA,GADFV,EAEE,CAACU,UAAD,EAAaK,oBAAb,CAFFf;AAIF","sourceRoot":"../../src","sourcesContent":["import { nanoid } from 'nanoid/non-secure';\nimport * as React from 'react';\nimport useLatestCallback from 'use-latest-callback';\nimport useNavigation from './useNavigation';\nimport usePreventRemoveContext from './usePreventRemoveContext';\nimport useRoute from './useRoute';\n\n/**\n * Hook to prevent screen from being removed. Can be used to prevent users from leaving the screen.\n *\n * @param preventRemove Boolean indicating whether to prevent screen from being removed.\n * @param callback Function which is executed when screen was prevented from being removed.\n */\nexport default function usePreventRemove(preventRemove, callback) {\n  const [id] = React.useState(() => nanoid());\n  const navigation = useNavigation();\n  const {\n    key: routeKey\n  } = useRoute();\n  const {\n    setPreventRemove\n  } = usePreventRemoveContext();\n  React.useEffect(() => {\n    setPreventRemove(id, routeKey, preventRemove);\n    return () => {\n      setPreventRemove(id, routeKey, false);\n    };\n  }, [setPreventRemove, id, routeKey, preventRemove]);\n  const beforeRemoveListener = useLatestCallback(e => {\n    if (!preventRemove) {\n      return;\n    }\n    e.preventDefault();\n    callback({\n      data: e.data\n    });\n  });\n  React.useEffect(() => navigation === null || navigation === void 0 ? void 0 : navigation.addListener('beforeRemove', beforeRemoveListener), [navigation, beforeRemoveListener]);\n}\n//# sourceMappingURL=usePreventRemove.js.map"]},"metadata":{},"sourceType":"module"}