{"ast":null,"code":"import { runOnUI } from \"../core\";\nexport var prepareUIRegistry = runOnUI(function () {\n  var _f = function _f() {\n    var frameCallbackRegistry = {\n      frameCallbackRegistry: new Map(),\n      activeFrameCallbacks: new Set(),\n      previousFrameTimestamp: null,\n      runCallbacks: function runCallbacks() {\n        var _this = this;\n\n        var loop = function loop(timestamp) {\n          if (_this.previousFrameTimestamp === null) {\n            _this.previousFrameTimestamp = timestamp;\n          }\n\n          var delta = timestamp - _this.previousFrameTimestamp;\n\n          _this.activeFrameCallbacks.forEach(function (callbackId) {\n            var callbackDetails = _this.frameCallbackRegistry.get(callbackId);\n\n            var startTime = callbackDetails.startTime;\n\n            if (startTime === null) {\n              callbackDetails.startTime = timestamp;\n              callbackDetails.callback({\n                timestamp: timestamp,\n                timeSincePreviousFrame: null,\n                timeSinceFirstFrame: 0\n              });\n            } else {\n              callbackDetails.callback({\n                timestamp: timestamp,\n                timeSincePreviousFrame: delta,\n                timeSinceFirstFrame: timestamp - startTime\n              });\n            }\n          });\n\n          if (_this.activeFrameCallbacks.size > 0) {\n            _this.previousFrameTimestamp = timestamp;\n            requestAnimationFrame(loop);\n          } else {\n            _this.previousFrameTimestamp = null;\n          }\n        };\n\n        if (this.activeFrameCallbacks.size === 1) {\n          requestAnimationFrame(loop);\n        }\n      },\n      registerFrameCallback: function registerFrameCallback(callback, callbackId) {\n        this.frameCallbackRegistry.set(callbackId, {\n          callback: callback,\n          startTime: null\n        });\n      },\n      unregisterFrameCallback: function unregisterFrameCallback(callbackId) {\n        this.manageStateFrameCallback(callbackId, false);\n        this.frameCallbackRegistry.delete(callbackId);\n      },\n      manageStateFrameCallback: function manageStateFrameCallback(callbackId, state) {\n        if (callbackId === -1) {\n          return;\n        }\n\n        if (state) {\n          this.activeFrameCallbacks.add(callbackId);\n          this.runCallbacks();\n        } else {\n          var callback = this.frameCallbackRegistry.get(callbackId);\n          callback.startTime = null;\n          this.activeFrameCallbacks.delete(callbackId);\n        }\n      }\n    };\n    global._frameCallbackRegistry = frameCallbackRegistry;\n  };\n\n  _f._closure = {};\n  _f.asString = \"function _f(){const frameCallbackRegistry={frameCallbackRegistry:new Map(),activeFrameCallbacks:new Set(),previousFrameTimestamp:null,runCallbacks:function(){var _this=this;const loop=function(timestamp){if(_this.previousFrameTimestamp===null){_this.previousFrameTimestamp=timestamp;}const delta=timestamp-_this.previousFrameTimestamp;_this.activeFrameCallbacks.forEach(function(callbackId){const callbackDetails=_this.frameCallbackRegistry.get(callbackId);const{startTime:startTime}=callbackDetails;if(startTime===null){callbackDetails.startTime=timestamp;callbackDetails.callback({timestamp:timestamp,timeSincePreviousFrame:null,timeSinceFirstFrame:0});}else{callbackDetails.callback({timestamp:timestamp,timeSincePreviousFrame:delta,timeSinceFirstFrame:timestamp-startTime});}});if(_this.activeFrameCallbacks.size>0){_this.previousFrameTimestamp=timestamp;requestAnimationFrame(loop);}else{_this.previousFrameTimestamp=null;}};if(this.activeFrameCallbacks.size===1){requestAnimationFrame(loop);}},registerFrameCallback:function(callback,callbackId){this.frameCallbackRegistry.set(callbackId,{callback:callback,startTime:null});},unregisterFrameCallback:function(callbackId){this.manageStateFrameCallback(callbackId,false);this.frameCallbackRegistry.delete(callbackId);},manageStateFrameCallback:function(callbackId,state){if(callbackId===-1){return;}if(state){this.activeFrameCallbacks.add(callbackId);this.runCallbacks();}else{const callback=this.frameCallbackRegistry.get(callbackId);callback.startTime=null;this.activeFrameCallbacks.delete(callbackId);}}};global._frameCallbackRegistry=frameCallbackRegistry;}\";\n  _f.__workletHash = 3289807004391;\n  _f.__location = \"/Users/Benjamin/Dev/hoohacks/mindcraft-front/node_modules/react-native-reanimated/lib/reanimated2/frameCallback/FrameCallbackRegistryUI.js (2:41)\";\n  return _f;\n}());","map":{"version":3,"sources":["/Users/Benjamin/Dev/hoohacks/mindcraft-front/node_modules/react-native-reanimated/lib/reanimated2/frameCallback/FrameCallbackRegistryUI.js"],"names":["runOnUI","prepareUIRegistry","frameCallbackRegistry","Map","activeFrameCallbacks","Set","previousFrameTimestamp","runCallbacks","loop","timestamp","delta","forEach","callbackId","callbackDetails","get","startTime","callback","timeSincePreviousFrame","timeSinceFirstFrame","size","requestAnimationFrame","registerFrameCallback","set","unregisterFrameCallback","manageStateFrameCallback","delete","state","add","global","_frameCallbackRegistry"],"mappings":"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","sourcesContent":["import { runOnUI } from '../core';\nexport const prepareUIRegistry = runOnUI(() => {\n    'worklet';\n    const frameCallbackRegistry = {\n        frameCallbackRegistry: new Map(),\n        activeFrameCallbacks: new Set(),\n        previousFrameTimestamp: null,\n        runCallbacks() {\n            const loop = (timestamp) => {\n                if (this.previousFrameTimestamp === null) {\n                    this.previousFrameTimestamp = timestamp;\n                }\n                const delta = timestamp - this.previousFrameTimestamp;\n                this.activeFrameCallbacks.forEach((callbackId) => {\n                    const callbackDetails = this.frameCallbackRegistry.get(callbackId);\n                    const { startTime } = callbackDetails;\n                    if (startTime === null) {\n                        // First frame\n                        callbackDetails.startTime = timestamp;\n                        callbackDetails.callback({\n                            timestamp,\n                            timeSincePreviousFrame: null,\n                            timeSinceFirstFrame: 0,\n                        });\n                    }\n                    else {\n                        // Next frame\n                        callbackDetails.callback({\n                            timestamp,\n                            timeSincePreviousFrame: delta,\n                            timeSinceFirstFrame: timestamp - startTime,\n                        });\n                    }\n                });\n                if (this.activeFrameCallbacks.size > 0) {\n                    this.previousFrameTimestamp = timestamp;\n                    requestAnimationFrame(loop);\n                }\n                else {\n                    this.previousFrameTimestamp = null;\n                }\n            };\n            // runCallback() should only be called after registering a callback,\n            // so if there is only one active callback, then it means that there were\n            // zero previously and the loop isn't running yet.\n            if (this.activeFrameCallbacks.size === 1) {\n                requestAnimationFrame(loop);\n            }\n        },\n        registerFrameCallback(callback, callbackId) {\n            this.frameCallbackRegistry.set(callbackId, {\n                callback: callback,\n                startTime: null,\n            });\n        },\n        unregisterFrameCallback(callbackId) {\n            this.manageStateFrameCallback(callbackId, false);\n            this.frameCallbackRegistry.delete(callbackId);\n        },\n        manageStateFrameCallback(callbackId, state) {\n            if (callbackId === -1) {\n                return;\n            }\n            if (state) {\n                this.activeFrameCallbacks.add(callbackId);\n                this.runCallbacks();\n            }\n            else {\n                const callback = this.frameCallbackRegistry.get(callbackId);\n                callback.startTime = null;\n                this.activeFrameCallbacks.delete(callbackId);\n            }\n        },\n    };\n    global._frameCallbackRegistry = frameCallbackRegistry;\n});\n"]},"metadata":{},"sourceType":"module"}