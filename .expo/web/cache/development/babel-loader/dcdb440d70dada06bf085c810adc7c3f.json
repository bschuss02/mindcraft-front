{"ast":null,"code":"import * as React from 'react';\nimport useNavigation from \"./useNavigation\";\nexport default function useFocusEffect(effect) {\n  var navigation = useNavigation();\n\n  if (arguments[1] !== undefined) {\n    var message = \"You passed a second argument to 'useFocusEffect', but it only accepts one argument. \" + \"If you want to pass a dependency array, you can use 'React.useCallback':\\n\\n\" + 'useFocusEffect(\\n' + '  React.useCallback(() => {\\n' + '    // Your code here\\n' + '  }, [depA, depB])\\n' + ');\\n\\n' + 'See usage guide: https://reactnavigation.org/docs/use-focus-effect';\n    console.error(message);\n  }\n\n  React.useEffect(function () {\n    var isFocused = false;\n    var cleanup;\n\n    var callback = function callback() {\n      var destroy = effect();\n\n      if (destroy === undefined || typeof destroy === 'function') {\n        return destroy;\n      }\n\n      if (process.env.NODE_ENV !== 'production') {\n        var _message = 'An effect function must not return anything besides a function, which is used for clean-up.';\n\n        if (destroy === null) {\n          _message += \" You returned 'null'. If your effect does not require clean-up, return 'undefined' (or nothing).\";\n        } else if (typeof destroy.then === 'function') {\n          _message += \"\\n\\nIt looks like you wrote 'useFocusEffect(async () => ...)' or returned a Promise. \" + 'Instead, write the async function inside your effect ' + 'and call it immediately:\\n\\n' + 'useFocusEffect(\\n' + '  React.useCallback(() => {\\n' + '    async function fetchData() {\\n' + '      // You can await here\\n' + '      const response = await MyAPI.getData(someId);\\n' + '      // ...\\n' + '    }\\n\\n' + '    fetchData();\\n' + '  }, [someId])\\n' + ');\\n\\n' + 'See usage guide: https://reactnavigation.org/docs/use-focus-effect';\n        } else {\n          _message += \" You returned '\" + JSON.stringify(destroy) + \"'.\";\n        }\n\n        console.error(_message);\n      }\n    };\n\n    if (navigation.isFocused()) {\n      cleanup = callback();\n      isFocused = true;\n    }\n\n    var unsubscribeFocus = navigation.addListener('focus', function () {\n      if (isFocused) {\n        return;\n      }\n\n      if (cleanup !== undefined) {\n        cleanup();\n      }\n\n      cleanup = callback();\n      isFocused = true;\n    });\n    var unsubscribeBlur = navigation.addListener('blur', function () {\n      if (cleanup !== undefined) {\n        cleanup();\n      }\n\n      cleanup = undefined;\n      isFocused = false;\n    });\n    return function () {\n      if (cleanup !== undefined) {\n        cleanup();\n      }\n\n      unsubscribeFocus();\n      unsubscribeBlur();\n    };\n  }, [effect, navigation]);\n}","map":{"version":3,"sources":["useFocusEffect.tsx"],"names":["React","useNavigation","useFocusEffect","effect","navigation","arguments","undefined","message","console","error","useEffect","isFocused","cleanup","callback","destroy","process","env","NODE_ENV","then","JSON","stringify","unsubscribeFocus","addListener","unsubscribeBlur"],"mappings":"AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AAEA,OAAOC,aAAP;AAWA,eAAe,SAASC,cAAT,CAAwBC,MAAxB,EAAgD;AAC7D,MAAMC,UAAU,GAAGH,aAAa,EAAhC;;AAEA,MAAII,SAAS,CAAC,CAAD,CAATA,KAAiBC,SAArB,EAAgC;AAC9B,QAAMC,OAAO,GACX,yFACA,8EADA,GAEA,mBAFA,GAGA,+BAHA,GAIA,yBAJA,GAKA,sBALA,GAMA,QANA,GAOA,oEARF;AAUAC,IAAAA,OAAO,CAACC,KAARD,CAAcD,OAAdC;AACF;;AAEAR,EAAAA,KAAK,CAACU,SAANV,CAAgB,YAAM;AACpB,QAAIW,SAAS,GAAG,KAAhB;AACA,QAAIC,OAAJ;;AAEA,QAAMC,QAAQ,GAAG,SAAXA,QAAW,GAAM;AACrB,UAAMC,OAAO,GAAGX,MAAM,EAAtB;;AAEA,UAAIW,OAAO,KAAKR,SAAZQ,IAAyB,OAAOA,OAAP,KAAmB,UAAhD,EAA4D;AAC1D,eAAOA,OAAP;AACF;;AAEA,UAAIC,OAAO,CAACC,GAARD,CAAYE,QAAZF,KAAyB,YAA7B,EAA2C;AACzC,YAAIR,QAAO,GACT,6FADF;;AAGA,YAAIO,OAAO,KAAK,IAAhB,EAAsB;AACpBP,UAAAA,QAAO,IACL,kGADFA;AAED,SAHD,MAGO,IAAI,OAAQO,OAAO,CAASI,IAAxB,KAAiC,UAArC,EAAiD;AACtDX,UAAAA,QAAO,IACL,0FACA,uDADA,GAEA,8BAFA,GAGA,mBAHA,GAIA,+BAJA,GAKA,oCALA,GAMA,+BANA,GAOA,uDAPA,GAQA,gBARA,GASA,WATA,GAUA,oBAVA,GAWA,kBAXA,GAYA,QAZA,GAaA,oEAdFA;AAeD,SAhBM,MAgBA;AACLA,UAAAA,QAAO,wBAAsBY,IAAI,CAACC,SAALD,CAAeL,OAAfK,CAAtB,OAAPZ;AACF;;AAEAC,QAAAA,OAAO,CAACC,KAARD,CAAcD,QAAdC;AACF;AACD,KApCD;;AAuCA,QAAIJ,UAAU,CAACO,SAAXP,EAAJ,EAA4B;AAC1BQ,MAAAA,OAAO,GAAGC,QAAQ,EAAlBD;AACAD,MAAAA,SAAS,GAAG,IAAZA;AACF;;AAEA,QAAMU,gBAAgB,GAAGjB,UAAU,CAACkB,WAAXlB,CAAuB,OAAvBA,EAAgC,YAAM;AAG7D,UAAIO,SAAJ,EAAe;AACb;AACF;;AAEA,UAAIC,OAAO,KAAKN,SAAhB,EAA2B;AACzBM,QAAAA,OAAO;AACT;;AAEAA,MAAAA,OAAO,GAAGC,QAAQ,EAAlBD;AACAD,MAAAA,SAAS,GAAG,IAAZA;AACD,KAbwBP,CAAzB;AAeA,QAAMmB,eAAe,GAAGnB,UAAU,CAACkB,WAAXlB,CAAuB,MAAvBA,EAA+B,YAAM;AAC3D,UAAIQ,OAAO,KAAKN,SAAhB,EAA2B;AACzBM,QAAAA,OAAO;AACT;;AAEAA,MAAAA,OAAO,GAAGN,SAAVM;AACAD,MAAAA,SAAS,GAAG,KAAZA;AACD,KAPuBP,CAAxB;AASA,WAAO,YAAM;AACX,UAAIQ,OAAO,KAAKN,SAAhB,EAA2B;AACzBM,QAAAA,OAAO;AACT;;AAEAS,MAAAA,gBAAgB;AAChBE,MAAAA,eAAe;AAChB,KAPD;AAQD,GAhFDvB,EAgFG,CAACG,MAAD,EAASC,UAAT,CAhFHJ;AAiFF","sourceRoot":"../../src","sourcesContent":["import * as React from 'react';\nimport useNavigation from './useNavigation';\n/**\n * Hook to run an effect in a focused screen, similar to `React.useEffect`.\n * This can be used to perform side-effects such as fetching data or subscribing to events.\n * The passed callback should be wrapped in `React.useCallback` to avoid running the effect too often.\n *\n * @param callback Memoized callback containing the effect, should optionally return a cleanup function.\n */\nexport default function useFocusEffect(effect) {\n  const navigation = useNavigation();\n  if (arguments[1] !== undefined) {\n    const message = \"You passed a second argument to 'useFocusEffect', but it only accepts one argument. \" + \"If you want to pass a dependency array, you can use 'React.useCallback':\\n\\n\" + 'useFocusEffect(\\n' + '  React.useCallback(() => {\\n' + '    // Your code here\\n' + '  }, [depA, depB])\\n' + ');\\n\\n' + 'See usage guide: https://reactnavigation.org/docs/use-focus-effect';\n    console.error(message);\n  }\n  React.useEffect(() => {\n    let isFocused = false;\n    let cleanup;\n    const callback = () => {\n      const destroy = effect();\n      if (destroy === undefined || typeof destroy === 'function') {\n        return destroy;\n      }\n      if (process.env.NODE_ENV !== 'production') {\n        let message = 'An effect function must not return anything besides a function, which is used for clean-up.';\n        if (destroy === null) {\n          message += \" You returned 'null'. If your effect does not require clean-up, return 'undefined' (or nothing).\";\n        } else if (typeof destroy.then === 'function') {\n          message += \"\\n\\nIt looks like you wrote 'useFocusEffect(async () => ...)' or returned a Promise. \" + 'Instead, write the async function inside your effect ' + 'and call it immediately:\\n\\n' + 'useFocusEffect(\\n' + '  React.useCallback(() => {\\n' + '    async function fetchData() {\\n' + '      // You can await here\\n' + '      const response = await MyAPI.getData(someId);\\n' + '      // ...\\n' + '    }\\n\\n' + '    fetchData();\\n' + '  }, [someId])\\n' + ');\\n\\n' + 'See usage guide: https://reactnavigation.org/docs/use-focus-effect';\n        } else {\n          message += ` You returned '${JSON.stringify(destroy)}'.`;\n        }\n        console.error(message);\n      }\n    };\n\n    // We need to run the effect on intial render/dep changes if the screen is focused\n    if (navigation.isFocused()) {\n      cleanup = callback();\n      isFocused = true;\n    }\n    const unsubscribeFocus = navigation.addListener('focus', () => {\n      // If callback was already called for focus, avoid calling it again\n      // The focus event may also fire on intial render, so we guard against runing the effect twice\n      if (isFocused) {\n        return;\n      }\n      if (cleanup !== undefined) {\n        cleanup();\n      }\n      cleanup = callback();\n      isFocused = true;\n    });\n    const unsubscribeBlur = navigation.addListener('blur', () => {\n      if (cleanup !== undefined) {\n        cleanup();\n      }\n      cleanup = undefined;\n      isFocused = false;\n    });\n    return () => {\n      if (cleanup !== undefined) {\n        cleanup();\n      }\n      unsubscribeFocus();\n      unsubscribeBlur();\n    };\n  }, [effect, navigation]);\n}\n//# sourceMappingURL=useFocusEffect.js.map"]},"metadata":{},"sourceType":"module"}