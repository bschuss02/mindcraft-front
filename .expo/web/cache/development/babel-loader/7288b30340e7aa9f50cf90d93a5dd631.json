{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _toConsumableArray from \"@babel/runtime/helpers/toConsumableArray\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport { useMemo as $58Phs$useMemo, useRef as $58Phs$useRef, useEffect as $58Phs$useEffect } from \"react\";\nimport { useMultipleSelectionState as $58Phs$useMultipleSelectionState, SelectionManager as $58Phs$SelectionManager } from \"@react-stately/selection\";\nimport { useCollection as $58Phs$useCollection } from \"@react-stately/collections\";\nimport $58Phs$swchelperssrc_define_propertymjs from \"@swc/helpers/src/_define_property.mjs\";\nimport { useControlledState as $58Phs$useControlledState } from \"@react-stately/utils\";\nvar $a02d57049d202695$var$_Symbol_iterator = Symbol.iterator;\n\nvar $a02d57049d202695$export$d085fb9e920b5ca7 = function () {\n  function $a02d57049d202695$export$d085fb9e920b5ca7(nodes) {\n    var _this = this;\n\n    _classCallCheck(this, $a02d57049d202695$export$d085fb9e920b5ca7);\n\n    (0, $58Phs$swchelperssrc_define_propertymjs)(this, \"keyMap\", new Map());\n    this.iterable = nodes;\n\n    var visit = function visit(node) {\n      _this.keyMap.set(node.key, node);\n\n      if (node.childNodes && node.type === \"section\") for (var child of node.childNodes) visit(child);\n    };\n\n    for (var node of nodes) visit(node);\n\n    var last;\n    var index = 0;\n\n    for (var _ref3 of this.keyMap) {\n      var _ref2 = _slicedToArray(_ref3, 2);\n\n      var key = _ref2[0];\n      var node1 = _ref2[1];\n\n      if (last) {\n        last.nextKey = key;\n        node1.prevKey = last.key;\n      } else {\n        this.firstKey = key;\n        node1.prevKey = undefined;\n      }\n\n      if (node1.type === \"item\") node1.index = index++;\n      last = node1;\n      last.nextKey = undefined;\n    }\n\n    this.lastKey = last === null || last === void 0 ? void 0 : last.key;\n  }\n\n  _createClass($a02d57049d202695$export$d085fb9e920b5ca7, [{\n    key: $a02d57049d202695$var$_Symbol_iterator,\n    value: function* value() {\n      yield* this.iterable;\n    }\n  }, {\n    key: \"size\",\n    get: function get() {\n      return this.keyMap.size;\n    }\n  }, {\n    key: \"getKeys\",\n    value: function getKeys() {\n      return this.keyMap.keys();\n    }\n  }, {\n    key: \"getKeyBefore\",\n    value: function getKeyBefore(key) {\n      var node = this.keyMap.get(key);\n      return node ? node.prevKey : null;\n    }\n  }, {\n    key: \"getKeyAfter\",\n    value: function getKeyAfter(key) {\n      var node = this.keyMap.get(key);\n      return node ? node.nextKey : null;\n    }\n  }, {\n    key: \"getFirstKey\",\n    value: function getFirstKey() {\n      return this.firstKey;\n    }\n  }, {\n    key: \"getLastKey\",\n    value: function getLastKey() {\n      return this.lastKey;\n    }\n  }, {\n    key: \"getItem\",\n    value: function getItem(key) {\n      return this.keyMap.get(key);\n    }\n  }, {\n    key: \"at\",\n    value: function at(idx) {\n      var keys = _toConsumableArray(this.getKeys());\n\n      return this.getItem(keys[idx]);\n    }\n  }]);\n\n  return $a02d57049d202695$export$d085fb9e920b5ca7;\n}();\n\nfunction $e72dd72e1c76a225$export$2f645645f7bca764(props) {\n  var filter = props.filter;\n  var selectionState = (0, $58Phs$useMultipleSelectionState)(props);\n  var disabledKeys = (0, $58Phs$useMemo)(function () {\n    return props.disabledKeys ? new Set(props.disabledKeys) : new Set();\n  }, [props.disabledKeys]);\n\n  var factory = function factory(nodes) {\n    return filter ? new (0, $a02d57049d202695$export$d085fb9e920b5ca7)(filter(nodes)) : new (0, $a02d57049d202695$export$d085fb9e920b5ca7)(nodes);\n  };\n\n  var context = (0, $58Phs$useMemo)(function () {\n    return {\n      suppressTextValueWarning: props.suppressTextValueWarning\n    };\n  }, [props.suppressTextValueWarning]);\n  var collection = (0, $58Phs$useCollection)(props, factory, context, [filter]);\n  var selectionManager = (0, $58Phs$useMemo)(function () {\n    return new (0, $58Phs$SelectionManager)(collection, selectionState);\n  }, [collection, selectionState]);\n  var cachedCollection = (0, $58Phs$useRef)(null);\n  (0, $58Phs$useEffect)(function () {\n    if (selectionState.focusedKey != null && !collection.getItem(selectionState.focusedKey)) {\n      var startItem = cachedCollection.current.getItem(selectionState.focusedKey);\n\n      var cachedItemNodes = _toConsumableArray(cachedCollection.current.getKeys()).map(function (key) {\n        var itemNode = cachedCollection.current.getItem(key);\n        return itemNode.type === \"item\" ? itemNode : null;\n      }).filter(function (node) {\n        return node !== null;\n      });\n\n      var itemNodes = _toConsumableArray(collection.getKeys()).map(function (key) {\n        var itemNode = collection.getItem(key);\n        return itemNode.type === \"item\" ? itemNode : null;\n      }).filter(function (node) {\n        return node !== null;\n      });\n\n      var diff = cachedItemNodes.length - itemNodes.length;\n      var index = Math.min(diff > 1 ? Math.max(startItem.index - diff + 1, 0) : startItem.index, itemNodes.length - 1);\n      var newNode;\n\n      while (index >= 0) {\n        if (!selectionManager.isDisabled(itemNodes[index].key)) {\n          newNode = itemNodes[index];\n          break;\n        }\n\n        if (index < itemNodes.length - 1) index++;else {\n          if (index > startItem.index) index = startItem.index;\n          index--;\n        }\n      }\n\n      selectionState.setFocusedKey(newNode ? newNode.key : null);\n    }\n\n    cachedCollection.current = collection;\n  }, [collection, selectionManager, selectionState, selectionState.focusedKey]);\n  return {\n    collection: collection,\n    disabledKeys: disabledKeys,\n    selectionManager: selectionManager\n  };\n}\n\nfunction $a0d645289fe9b86b$export$e7f05e985daf4b5f(props) {\n  var _props_defaultSelectedKey;\n\n  var _ref4 = (0, $58Phs$useControlledState)(props.selectedKey, (_props_defaultSelectedKey = props.defaultSelectedKey) !== null && _props_defaultSelectedKey !== void 0 ? _props_defaultSelectedKey : null, props.onSelectionChange),\n      _ref5 = _slicedToArray(_ref4, 2),\n      selectedKey = _ref5[0],\n      setSelectedKey = _ref5[1];\n\n  var selectedKeys = (0, $58Phs$useMemo)(function () {\n    return selectedKey != null ? [selectedKey] : [];\n  }, [selectedKey]);\n\n  var _ref6 = (0, $e72dd72e1c76a225$export$2f645645f7bca764)(_objectSpread(_objectSpread({}, props), {}, {\n    selectionMode: \"single\",\n    disallowEmptySelection: true,\n    allowDuplicateSelectionEvents: true,\n    selectedKeys: selectedKeys,\n    onSelectionChange: function onSelectionChange(keys) {\n      var key = keys.values().next().value;\n      if (key === selectedKey && props.onSelectionChange) props.onSelectionChange(key);\n      setSelectedKey(key);\n    }\n  })),\n      collection = _ref6.collection,\n      disabledKeys = _ref6.disabledKeys,\n      selectionManager = _ref6.selectionManager;\n\n  var selectedItem = selectedKey != null ? collection.getItem(selectedKey) : null;\n  return {\n    collection: collection,\n    disabledKeys: disabledKeys,\n    selectionManager: selectionManager,\n    selectedKey: selectedKey,\n    setSelectedKey: setSelectedKey,\n    selectedItem: selectedItem\n  };\n}\n\nexport { $e72dd72e1c76a225$export$2f645645f7bca764 as useListState, $a0d645289fe9b86b$export$e7f05e985daf4b5f as useSingleSelectListState, $a02d57049d202695$export$d085fb9e920b5ca7 as ListCollection };","map":{"version":3,"sources":["packages/@react-stately/list/src/useListState.ts","packages/@react-stately/list/src/ListCollection.ts","packages/@react-stately/list/src/useSingleSelectListState.ts"],"names":[],"mappings":"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","sourcesContent":["/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {Collection, CollectionBase, Node} from '@react-types/shared';\nimport {Key, useEffect, useMemo, useRef} from 'react';\nimport {ListCollection} from './ListCollection';\nimport {MultipleSelectionStateProps, SelectionManager, useMultipleSelectionState} from '@react-stately/selection';\nimport {useCollection} from '@react-stately/collections';\n\nexport interface ListProps<T> extends CollectionBase<T>, MultipleSelectionStateProps {\n  /** Filter function to generate a filtered list of nodes. */\n  filter?: (nodes: Iterable<Node<T>>) => Iterable<Node<T>>,\n  /** @private */\n  suppressTextValueWarning?: boolean\n}\n\nexport interface ListState<T> {\n  /** A collection of items in the list. */\n  collection: Collection<Node<T>>,\n\n  /** A set of items that are disabled. */\n  disabledKeys: Set<Key>,\n\n  /** A selection manager to read and update multiple selection state. */\n  selectionManager: SelectionManager\n}\n\n/**\n * Provides state management for list-like components. Handles building a collection\n * of items from props, and manages multiple selection state.\n */\nexport function useListState<T extends object>(props: ListProps<T>): ListState<T>  {\n  let {filter} = props;\n\n  let selectionState = useMultipleSelectionState(props);\n  let disabledKeys = useMemo(() =>\n    props.disabledKeys ? new Set(props.disabledKeys) : new Set<Key>()\n  , [props.disabledKeys]);\n\n  let factory = nodes => filter ? new ListCollection(filter(nodes)) : new ListCollection(nodes as Iterable<Node<T>>);\n  let context = useMemo(() => ({suppressTextValueWarning: props.suppressTextValueWarning}), [props.suppressTextValueWarning]);\n\n  let collection = useCollection(props, factory, context, [filter]);\n\n  let selectionManager = useMemo(() =>\n    new SelectionManager(collection, selectionState)\n    , [collection, selectionState]\n  );\n\n  // Reset focused key if that item is deleted from the collection.\n  const cachedCollection = useRef(null);\n  useEffect(() => {\n    if (selectionState.focusedKey != null && !collection.getItem(selectionState.focusedKey)) {\n      const startItem = cachedCollection.current.getItem(selectionState.focusedKey);\n      const cachedItemNodes = [...cachedCollection.current.getKeys()].map(\n        key => {\n          const itemNode = cachedCollection.current.getItem(key);\n          return itemNode.type === 'item' ? itemNode : null;\n        }\n      ).filter(node => node !== null);\n      const itemNodes = [...collection.getKeys()].map(\n        key => {\n          const itemNode = collection.getItem(key);\n          return itemNode.type === 'item' ? itemNode : null;\n        }\n      ).filter(node => node !== null);\n      const diff = cachedItemNodes.length - itemNodes.length;\n      let index = Math.min(\n        (\n          diff > 1 ?\n          Math.max(startItem.index - diff + 1, 0) :\n          startItem.index\n        ),\n        itemNodes.length - 1);\n      let newNode:Node<T>;\n      while (index >= 0) {\n        if (!selectionManager.isDisabled(itemNodes[index].key)) {\n          newNode = itemNodes[index];\n          break;\n        }\n        // Find next, not disabled item.\n        if (index < itemNodes.length - 1) {\n          index++;\n        // Otherwise, find previous, not disabled item.\n        } else {\n          if (index > startItem.index) {\n            index = startItem.index;\n          }\n          index--;\n        }\n      }\n      selectionState.setFocusedKey(newNode ? newNode.key : null);\n    }\n    cachedCollection.current = collection;\n  }, [collection, selectionManager, selectionState, selectionState.focusedKey]);\n\n  return {\n    collection,\n    disabledKeys,\n    selectionManager\n  };\n}\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {Collection, Node} from '@react-types/shared';\nimport {Key} from 'react';\n\nexport class ListCollection<T> implements Collection<Node<T>> {\n  private keyMap: Map<Key, Node<T>> = new Map();\n  private iterable: Iterable<Node<T>>;\n  private firstKey: Key;\n  private lastKey: Key;\n\n  constructor(nodes: Iterable<Node<T>>) {\n    this.iterable = nodes;\n\n    let visit = (node: Node<T>) => {\n      this.keyMap.set(node.key, node);\n\n      if (node.childNodes && node.type === 'section') {\n        for (let child of node.childNodes) {\n          visit(child);\n        }\n      }\n    };\n\n    for (let node of nodes) {\n      visit(node);\n    }\n\n    let last: Node<T>;\n    let index = 0;\n    for (let [key, node] of this.keyMap) {\n      if (last) {\n        last.nextKey = key;\n        node.prevKey = last.key;\n      } else {\n        this.firstKey = key;\n        node.prevKey = undefined;\n      }\n\n      if (node.type === 'item') {\n        node.index = index++;\n      }\n\n      last = node;\n\n      // Set nextKey as undefined since this might be the last node\n      // If it isn't the last node, last.nextKey will properly set at start of new loop\n      last.nextKey = undefined;\n    }\n\n    this.lastKey = last?.key;\n  }\n\n  *[Symbol.iterator]() {\n    yield* this.iterable;\n  }\n\n  get size() {\n    return this.keyMap.size;\n  }\n\n  getKeys() {\n    return this.keyMap.keys();\n  }\n\n  getKeyBefore(key: Key) {\n    let node = this.keyMap.get(key);\n    return node ? node.prevKey : null;\n  }\n\n  getKeyAfter(key: Key) {\n    let node = this.keyMap.get(key);\n    return node ? node.nextKey : null;\n  }\n\n  getFirstKey() {\n    return this.firstKey;\n  }\n\n  getLastKey() {\n    return this.lastKey;\n  }\n\n  getItem(key: Key) {\n    return this.keyMap.get(key);\n  }\n\n  at(idx: number) {\n    const keys = [...this.getKeys()];\n    return this.getItem(keys[idx]);\n  }\n}\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {CollectionBase, SingleSelection} from '@react-types/shared';\nimport {Key, useMemo} from 'react';\nimport {ListState, useListState} from './useListState';\nimport {Node} from '@react-types/shared';\nimport {useControlledState} from '@react-stately/utils';\n\nexport interface SingleSelectListProps<T> extends CollectionBase<T>, Omit<SingleSelection, 'disallowEmptySelection'> {\n  /** Filter function to generate a filtered list of nodes. */\n  filter?: (nodes: Iterable<Node<T>>) => Iterable<Node<T>>,\n  /** @private */\n  suppressTextValueWarning?: boolean\n}\n\nexport interface SingleSelectListState<T> extends ListState<T> {\n  /** The key for the currently selected item. */\n  readonly selectedKey: Key,\n\n  /** Sets the selected key. */\n  setSelectedKey(key: Key): void,\n\n  /** The value of the currently selected item. */\n  readonly selectedItem: Node<T>\n}\n\n/**\n * Provides state management for list-like components with single selection.\n * Handles building a collection of items from props, and manages selection state.\n */\nexport function useSingleSelectListState<T extends object>(props: SingleSelectListProps<T>): SingleSelectListState<T>  {\n  let [selectedKey, setSelectedKey] = useControlledState(props.selectedKey, props.defaultSelectedKey ?? null, props.onSelectionChange);\n  let selectedKeys = useMemo(() => selectedKey != null ? [selectedKey] : [], [selectedKey]);\n  let {collection, disabledKeys, selectionManager} = useListState({\n    ...props,\n    selectionMode: 'single',\n    disallowEmptySelection: true,\n    allowDuplicateSelectionEvents: true,\n    selectedKeys,\n    onSelectionChange: (keys: Set<Key>) => {\n      let key = keys.values().next().value;\n\n      // Always fire onSelectionChange, even if the key is the same\n      // as the current key (useControlledState does not).\n      if (key === selectedKey && props.onSelectionChange) {\n        props.onSelectionChange(key);\n      }\n\n      setSelectedKey(key);\n    }\n  });\n\n  let selectedItem = selectedKey != null\n    ? collection.getItem(selectedKey)\n    : null;\n\n  return {\n    collection,\n    disabledKeys,\n    selectionManager,\n    selectedKey,\n    setSelectedKey,\n    selectedItem\n  };\n}\n"]},"metadata":{},"sourceType":"module"}