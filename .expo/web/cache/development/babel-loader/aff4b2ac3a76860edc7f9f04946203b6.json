{"ast":null,"code":"import _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nimport AsyncStorage from \"@react-native-async-storage/async-storage\";\nvar URL = \"http://localhost:3000\";\nvar callingLogColor = \"\\x1b[36m%s\\x1b[0m\";\nvar receivedLogColor = \"\\x1b[32m%s\\x1b[0m\";\nvar errorLogColor = \"\\x1b[35m%s\\x1b[0m\";\n\nfunction prettyStringify(obj) {\n  var prettyString = JSON.stringify(obj, null, 1);\n  if (!prettyString) return \"\";\n  var indentedPrettyString = prettyString.replaceAll(\"\\n\", \"\\n\\t\");\n\n  if (indentedPrettyString.length > 10000) {\n    return indentedPrettyString.substring(0, 9900) + \"...[TRUNCATED]\";\n  }\n\n  return indentedPrettyString;\n}\n\nfunction logApiStart(method, route, data) {\n  console.log(callingLogColor, method + \" \" + route + \" \" + prettyStringify(data));\n}\n\nfunction logApiEnd(method, route, res, elapsedTime, data, error) {\n  if (error) {\n    console.log(errorLogColor, method + \" \" + route + \" \" + res.status + \" \\\"\" + error + \"\\\"\\n\");\n  } else {\n    console.log(receivedLogColor, method + \" \" + route + \" \" + elapsedTime + \"ms \" + prettyStringify(data) + \"\\n\");\n  }\n}\n\nfunction apiCall(_x, _x2, _x3) {\n  return _apiCall.apply(this, arguments);\n}\n\nfunction _apiCall() {\n  _apiCall = _asyncToGenerator(function* (method, route, data) {\n    var start = Date.now();\n    var dataString = JSON.stringify(data);\n    var authToken = yield AsyncStorage.getItem(\"authToken\");\n    var apiUrl = URL + \"/\" + route;\n    var config = {\n      method: method,\n      headers: {\n        Accept: \"application/json\",\n        \"Content-Type\": \"application/json\",\n        \"x-auth-token\": authToken\n      }\n    };\n\n    if (method === \"GET\") {\n      apiUrl += \"?\" + new URLSearchParams(data);\n    } else {\n      config.body = dataString;\n    }\n\n    logApiStart(method, route, data);\n    var res = yield fetch(apiUrl, config);\n    var elapsedTime = Date.now() - start;\n    var returnData;\n    var returnError;\n\n    if (res.ok) {\n      returnData = yield res.json();\n      returnError = null;\n    } else {\n      returnError = yield res.text();\n      returnData = null;\n    }\n\n    logApiEnd(method, route, res, elapsedTime, returnData, returnError);\n    return {\n      data: returnData,\n      error: returnError\n    };\n  });\n  return _apiCall.apply(this, arguments);\n}\n\nexport default apiCall;","map":{"version":3,"sources":["/Users/Benjamin/Dev/hoohacks/mindcraft-front/src/util/api/apiCall.js"],"names":["AsyncStorage","URL","callingLogColor","receivedLogColor","errorLogColor","prettyStringify","obj","prettyString","JSON","stringify","indentedPrettyString","replaceAll","length","substring","logApiStart","method","route","data","console","log","logApiEnd","res","elapsedTime","error","status","apiCall","start","Date","now","dataString","authToken","getItem","apiUrl","config","headers","Accept","URLSearchParams","body","fetch","returnData","returnError","ok","json","text"],"mappings":"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","sourcesContent":["import AsyncStorage from \"@react-native-async-storage/async-storage\"\n\nlet URL = \"http://localhost:3000\"\n\nconst callingLogColor = \"\\x1b[36m%s\\x1b[0m\"\nconst receivedLogColor = \"\\x1b[32m%s\\x1b[0m\"\nconst errorLogColor = \"\\x1b[35m%s\\x1b[0m\"\n\nfunction prettyStringify(obj) {\n\tconst prettyString = JSON.stringify(obj, null, 1)\n\tif (!prettyString) return \"\"\n\tconst indentedPrettyString = prettyString.replaceAll(\"\\n\", \"\\n\\t\")\n\tif (indentedPrettyString.length > 10000) {\n\t\treturn indentedPrettyString.substring(0, 9900) + \"...[TRUNCATED]\"\n\t}\n\treturn indentedPrettyString\n}\n\nfunction logApiStart(method, route, data) {\n\tconsole.log(callingLogColor, `${method} ${route} ${prettyStringify(data)}`)\n}\n\nfunction logApiEnd(method, route, res, elapsedTime, data, error) {\n\tif (error) {\n\t\tconsole.log(errorLogColor, `${method} ${route} ${res.status} \"${error}\"\\n`)\n\t} else {\n\t\tconsole.log(\n\t\t\treceivedLogColor,\n\t\t\t`${method} ${route} ${elapsedTime}ms ${prettyStringify(data)}\\n`,\n\t\t)\n\t}\n}\n\nasync function apiCall(method, route, data) {\n\tconst start = Date.now()\n\tconst dataString = JSON.stringify(data)\n\tconst authToken = await AsyncStorage.getItem(\"authToken\")\n\tlet apiUrl = `${URL}/${route}`\n\tlet config = {\n\t\tmethod,\n\t\theaders: {\n\t\t\tAccept: \"application/json\",\n\t\t\t\"Content-Type\": \"application/json\",\n\t\t\t\"x-auth-token\": authToken,\n\t\t},\n\t}\n\tif (method === \"GET\") {\n\t\tapiUrl += `?${new URLSearchParams(data)}`\n\t} else {\n\t\tconfig.body = dataString\n\t}\n\tlogApiStart(method, route, data)\n\tconst res = await fetch(apiUrl, config)\n\tconst elapsedTime = Date.now() - start\n\n\tlet returnData\n\tlet returnError\n\tif (res.ok) {\n\t\treturnData = await res.json()\n\t\treturnError = null\n\t} else {\n\t\treturnError = await res.text()\n\t\treturnData = null\n\t}\n\tlogApiEnd(method, route, res, elapsedTime, returnData, returnError)\n\treturn { data: returnData, error: returnError }\n}\n\nexport default apiCall\n"]},"metadata":{},"sourceType":"module"}