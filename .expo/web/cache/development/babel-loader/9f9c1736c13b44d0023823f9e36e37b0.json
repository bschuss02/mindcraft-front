{"ast":null,"code":"import findNodeHandle from \"react-native-web/dist/exports/findNodeHandle\";\nimport { isChromeDebugger, isWeb, shouldBeUseWeb } from \"./PlatformChecker\";\nexport function getTag(view) {\n  return findNodeHandle(view);\n}\nvar isNative = !shouldBeUseWeb();\nexport var measure;\n\nif (isWeb()) {\n  measure = function measure(animatedRef) {\n    var element = animatedRef();\n    var viewportOffset = element.getBoundingClientRect();\n    return {\n      width: element.offsetWidth,\n      height: element.offsetHeight,\n      x: element.offsetLeft,\n      y: element.offsetTop,\n      pageX: viewportOffset.left,\n      pageY: viewportOffset.top\n    };\n  };\n} else if (isChromeDebugger()) {\n  measure = function measure(_animatedRef) {\n    console.warn('[Reanimated] measure() cannot be used with Chrome Debugger.');\n    return null;\n  };\n} else {\n  measure = function () {\n    var _f = function _f(animatedRef) {\n      if (!_WORKLET) {\n        console.warn('[Reanimated] measure() was called from the main JS context. Measure is ' + 'only available in the UI runtime. This may also happen if measure() ' + 'was called by a worklet in the useAnimatedStyle hook, because useAnimatedStyle ' + 'calls the given worklet on the JS runtime during render. If you want to ' + 'prevent this warning then wrap the call with `if (_WORKLET)`. Then it will ' + 'only be called on the UI runtime after the render has been completed.');\n        return null;\n      }\n\n      var viewTag = animatedRef();\n\n      if (viewTag === -1) {\n        console.warn(\"[Reanimated] The view with tag \" + viewTag + \" is not a valid argument for measure(). This may be because the view is not currently rendered, which may not be a bug (e.g. an off-screen FlatList item).\");\n        return null;\n      }\n\n      var measured = _measure(viewTag);\n\n      if (measured === null) {\n        console.warn(\"[Reanimated] The view with tag \" + viewTag + \" has some undefined, not-yet-computed or meaningless value of `LayoutMetrics` type. This may be because the view is not currently rendered, which may not be a bug (e.g. an off-screen FlatList item).\");\n        return null;\n      } else if (measured.x === -1234567) {\n        console.warn(\"[Reanimated] The view with tag \" + viewTag + \" returned an invalid measurement response.\");\n        return null;\n      } else if (isNaN(measured.x)) {\n        console.warn(\"[Reanimated] The view with tag \" + viewTag + \" gets view-flattened on Android. To disable view-flattening, set `collapsable={false}` on this component.\");\n        return null;\n      } else {\n        return measured;\n      }\n    };\n\n    _f._closure = {};\n    _f.asString = \"function _f(animatedRef){if(!_WORKLET){console.warn('[Reanimated] measure() was called from the main JS context. Measure is '+'only available in the UI runtime. This may also happen if measure() '+'was called by a worklet in the useAnimatedStyle hook, because useAnimatedStyle '+'calls the given worklet on the JS runtime during render. If you want to '+'prevent this warning then wrap the call with `if (_WORKLET)`. Then it will '+'only be called on the UI runtime after the render has been completed.');return null;}const viewTag=animatedRef();if(viewTag===-1){console.warn(\\\"[Reanimated] The view with tag \\\"+viewTag+\\\" is not a valid argument for measure(). This may be because the view is not currently rendered, which may not be a bug (e.g. an off-screen FlatList item).\\\");return null;}const measured=_measure(viewTag);if(measured===null){console.warn(\\\"[Reanimated] The view with tag \\\"+viewTag+\\\" has some undefined, not-yet-computed or meaningless value of `LayoutMetrics` type. This may be because the view is not currently rendered, which may not be a bug (e.g. an off-screen FlatList item).\\\");return null;}else if(measured.x===-1234567){console.warn(\\\"[Reanimated] The view with tag \\\"+viewTag+\\\" returned an invalid measurement response.\\\");return null;}else if(isNaN(measured.x)){console.warn(\\\"[Reanimated] The view with tag \\\"+viewTag+\\\" gets view-flattened on Android. To disable view-flattening, set `collapsable={false}` on this component.\\\");return null;}else{return measured;}}\";\n    _f.__workletHash = 4824065265814;\n    _f.__location = \"/Users/Benjamin/Dev/hoohacks/mindcraft-front/node_modules/react-native-reanimated/lib/reanimated2/NativeMethods.js (29:14)\";\n    return _f;\n  }();\n}\n\nexport var scrollTo;\n\nif (isWeb()) {\n  scrollTo = function () {\n    var _f = function _f(animatedRef, x, y, animated) {\n      var element = animatedRef();\n      element.scrollTo({\n        x: x,\n        y: y,\n        animated: animated\n      });\n    };\n\n    _f._closure = {};\n    _f.asString = \"function _f(animatedRef,x,y,animated){const element=animatedRef();element.scrollTo({x:x,y:y,animated:animated});}\";\n    _f.__workletHash = 1539328189141;\n    _f.__location = \"/Users/Benjamin/Dev/hoohacks/mindcraft-front/node_modules/react-native-reanimated/lib/reanimated2/NativeMethods.js (65:15)\";\n    return _f;\n  }();\n} else if (isNative) {\n  scrollTo = function () {\n    var _f = function _f(animatedRef, x, y, animated) {\n      if (!_WORKLET) {\n        return;\n      }\n\n      var viewTag = animatedRef();\n\n      _scrollTo(viewTag, x, y, animated);\n    };\n\n    _f._closure = {};\n    _f.asString = \"function _f(animatedRef,x,y,animated){if(!_WORKLET){return;}const viewTag=animatedRef();_scrollTo(viewTag,x,y,animated);}\";\n    _f.__workletHash = 11267178326065;\n    _f.__location = \"/Users/Benjamin/Dev/hoohacks/mindcraft-front/node_modules/react-native-reanimated/lib/reanimated2/NativeMethods.js (73:15)\";\n    return _f;\n  }();\n} else {\n  scrollTo = function scrollTo(_animatedRef, _x, _y) {};\n}\n\nexport var setGestureState = function () {\n  var _f = function _f(handlerTag, newState) {\n    if (!_WORKLET || !isNative) {\n      console.warn('[Reanimated] You can not use setGestureState in non-worklet function.');\n      return;\n    }\n\n    _setGestureState(handlerTag, newState);\n  };\n\n  _f._closure = {\n    isNative: isNative\n  };\n  _f.asString = \"function setGestureState(handlerTag,newState){const{isNative}=jsThis._closure;{if(!_WORKLET||!isNative){console.warn('[Reanimated] You can not use setGestureState in non-worklet function.');return;}_setGestureState(handlerTag,newState);}}\";\n  _f.__workletHash = 11162109634360;\n  _f.__location = \"/Users/Benjamin/Dev/hoohacks/mindcraft-front/node_modules/react-native-reanimated/lib/reanimated2/NativeMethods.js (87:7)\";\n  return _f;\n}();","map":{"version":3,"sources":["/Users/Benjamin/Dev/hoohacks/mindcraft-front/node_modules/react-native-reanimated/lib/reanimated2/NativeMethods.js"],"names":["isChromeDebugger","isWeb","shouldBeUseWeb","getTag","view","findNodeHandle","isNative","measure","animatedRef","element","viewportOffset","getBoundingClientRect","width","offsetWidth","height","offsetHeight","x","offsetLeft","y","offsetTop","pageX","left","pageY","top","_animatedRef","console","warn","_WORKLET","viewTag","measured","_measure","isNaN","scrollTo","animated","_scrollTo","_x","_y","setGestureState","handlerTag","newState","_setGestureState"],"mappings":"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","sourcesContent":["import { findNodeHandle } from 'react-native';\nimport { isChromeDebugger, isWeb, shouldBeUseWeb } from './PlatformChecker';\nexport function getTag(view) {\n    return findNodeHandle(view);\n}\nconst isNative = !shouldBeUseWeb();\nexport let measure;\nif (isWeb()) {\n    measure = (animatedRef) => {\n        const element = animatedRef(); // TODO: fix typing of animated refs on web\n        const viewportOffset = element.getBoundingClientRect();\n        return {\n            width: element.offsetWidth,\n            height: element.offsetHeight,\n            x: element.offsetLeft,\n            y: element.offsetTop,\n            pageX: viewportOffset.left,\n            pageY: viewportOffset.top,\n        };\n    };\n}\nelse if (isChromeDebugger()) {\n    measure = (_animatedRef) => {\n        console.warn('[Reanimated] measure() cannot be used with Chrome Debugger.');\n        return null;\n    };\n}\nelse {\n    measure = (animatedRef) => {\n        'worklet';\n        if (!_WORKLET) {\n            console.warn('[Reanimated] measure() was called from the main JS context. Measure is ' +\n                'only available in the UI runtime. This may also happen if measure() ' +\n                'was called by a worklet in the useAnimatedStyle hook, because useAnimatedStyle ' +\n                'calls the given worklet on the JS runtime during render. If you want to ' +\n                'prevent this warning then wrap the call with `if (_WORKLET)`. Then it will ' +\n                'only be called on the UI runtime after the render has been completed.');\n            return null;\n        }\n        const viewTag = animatedRef();\n        if (viewTag === -1) {\n            console.warn(`[Reanimated] The view with tag ${viewTag} is not a valid argument for measure(). This may be because the view is not currently rendered, which may not be a bug (e.g. an off-screen FlatList item).`);\n            return null;\n        }\n        const measured = _measure(viewTag);\n        if (measured === null) {\n            console.warn(`[Reanimated] The view with tag ${viewTag} has some undefined, not-yet-computed or meaningless value of \\`LayoutMetrics\\` type. This may be because the view is not currently rendered, which may not be a bug (e.g. an off-screen FlatList item).`);\n            return null;\n        }\n        else if (measured.x === -1234567) {\n            console.warn(`[Reanimated] The view with tag ${viewTag} returned an invalid measurement response.`);\n            return null;\n        }\n        else if (isNaN(measured.x)) {\n            console.warn(`[Reanimated] The view with tag ${viewTag} gets view-flattened on Android. To disable view-flattening, set \\`collapsable={false}\\` on this component.`);\n            return null;\n        }\n        else {\n            return measured;\n        }\n    };\n}\nexport let scrollTo;\nif (isWeb()) {\n    scrollTo = (animatedRef, x, y, animated) => {\n        'worklet';\n        const element = animatedRef();\n        // @ts-ignore same call as in react-native-web\n        element.scrollTo({ x, y, animated });\n    };\n}\nelse if (isNative) {\n    scrollTo = (animatedRef, x, y, animated) => {\n        'worklet';\n        if (!_WORKLET) {\n            return;\n        }\n        const viewTag = animatedRef();\n        _scrollTo(viewTag, x, y, animated);\n    };\n}\nelse {\n    scrollTo = (_animatedRef, _x, _y) => {\n        // no-op\n    };\n}\nexport function setGestureState(handlerTag, newState) {\n    'worklet';\n    if (!_WORKLET || !isNative) {\n        console.warn('[Reanimated] You can not use setGestureState in non-worklet function.');\n        return;\n    }\n    _setGestureState(handlerTag, newState);\n}\n"]},"metadata":{},"sourceType":"module"}