{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime/helpers/toConsumableArray\";\n\nvar checkSerializableWithoutCircularReference = function checkSerializableWithoutCircularReference(o, seen, location) {\n  if (o === undefined || o === null || typeof o === 'boolean' || typeof o === 'number' || typeof o === 'string') {\n    return {\n      serializable: true\n    };\n  }\n\n  if (Object.prototype.toString.call(o) !== '[object Object]' && !Array.isArray(o)) {\n    return {\n      serializable: false,\n      location: location,\n      reason: typeof o === 'function' ? 'Function' : String(o)\n    };\n  }\n\n  if (seen.has(o)) {\n    return {\n      serializable: false,\n      reason: 'Circular reference',\n      location: location\n    };\n  }\n\n  seen.add(o);\n\n  if (Array.isArray(o)) {\n    for (var i = 0; i < o.length; i++) {\n      var childResult = checkSerializableWithoutCircularReference(o[i], new Set(seen), [].concat(_toConsumableArray(location), [i]));\n\n      if (!childResult.serializable) {\n        return childResult;\n      }\n    }\n  } else {\n    for (var key in o) {\n      var _childResult = checkSerializableWithoutCircularReference(o[key], new Set(seen), [].concat(_toConsumableArray(location), [key]));\n\n      if (!_childResult.serializable) {\n        return _childResult;\n      }\n    }\n  }\n\n  return {\n    serializable: true\n  };\n};\n\nexport default function checkSerializable(o) {\n  return checkSerializableWithoutCircularReference(o, new Set(), []);\n}","map":{"version":3,"sources":["checkSerializable.tsx"],"names":["checkSerializableWithoutCircularReference","o","seen","location","undefined","serializable","Object","prototype","toString","call","Array","isArray","reason","String","has","add","i","length","childResult","Set","key","checkSerializable"],"mappings":";;AAAA,IAAMA,yCAAyC,GAAG,SAA5CA,yCAA4C,CAChDC,CADgD,EAEhDC,IAFgD,EAGhDC,QAHgD,EAUzC;AACP,MACEF,CAAC,KAAKG,SAANH,IACAA,CAAC,KAAK,IADNA,IAEA,OAAOA,CAAP,KAAa,SAFbA,IAGA,OAAOA,CAAP,KAAa,QAHbA,IAIA,OAAOA,CAAP,KAAa,QALf,EAME;AACA,WAAO;AAAEI,MAAAA,YAAY,EAAE;AAAhB,KAAP;AACF;;AAEA,MACEC,MAAM,CAACC,SAAPD,CAAiBE,QAAjBF,CAA0BG,IAA1BH,CAA+BL,CAA/BK,MAAsC,iBAAtCA,IACA,CAACI,KAAK,CAACC,OAAND,CAAcT,CAAdS,CAFH,EAGE;AACA,WAAO;AACLL,MAAAA,YAAY,EAAE,KADT;AAELF,MAAAA,QAAQ,EAARA,QAFK;AAGLS,MAAAA,MAAM,EAAE,OAAOX,CAAP,KAAa,UAAb,GAA0B,UAA1B,GAAuCY,MAAM,CAACZ,CAAD;AAHhD,KAAP;AAKF;;AAEA,MAAIC,IAAI,CAACY,GAALZ,CAASD,CAATC,CAAJ,EAAiB;AACf,WAAO;AACLG,MAAAA,YAAY,EAAE,KADT;AAELO,MAAAA,MAAM,EAAE,oBAFH;AAGLT,MAAAA,QAAAA,EAAAA;AAHK,KAAP;AAKF;;AAEAD,EAAAA,IAAI,CAACa,GAALb,CAASD,CAATC;;AAEA,MAAIQ,KAAK,CAACC,OAAND,CAAcT,CAAdS,CAAJ,EAAsB;AACpB,SAAK,IAAIM,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGf,CAAC,CAACgB,MAAtB,EAA8BD,CAAC,EAA/B,EAAmC;AACjC,UAAME,WAAW,GAAGlB,yCAAyC,CAC3DC,CAAC,CAACe,CAAD,CAD0D,EAE3D,IAAIG,GAAJ,CAAajB,IAAb,CAF2D,+BAGvDC,QAHuD,IAG7Ca,CAH6C,GAA7D;;AAMA,UAAI,CAACE,WAAW,CAACb,YAAjB,EAA+B;AAC7B,eAAOa,WAAP;AACF;AACF;AACD,GAZD,MAYO;AACL,SAAK,IAAME,GAAX,IAAkBnB,CAAlB,EAAqB;AACnB,UAAMiB,YAAW,GAAGlB,yCAAyC,CAC3DC,CAAC,CAACmB,GAAD,CAD0D,EAE3D,IAAID,GAAJ,CAAajB,IAAb,CAF2D,+BAGvDC,QAHuD,IAG7CiB,GAH6C,GAA7D;;AAMA,UAAI,CAACF,YAAW,CAACb,YAAjB,EAA+B;AAC7B,eAAOa,YAAP;AACF;AACF;AACF;;AAEA,SAAO;AAAEb,IAAAA,YAAY,EAAE;AAAhB,GAAP;AACD,CArED;;AAuEA,eAAe,SAASgB,iBAAT,CAA2BpB,CAA3B,EAAsD;AACnE,SAAOD,yCAAyC,CAACC,CAAD,EAAI,IAAIkB,GAAJ,EAAJ,EAAoB,EAApB,CAAhD;AACF","sourceRoot":"../../src","sourcesContent":["const checkSerializableWithoutCircularReference = (o, seen, location) => {\n  if (o === undefined || o === null || typeof o === 'boolean' || typeof o === 'number' || typeof o === 'string') {\n    return {\n      serializable: true\n    };\n  }\n  if (Object.prototype.toString.call(o) !== '[object Object]' && !Array.isArray(o)) {\n    return {\n      serializable: false,\n      location,\n      reason: typeof o === 'function' ? 'Function' : String(o)\n    };\n  }\n  if (seen.has(o)) {\n    return {\n      serializable: false,\n      reason: 'Circular reference',\n      location\n    };\n  }\n  seen.add(o);\n  if (Array.isArray(o)) {\n    for (let i = 0; i < o.length; i++) {\n      const childResult = checkSerializableWithoutCircularReference(o[i], new Set(seen), [...location, i]);\n      if (!childResult.serializable) {\n        return childResult;\n      }\n    }\n  } else {\n    for (const key in o) {\n      const childResult = checkSerializableWithoutCircularReference(o[key], new Set(seen), [...location, key]);\n      if (!childResult.serializable) {\n        return childResult;\n      }\n    }\n  }\n  return {\n    serializable: true\n  };\n};\nexport default function checkSerializable(o) {\n  return checkSerializableWithoutCircularReference(o, new Set(), []);\n}\n//# sourceMappingURL=checkSerializable.js.map"]},"metadata":{},"sourceType":"module"}