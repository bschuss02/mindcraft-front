{"ast":null,"code":"import * as React from 'react';\nimport NavigationBuilderContext from \"./NavigationBuilderContext\";\nexport default function useFocusedListenersChildrenAdapter(_ref) {\n  var navigation = _ref.navigation,\n      focusedListeners = _ref.focusedListeners;\n\n  var _React$useContext = React.useContext(NavigationBuilderContext),\n      addListener = _React$useContext.addListener;\n\n  var listener = React.useCallback(function (callback) {\n    if (navigation.isFocused()) {\n      for (var _listener2 of focusedListeners) {\n        var _listener3 = _listener2(callback),\n            handled = _listener3.handled,\n            result = _listener3.result;\n\n        if (handled) {\n          return {\n            handled: handled,\n            result: result\n          };\n        }\n      }\n\n      return {\n        handled: true,\n        result: callback(navigation)\n      };\n    } else {\n      return {\n        handled: false,\n        result: null\n      };\n    }\n  }, [focusedListeners, navigation]);\n  React.useEffect(function () {\n    return addListener === null || addListener === void 0 ? void 0 : addListener('focus', listener);\n  }, [addListener, listener]);\n}","map":{"version":3,"sources":["useFocusedListenersChildrenAdapter.tsx"],"names":["React","NavigationBuilderContext","useFocusedListenersChildrenAdapter","navigation","focusedListeners","addListener","useContext","listener","useCallback","callback","isFocused","handled","result","useEffect"],"mappings":"AACA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AAEA,OAAOC,wBAAP;AAcA,eAAe,SAASC,kCAAT,CAA2C,IAA3C,EAGH;AAH+C,MACzDC,UADyD,GAGjD,IAHiD,CACzDA,UADyD;AAAA,MAEzDC,gBAFyD,GAGjD,IAHiD,CAEzDA,gBAFyD;;AAIzD,0BAAwBJ,KAAK,CAACM,UAANN,CAAiBC,wBAAjBD,CAAxB;AAAA,MAAQK,WAAR,qBAAQA,WAAR;;AAEA,MAAME,QAAQ,GAAGP,KAAK,CAACQ,WAANR,CACdS,UAAAA,QAAwC,EAAK;AAC5C,QAAIN,UAAU,CAACO,SAAXP,EAAJ,EAA4B;AAC1B,WAAK,IAAMI,UAAX,IAAuBH,gBAAvB,EAAyC;AACvC,yBAA4BG,UAAQ,CAACE,QAAD,CAApC;AAAA,YAAQE,OAAR,cAAQA,OAAR;AAAA,YAAiBC,MAAjB,cAAiBA,MAAjB;;AAEA,YAAID,OAAJ,EAAa;AACX,iBAAO;AAAEA,YAAAA,OAAO,EAAPA,OAAF;AAAWC,YAAAA,MAAAA,EAAAA;AAAX,WAAP;AACF;AACF;;AAEA,aAAO;AAAED,QAAAA,OAAO,EAAE,IAAX;AAAiBC,QAAAA,MAAM,EAAEH,QAAQ,CAACN,UAAD;AAAjC,OAAP;AACD,KAVD,MAUO;AACL,aAAO;AAAEQ,QAAAA,OAAO,EAAE,KAAX;AAAkBC,QAAAA,MAAM,EAAE;AAA1B,OAAP;AACF;AACD,GAfcZ,EAgBf,CAACI,gBAAD,EAAmBD,UAAnB,CAhBeH,CAAjB;AAmBAA,EAAAA,KAAK,CAACa,SAANb,CACE;AAAA,WAAMK,WAAW,KAAA,IAAXA,IAAAA,WAAW,KAAA,KAAA,CAAXA,GAAW,KAAA,CAAXA,GAAAA,WAAW,CAAG,OAAH,EAAYE,QAAZ,CAAjB;AAAA,GADFP,EAEE,CAACK,WAAD,EAAcE,QAAd,CAFFP;AAIF","sourceRoot":"../../src","sourcesContent":["import * as React from 'react';\nimport NavigationBuilderContext from './NavigationBuilderContext';\n/**\n * Hook for passing focus callback to children\n */\nexport default function useFocusedListenersChildrenAdapter(_ref) {\n  let {\n    navigation,\n    focusedListeners\n  } = _ref;\n  const {\n    addListener\n  } = React.useContext(NavigationBuilderContext);\n  const listener = React.useCallback(callback => {\n    if (navigation.isFocused()) {\n      for (const listener of focusedListeners) {\n        const {\n          handled,\n          result\n        } = listener(callback);\n        if (handled) {\n          return {\n            handled,\n            result\n          };\n        }\n      }\n      return {\n        handled: true,\n        result: callback(navigation)\n      };\n    } else {\n      return {\n        handled: false,\n        result: null\n      };\n    }\n  }, [focusedListeners, navigation]);\n  React.useEffect(() => addListener === null || addListener === void 0 ? void 0 : addListener('focus', listener), [addListener, listener]);\n}\n//# sourceMappingURL=useFocusedListenersChildrenAdapter.js.map"]},"metadata":{},"sourceType":"module"}