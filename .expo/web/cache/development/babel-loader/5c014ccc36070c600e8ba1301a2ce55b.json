{"ast":null,"code":"import _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nimport { useContext } from \"react\";\nimport { useNavigation } from \"@react-navigation/native\";\nimport AsyncStorage from \"@react-native-async-storage/async-storage\";\nimport apiCall from \"../apiCall\";\nimport showMyToast from \"../showMyToast\";\nimport { UserContext } from \"../../../context/UserContext\";\nimport { DisplayContext } from \"../../../context/DisplayContext\";\n\nfunction useStartup() {\n  var navigation = useNavigation();\n\n  var _useContext = useContext(UserContext),\n      currentUser = _useContext.currentUser,\n      setCurrentUser = _useContext.setCurrentUser;\n\n  var _useContext2 = useContext(DisplayContext),\n      message = _useContext2.message,\n      setMessage = _useContext2.setMessage,\n      setIsStartupLoading = _useContext2.setIsStartupLoading;\n\n  function callStartup() {\n    return _callStartup.apply(this, arguments);\n  }\n\n  function _callStartup() {\n    _callStartup = _asyncToGenerator(function* () {\n      setIsStartupLoading(true);\n      var authToken = yield AsyncStorage.getItem(\"authToken\");\n\n      if (!authToken) {\n        var _yield$apiCall = yield apiCall(\"GET\", \"startup/\", {}),\n            data = _yield$apiCall.data,\n            error = _yield$apiCall.error;\n\n        if (error) {\n          showMyToast(error);\n        }\n      } else {\n        var _yield$apiCall2 = yield apiCall(\"GET\", \"startup/withuser\", {}),\n            _data = _yield$apiCall2.data,\n            _error = _yield$apiCall2.error;\n\n        var user = _data.user,\n            _message = _data.message;\n        setCurrentUser(user);\n        setMessage(_message);\n\n        if (_error) {\n          showMyToast(_error);\n        }\n      }\n\n      setIsStartupLoading(false);\n    });\n    return _callStartup.apply(this, arguments);\n  }\n\n  return callStartup;\n}\n\nexport { useStartup };","map":{"version":3,"sources":["/Users/Benjamin/Dev/hoohacks/mindcraft-front/src/util/api/startup/useStartup.js"],"names":["useContext","useNavigation","AsyncStorage","apiCall","showMyToast","UserContext","DisplayContext","useStartup","navigation","currentUser","setCurrentUser","message","setMessage","setIsStartupLoading","callStartup","authToken","getItem","data","error","user"],"mappings":";AAAA,SAASA,UAAT,QAA2B,OAA3B;AACA,SAASC,aAAT,QAA8B,0BAA9B;AACA,OAAOC,YAAP,MAAyB,2CAAzB;AACA,OAAOC,OAAP;AACA,OAAOC,WAAP;AACA,SAASC,WAAT;AACA,SAASC,cAAT;;AAEA,SAASC,UAAT,GAAsB;AACrB,MAAMC,UAAU,GAAGP,aAAa,EAAhC;;AACA,oBAAwCD,UAAU,CAACK,WAAD,CAAlD;AAAA,MAAQI,WAAR,eAAQA,WAAR;AAAA,MAAqBC,cAArB,eAAqBA,cAArB;;AACA,qBAAqDV,UAAU,CAC9DM,cAD8D,CAA/D;AAAA,MAAQK,OAAR,gBAAQA,OAAR;AAAA,MAAiBC,UAAjB,gBAAiBA,UAAjB;AAAA,MAA6BC,mBAA7B,gBAA6BA,mBAA7B;;AAHqB,WAONC,WAPM;AAAA;AAAA;;AAAA;AAAA,qCAOrB,aAA6B;AAC5BD,MAAAA,mBAAmB,CAAC,IAAD,CAAnB;AACA,UAAME,SAAS,SAASb,YAAY,CAACc,OAAb,CAAqB,WAArB,CAAxB;;AAEA,UAAI,CAACD,SAAL,EAAgB;AACf,mCAA8BZ,OAAO,CAAC,KAAD,EAAQ,UAAR,EAAoB,EAApB,CAArC;AAAA,YAAQc,IAAR,kBAAQA,IAAR;AAAA,YAAcC,KAAd,kBAAcA,KAAd;;AACA,YAAIA,KAAJ,EAAW;AACVd,UAAAA,WAAW,CAACc,KAAD,CAAX;AACA;AACD,OALD,MAKO;AACN,oCAA8Bf,OAAO,CAAC,KAAD,EAAQ,kBAAR,EAA4B,EAA5B,CAArC;AAAA,YAAQc,KAAR,mBAAQA,IAAR;AAAA,YAAcC,MAAd,mBAAcA,KAAd;;AACA,YAAQC,IAAR,GAA0BF,KAA1B,CAAQE,IAAR;AAAA,YAAcR,QAAd,GAA0BM,KAA1B,CAAcN,OAAd;AACAD,QAAAA,cAAc,CAACS,IAAD,CAAd;AACAP,QAAAA,UAAU,CAACD,QAAD,CAAV;;AACA,YAAIO,MAAJ,EAAW;AACVd,UAAAA,WAAW,CAACc,MAAD,CAAX;AACA;AACD;;AACDL,MAAAA,mBAAmB,CAAC,KAAD,CAAnB;AACA,KA1BoB;AAAA;AAAA;;AA4BrB,SAAOC,WAAP;AACA;;AAED,SAASP,UAAT","sourcesContent":["import { useContext } from \"react\"\nimport { useNavigation } from \"@react-navigation/native\"\nimport AsyncStorage from \"@react-native-async-storage/async-storage\"\nimport apiCall from \"../apiCall\"\nimport showMyToast from \"../showMyToast\"\nimport { UserContext } from \"../../../context/UserContext\"\nimport { DisplayContext } from \"../../../context/DisplayContext\"\n\nfunction useStartup() {\n\tconst navigation = useNavigation()\n\tconst { currentUser, setCurrentUser } = useContext(UserContext)\n\tconst { message, setMessage, setIsStartupLoading } = useContext(\n\t\tDisplayContext,\n\t)\n\n\tasync function callStartup() {\n\t\tsetIsStartupLoading(true)\n\t\tconst authToken = await AsyncStorage.getItem(\"authToken\")\n\n\t\tif (!authToken) {\n\t\t\tconst { data, error } = await apiCall(\"GET\", \"startup/\", {})\n\t\t\tif (error) {\n\t\t\t\tshowMyToast(error)\n\t\t\t}\n\t\t} else {\n\t\t\tconst { data, error } = await apiCall(\"GET\", \"startup/withuser\", {})\n\t\t\tconst { user, message } = data\n\t\t\tsetCurrentUser(user)\n\t\t\tsetMessage(message)\n\t\t\tif (error) {\n\t\t\t\tshowMyToast(error)\n\t\t\t}\n\t\t}\n\t\tsetIsStartupLoading(false)\n\t}\n\n\treturn callStartup\n}\n\nexport { useStartup }\n"]},"metadata":{},"sourceType":"module"}