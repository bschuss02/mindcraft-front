{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport { nanoid } from 'nanoid/non-secure';\nimport BaseRouter from \"./BaseRouter\";\nvar TYPE_ROUTE = 'route';\nexport var TabActions = {\n  jumpTo: function jumpTo(name, params) {\n    return {\n      type: 'JUMP_TO',\n      payload: {\n        name: name,\n        params: params\n      }\n    };\n  }\n};\n\nvar getRouteHistory = function getRouteHistory(routes, index, backBehavior, initialRouteName) {\n  var history = [{\n    type: TYPE_ROUTE,\n    key: routes[index].key\n  }];\n  var initialRouteIndex;\n\n  switch (backBehavior) {\n    case 'order':\n      for (var i = index; i > 0; i--) {\n        history.unshift({\n          type: TYPE_ROUTE,\n          key: routes[i - 1].key\n        });\n      }\n\n      break;\n\n    case 'firstRoute':\n      if (index !== 0) {\n        history.unshift({\n          type: TYPE_ROUTE,\n          key: routes[0].key\n        });\n      }\n\n      break;\n\n    case 'initialRoute':\n      initialRouteIndex = routes.findIndex(function (route) {\n        return route.name === initialRouteName;\n      });\n      initialRouteIndex = initialRouteIndex === -1 ? 0 : initialRouteIndex;\n\n      if (index !== initialRouteIndex) {\n        history.unshift({\n          type: TYPE_ROUTE,\n          key: routes[initialRouteIndex].key\n        });\n      }\n\n      break;\n\n    case 'history':\n      break;\n  }\n\n  return history;\n};\n\nvar changeIndex = function changeIndex(state, index, backBehavior, initialRouteName) {\n  var history;\n\n  if (backBehavior === 'history') {\n    var currentKey = state.routes[index].key;\n    history = state.history.filter(function (it) {\n      return it.type === 'route' ? it.key !== currentKey : false;\n    }).concat({\n      type: TYPE_ROUTE,\n      key: currentKey\n    });\n  } else {\n    history = getRouteHistory(state.routes, index, backBehavior, initialRouteName);\n  }\n\n  return _objectSpread(_objectSpread({}, state), {}, {\n    index: index,\n    history: history\n  });\n};\n\nexport default function TabRouter(_ref) {\n  var initialRouteName = _ref.initialRouteName,\n      _ref$backBehavior = _ref.backBehavior,\n      backBehavior = _ref$backBehavior === void 0 ? 'firstRoute' : _ref$backBehavior;\n\n  var router = _objectSpread(_objectSpread({}, BaseRouter), {}, {\n    type: 'tab',\n    getInitialState: function getInitialState(_ref2) {\n      var routeNames = _ref2.routeNames,\n          routeParamList = _ref2.routeParamList;\n      var index = initialRouteName !== undefined && routeNames.includes(initialRouteName) ? routeNames.indexOf(initialRouteName) : 0;\n      var routes = routeNames.map(function (name) {\n        return {\n          name: name,\n          key: name + \"-\" + nanoid(),\n          params: routeParamList[name]\n        };\n      });\n      var history = getRouteHistory(routes, index, backBehavior, initialRouteName);\n      return {\n        stale: false,\n        type: 'tab',\n        key: \"tab-\" + nanoid(),\n        index: index,\n        routeNames: routeNames,\n        history: history,\n        routes: routes\n      };\n    },\n    getRehydratedState: function getRehydratedState(partialState, _ref3) {\n      var _ref6, _ref7;\n\n      var _state$routes, _state$history;\n\n      var routeNames = _ref3.routeNames,\n          routeParamList = _ref3.routeParamList;\n      var state = partialState;\n\n      if (state.stale === false) {\n        return state;\n      }\n\n      var routes = routeNames.map(function (name) {\n        var route = state.routes.find(function (r) {\n          return r.name === name;\n        });\n        return _objectSpread(_objectSpread({}, route), {}, {\n          name: name,\n          key: route && route.name === name && route.key ? route.key : name + \"-\" + nanoid(),\n          params: routeParamList[name] !== undefined ? _objectSpread(_objectSpread({}, routeParamList[name]), route ? route.params : undefined) : route ? route.params : undefined\n        });\n      });\n      var index = Math.min(Math.max(routeNames.indexOf((_state$routes = state.routes[(_ref6 = state === null || state === void 0 ? void 0 : state.index) != null ? _ref6 : 0]) === null || _state$routes === void 0 ? void 0 : _state$routes.name), 0), routes.length - 1);\n      var history = (_ref7 = (_state$history = state.history) === null || _state$history === void 0 ? void 0 : _state$history.filter(function (it) {\n        return routes.find(function (r) {\n          return r.key === it.key;\n        });\n      })) != null ? _ref7 : [];\n      return changeIndex({\n        stale: false,\n        type: 'tab',\n        key: \"tab-\" + nanoid(),\n        index: index,\n        routeNames: routeNames,\n        history: history,\n        routes: routes\n      }, index, backBehavior, initialRouteName);\n    },\n    getStateForRouteNamesChange: function getStateForRouteNamesChange(state, _ref4) {\n      var routeNames = _ref4.routeNames,\n          routeParamList = _ref4.routeParamList,\n          routeKeyChanges = _ref4.routeKeyChanges;\n      var routes = routeNames.map(function (name) {\n        return state.routes.find(function (r) {\n          return r.name === name && !routeKeyChanges.includes(r.name);\n        }) || {\n          name: name,\n          key: name + \"-\" + nanoid(),\n          params: routeParamList[name]\n        };\n      });\n      var index = Math.max(0, routeNames.indexOf(state.routes[state.index].name));\n      var history = state.history.filter(function (it) {\n        return it.type !== 'route' || routes.find(function (r) {\n          return r.key === it.key;\n        });\n      });\n\n      if (!history.length) {\n        history = getRouteHistory(routes, index, backBehavior, initialRouteName);\n      }\n\n      return _objectSpread(_objectSpread({}, state), {}, {\n        history: history,\n        routeNames: routeNames,\n        routes: routes,\n        index: index\n      });\n    },\n    getStateForRouteFocus: function getStateForRouteFocus(state, key) {\n      var index = state.routes.findIndex(function (r) {\n        return r.key === key;\n      });\n\n      if (index === -1 || index === state.index) {\n        return state;\n      }\n\n      return changeIndex(state, index, backBehavior, initialRouteName);\n    },\n    getStateForAction: function getStateForAction(state, action, _ref5) {\n      var routeParamList = _ref5.routeParamList,\n          routeGetIdList = _ref5.routeGetIdList;\n\n      switch (action.type) {\n        case 'JUMP_TO':\n        case 'NAVIGATE':\n          {\n            var index = -1;\n\n            if (action.type === 'NAVIGATE' && action.payload.key) {\n              index = state.routes.findIndex(function (route) {\n                return route.key === action.payload.key;\n              });\n            } else {\n              index = state.routes.findIndex(function (route) {\n                return route.name === action.payload.name;\n              });\n            }\n\n            if (index === -1) {\n              return null;\n            }\n\n            return changeIndex(_objectSpread(_objectSpread({}, state), {}, {\n              routes: state.routes.map(function (route, i) {\n                if (i !== index) {\n                  return route;\n                }\n\n                var getId = routeGetIdList[route.name];\n                var currentId = getId === null || getId === void 0 ? void 0 : getId({\n                  params: route.params\n                });\n                var nextId = getId === null || getId === void 0 ? void 0 : getId({\n                  params: action.payload.params\n                });\n                var key = currentId === nextId ? route.key : route.name + \"-\" + nanoid();\n                var params;\n\n                if (action.type === 'NAVIGATE' && action.payload.merge && currentId === nextId) {\n                  params = action.payload.params !== undefined || routeParamList[route.name] !== undefined ? _objectSpread(_objectSpread(_objectSpread({}, routeParamList[route.name]), route.params), action.payload.params) : route.params;\n                } else {\n                  params = routeParamList[route.name] !== undefined ? _objectSpread(_objectSpread({}, routeParamList[route.name]), action.payload.params) : action.payload.params;\n                }\n\n                var path = action.type === 'NAVIGATE' && action.payload.path != null ? action.payload.path : route.path;\n                return params !== route.params || path !== route.path ? _objectSpread(_objectSpread({}, route), {}, {\n                  key: key,\n                  path: path,\n                  params: params\n                }) : route;\n              })\n            }), index, backBehavior, initialRouteName);\n          }\n\n        case 'GO_BACK':\n          {\n            if (state.history.length === 1) {\n              return null;\n            }\n\n            var previousKey = state.history[state.history.length - 2].key;\n\n            var _index = state.routes.findIndex(function (route) {\n              return route.key === previousKey;\n            });\n\n            if (_index === -1) {\n              return null;\n            }\n\n            return _objectSpread(_objectSpread({}, state), {}, {\n              history: state.history.slice(0, -1),\n              index: _index\n            });\n          }\n\n        default:\n          return BaseRouter.getStateForAction(state, action);\n      }\n    },\n    shouldActionChangeFocus: function shouldActionChangeFocus(action) {\n      return action.type === 'NAVIGATE';\n    },\n    actionCreators: TabActions\n  });\n\n  return router;\n}","map":{"version":3,"sources":["TabRouter.tsx"],"names":["nanoid","BaseRouter","TYPE_ROUTE","TabActions","jumpTo","name","params","type","payload","getRouteHistory","routes","index","backBehavior","initialRouteName","history","key","initialRouteIndex","i","unshift","findIndex","route","changeIndex","state","currentKey","filter","it","concat","TabRouter","router","getInitialState","routeNames","routeParamList","undefined","includes","indexOf","map","stale","getRehydratedState","partialState","find","r","Math","min","max","length","getStateForRouteNamesChange","routeKeyChanges","getStateForRouteFocus","getStateForAction","action","routeGetIdList","getId","currentId","nextId","merge","path","previousKey","slice","shouldActionChangeFocus","actionCreators"],"mappings":";;;;;;AAAA,SAASA,MAAT,QAAuB,mBAAvB;AAEA,OAAOC,UAAP;AAyDA,IAAMC,UAAU,GAAG,OAAnB;AAEA,OAAO,IAAMC,UAAU,GAAG;AACxBC,EAAAA,MADwB,kBACjBC,IADiB,EACHC,MADG,EAC6B;AACnD,WAAO;AAAEC,MAAAA,IAAI,EAAE,SAAR;AAAmBC,MAAAA,OAAO,EAAE;AAAEH,QAAAA,IAAI,EAAJA,IAAF;AAAQC,QAAAA,MAAAA,EAAAA;AAAR;AAA5B,KAAP;AACF;AAHwB,CAAnB;;AAMP,IAAMG,eAAe,GAAG,SAAlBA,eAAkB,CACtBC,MADsB,EAEtBC,KAFsB,EAGtBC,YAHsB,EAItBC,gBAJsB,EAKnB;AACH,MAAMC,OAAO,GAAG,CAAC;AAAEP,IAAAA,IAAI,EAAEL,UAAR;AAAoBa,IAAAA,GAAG,EAAEL,MAAM,CAACC,KAAD,CAAND,CAAcK;AAAvC,GAAD,CAAhB;AACA,MAAIC,iBAAJ;;AAEA,UAAQJ,YAAR;AACE,SAAK,OAAL;AACE,WAAK,IAAIK,CAAC,GAAGN,KAAb,EAAoBM,CAAC,GAAG,CAAxB,EAA2BA,CAAC,EAA5B,EAAgC;AAC9BH,QAAAA,OAAO,CAACI,OAARJ,CAAgB;AAAEP,UAAAA,IAAI,EAAEL,UAAR;AAAoBa,UAAAA,GAAG,EAAEL,MAAM,CAACO,CAAC,GAAG,CAAL,CAANP,CAAcK;AAAvC,SAAhBD;AACF;;AACA;;AACF,SAAK,YAAL;AACE,UAAIH,KAAK,KAAK,CAAd,EAAiB;AACfG,QAAAA,OAAO,CAACI,OAARJ,CAAgB;AACdP,UAAAA,IAAI,EAAEL,UADQ;AAEda,UAAAA,GAAG,EAAEL,MAAM,CAAC,CAAD,CAANA,CAAUK;AAFD,SAAhBD;AAIF;;AACA;;AACF,SAAK,cAAL;AACEE,MAAAA,iBAAiB,GAAGN,MAAM,CAACS,SAAPT,CACjBU,UAAAA,KAAK;AAAA,eAAKA,KAAK,CAACf,IAANe,KAAeP,gBAApB;AAAA,OADYH,CAApBM;AAGAA,MAAAA,iBAAiB,GAAGA,iBAAiB,KAAK,CAAC,CAAvBA,GAA2B,CAA3BA,GAA+BA,iBAAnDA;;AAEA,UAAIL,KAAK,KAAKK,iBAAd,EAAiC;AAC/BF,QAAAA,OAAO,CAACI,OAARJ,CAAgB;AACdP,UAAAA,IAAI,EAAEL,UADQ;AAEda,UAAAA,GAAG,EAAEL,MAAM,CAACM,iBAAD,CAANN,CAA0BK;AAFjB,SAAhBD;AAIF;;AACA;;AACF,SAAK,SAAL;AAEE;AA7BJ;;AAgCA,SAAOA,OAAP;AACD,CA1CD;;AA4CA,IAAMO,WAAW,GAAG,SAAdA,WAAc,CAClBC,KADkB,EAElBX,KAFkB,EAGlBC,YAHkB,EAIlBC,gBAJkB,EAKf;AACH,MAAIC,OAAJ;;AAEA,MAAIF,YAAY,KAAK,SAArB,EAAgC;AAC9B,QAAMW,UAAU,GAAGD,KAAK,CAACZ,MAANY,CAAaX,KAAbW,EAAoBP,GAAvC;AAEAD,IAAAA,OAAO,GAAGQ,KAAK,CAACR,OAANQ,CACPE,MADOF,CACCG,UAAAA,EAAE;AAAA,aAAMA,EAAE,CAAClB,IAAHkB,KAAY,OAAZA,GAAsBA,EAAE,CAACV,GAAHU,KAAWF,UAAjCE,GAA8C,KAApD;AAAA,KADHH,EAEPI,MAFOJ,CAEA;AAAEf,MAAAA,IAAI,EAAEL,UAAR;AAAoBa,MAAAA,GAAG,EAAEQ;AAAzB,KAFAD,CAAVR;AAGD,GAND,MAMO;AACLA,IAAAA,OAAO,GAAGL,eAAe,CACvBa,KAAK,CAACZ,MADiB,EAEvBC,KAFuB,EAGvBC,YAHuB,EAIvBC,gBAJuB,CAAzBC;AAMF;;AAEA,yCACKQ,KADL;AAEEX,IAAAA,KAAK,EAALA,KAFF;AAGEG,IAAAA,OAAAA,EAAAA;AAHF;AAKD,CA5BD;;AA8BA,eAAe,SAASa,SAAT,CAAkB,IAAlB,EAGM;AAHa,MAChCd,gBADgC,GAGf,IAHe,CAChCA,gBADgC;AAAA,0BAGf,IAHe,CAEhCD,YAFgC;AAAA,MAEhCA,YAFgC,kCAEjB,YAFiB;;AAIhC,MAAMgB,MAGL,mCACI3B,UADJ;AAGCM,IAAAA,IAAI,EAAE,KAHP;AAKCsB,IAAAA,eALD,2BAKgB,KALhB,EAKiD;AAAhC,UAAEC,UAAF,GAA8B,KAA9B,CAAEA,UAAF;AAAA,UAAcC,cAAd,GAA8B,KAA9B,CAAcA,cAAd;AACd,UAAMpB,KAAK,GACTE,gBAAgB,KAAKmB,SAArBnB,IAAkCiB,UAAU,CAACG,QAAXH,CAAoBjB,gBAApBiB,CAAlCjB,GACIiB,UAAU,CAACI,OAAXJ,CAAmBjB,gBAAnBiB,CADJjB,GAEI,CAHN;AAKA,UAAMH,MAAM,GAAGoB,UAAU,CAACK,GAAXL,CAAgBzB,UAAAA,IAAI;AAAA,eAAM;AACvCA,UAAAA,IAAI,EAAJA,IADuC;AAEvCU,UAAAA,GAAG,EAAKV,IAAL,SAAaL,MAAM,EAFiB;AAGvCM,UAAAA,MAAM,EAAEyB,cAAc,CAAC1B,IAAD;AAHiB,SAAN;AAAA,OAApByB,CAAf;AAMA,UAAMhB,OAAO,GAAGL,eAAe,CAC7BC,MAD6B,EAE7BC,KAF6B,EAG7BC,YAH6B,EAI7BC,gBAJ6B,CAA/B;AAOA,aAAO;AACLuB,QAAAA,KAAK,EAAE,KADF;AAEL7B,QAAAA,IAAI,EAAE,KAFD;AAGLQ,QAAAA,GAAG,WAASf,MAAM,EAHb;AAILW,QAAAA,KAAK,EAALA,KAJK;AAKLmB,QAAAA,UAAU,EAAVA,UALK;AAMLhB,QAAAA,OAAO,EAAPA,OANK;AAOLJ,QAAAA,MAAAA,EAAAA;AAPK,OAAP;AASD,KAjCF;AAmCC2B,IAAAA,kBAnCD,8BAmCoBC,YAnCpB,EAmCgC,KAnChC,EAmCkE;AAAA;;AAAA,UAAA,aAAA,EAAA,cAAA;;AAAhC,UAAER,UAAF,GAA8B,KAA9B,CAAEA,UAAF;AAAA,UAAcC,cAAd,GAA8B,KAA9B,CAAcA,cAAd;AAC/B,UAAIT,KAAK,GAAGgB,YAAZ;;AAEA,UAAIhB,KAAK,CAACc,KAANd,KAAgB,KAApB,EAA2B;AACzB,eAAOA,KAAP;AACF;;AAEA,UAAMZ,MAAM,GAAGoB,UAAU,CAACK,GAAXL,CAAgBzB,UAAAA,IAAI,EAAK;AACtC,YAAMe,KAAK,GACTE,KAAK,CACLZ,MADAY,CACOiB,IADPjB,CACakB,UAAAA,CAAC;AAAA,iBAAKA,CAAC,CAACnC,IAAFmC,KAAWnC,IAAhB;AAAA,SADdiB,CADF;AAIA,+CACKF,KADL;AAEEf,UAAAA,IAAI,EAAJA,IAFF;AAGEU,UAAAA,GAAG,EACDK,KAAK,IAAIA,KAAK,CAACf,IAANe,KAAef,IAAxBe,IAAgCA,KAAK,CAACL,GAAtCK,GACIA,KAAK,CAACL,GADVK,GAEOf,IAFPe,SAEepB,MAAM,EANzB;AAOEM,UAAAA,MAAM,EACJyB,cAAc,CAAC1B,IAAD,CAAd0B,KAAyBC,SAAzBD,mCAESA,cAAc,CAAC1B,IAAD,CAFvB0B,GAGUX,KAAK,GAAGA,KAAK,CAACd,MAAT,GAAkB0B,SAHjCD,IAKIX,KAAK,GACLA,KAAK,CAACd,MADD,GAEL0B;AAfR;AAiBD,OAtBcF,CAAf;AAwBA,UAAMnB,KAAK,GAAG8B,IAAI,CAACC,GAALD,CACZA,IAAI,CAACE,GAALF,CAASX,UAAU,CAACI,OAAXJ,CAAkB,CAAA,aAAA,GAACR,KAAK,CAACZ,MAANY,UAAa,KAAK,KAAA,IAAL,IAAA,KAAK,KAAA,KAAA,CAAL,GAAK,KAAA,CAAL,GAAA,KAAK,CAAEX,KAApBW,oBAA6B,CAA7BA,CAAD,MAAgC,IAAhC,IAAgC,aAAA,KAAA,KAAA,CAAhC,GAAgC,KAAA,CAAhC,GAACA,aAAAA,CAAiCjB,IAApDyB,CAATW,EAAoE,CAApEA,CADYA,EAEZ/B,MAAM,CAACkC,MAAPlC,GAAgB,CAFJ+B,CAAd;AAKA,UAAM3B,OAAO,YACX,CAAA,cAAA,GAAA,KAAK,CAACA,OAAN,MAAa,IAAb,IAAa,cAAA,KAAA,KAAA,CAAb,GAAa,KAAA,CAAb,GAAA,cAAA,CAAeU,MAAf,CAAuBC,UAAAA,EAAE;AAAA,eAAKf,MAAM,CAAC6B,IAAP7B,CAAa8B,UAAAA,CAAC;AAAA,iBAAKA,CAAC,CAACzB,GAAFyB,KAAUf,EAAE,CAACV,GAAlB;AAAA,SAAdL,CAAL;AAAA,OAAzB,CADW,oBAEX,EAFF;AAIA,aAAOW,WAAW,CAChB;AACEe,QAAAA,KAAK,EAAE,KADT;AAEE7B,QAAAA,IAAI,EAAE,KAFR;AAGEQ,QAAAA,GAAG,WAASf,MAAM,EAHpB;AAIEW,QAAAA,KAAK,EAALA,KAJF;AAKEmB,QAAAA,UAAU,EAAVA,UALF;AAMEhB,QAAAA,OAAO,EAAPA,OANF;AAOEJ,QAAAA,MAAAA,EAAAA;AAPF,OADgB,EAUhBC,KAVgB,EAWhBC,YAXgB,EAYhBC,gBAZgB,CAAlB;AAcD,KAzFF;AA2FCgC,IAAAA,2BA3FD,uCA4FGvB,KA5FH,EA4FQ,KA5FR,EA8FG;AADA,UAAEQ,UAAF,GAA+C,KAA/C,CAAEA,UAAF;AAAA,UAAcC,cAAd,GAA+C,KAA/C,CAAcA,cAAd;AAAA,UAA8Be,eAA9B,GAA+C,KAA/C,CAA8BA,eAA9B;AAEA,UAAMpC,MAAM,GAAGoB,UAAU,CAACK,GAAXL,CACZzB,UAAAA,IAAI;AAAA,eACHiB,KAAK,CAACZ,MAANY,CAAaiB,IAAbjB,CACGkB,UAAAA,CAAC;AAAA,iBAAKA,CAAC,CAACnC,IAAFmC,KAAWnC,IAAXmC,IAAmB,CAACM,eAAe,CAACb,QAAhBa,CAAyBN,CAAC,CAACnC,IAA3ByC,CAAzB;AAAA,SADJxB,KAEK;AACHjB,UAAAA,IAAI,EAAJA,IADG;AAEHU,UAAAA,GAAG,EAAKV,IAAL,SAAaL,MAAM,EAFnB;AAGHM,UAAAA,MAAM,EAAEyB,cAAc,CAAC1B,IAAD;AAHnB,SAHF;AAAA,OADQyB,CAAf;AAWA,UAAMnB,KAAK,GAAG8B,IAAI,CAACE,GAALF,CACZ,CADYA,EAEZX,UAAU,CAACI,OAAXJ,CAAmBR,KAAK,CAACZ,MAANY,CAAaA,KAAK,CAACX,KAAnBW,EAA0BjB,IAA7CyB,CAFYW,CAAd;AAKA,UAAI3B,OAAO,GAAGQ,KAAK,CAACR,OAANQ,CAAcE,MAAdF,CAEXG,UAAAA,EAAE;AAAA,eAAKA,EAAE,CAAClB,IAAHkB,KAAY,OAAZA,IAAuBf,MAAM,CAAC6B,IAAP7B,CAAa8B,UAAAA,CAAC;AAAA,iBAAKA,CAAC,CAACzB,GAAFyB,KAAUf,EAAE,CAACV,GAAlB;AAAA,SAAdL,CAA5B;AAAA,OAFSY,CAAd;;AAKA,UAAI,CAACR,OAAO,CAAC8B,MAAb,EAAqB;AACnB9B,QAAAA,OAAO,GAAGL,eAAe,CACvBC,MADuB,EAEvBC,KAFuB,EAGvBC,YAHuB,EAIvBC,gBAJuB,CAAzBC;AAMF;;AAEA,6CACKQ,KADL;AAEER,QAAAA,OAAO,EAAPA,OAFF;AAGEgB,QAAAA,UAAU,EAAVA,UAHF;AAIEpB,QAAAA,MAAM,EAANA,MAJF;AAKEC,QAAAA,KAAAA,EAAAA;AALF;AAOD,KApIF;AAsICoC,IAAAA,qBAtID,iCAsIuBzB,KAtIvB,EAsI8BP,GAtI9B,EAsImC;AAChC,UAAMJ,KAAK,GAAGW,KAAK,CAACZ,MAANY,CAAaH,SAAbG,CAAwBkB,UAAAA,CAAC;AAAA,eAAKA,CAAC,CAACzB,GAAFyB,KAAUzB,GAAf;AAAA,OAAzBO,CAAd;;AAEA,UAAIX,KAAK,KAAK,CAAC,CAAXA,IAAgBA,KAAK,KAAKW,KAAK,CAACX,KAApC,EAA2C;AACzC,eAAOW,KAAP;AACF;;AAEA,aAAOD,WAAW,CAACC,KAAD,EAAQX,KAAR,EAAeC,YAAf,EAA6BC,gBAA7B,CAAlB;AACD,KA9IF;AAgJCmC,IAAAA,iBAhJD,6BAgJmB1B,KAhJnB,EAgJ0B2B,MAhJ1B,EAgJgC,KAhJhC,EAgJsE;AAApC,UAAElB,cAAF,GAAkC,KAAlC,CAAEA,cAAF;AAAA,UAAkBmB,cAAlB,GAAkC,KAAlC,CAAkBA,cAAlB;;AAC/B,cAAQD,MAAM,CAAC1C,IAAf;AACE,aAAK,SAAL;AACA,aAAK,UAAL;AAAiB;AACf,gBAAII,KAAK,GAAG,CAAC,CAAb;;AAEA,gBAAIsC,MAAM,CAAC1C,IAAP0C,KAAgB,UAAhBA,IAA8BA,MAAM,CAACzC,OAAPyC,CAAelC,GAAjD,EAAsD;AACpDJ,cAAAA,KAAK,GAAGW,KAAK,CAACZ,MAANY,CAAaH,SAAbG,CACLF,UAAAA,KAAK;AAAA,uBAAKA,KAAK,CAACL,GAANK,KAAc6B,MAAM,CAACzC,OAAPyC,CAAelC,GAAlC;AAAA,eADAO,CAARX;AAGD,aAJD,MAIO;AACLA,cAAAA,KAAK,GAAGW,KAAK,CAACZ,MAANY,CAAaH,SAAbG,CACLF,UAAAA,KAAK;AAAA,uBAAKA,KAAK,CAACf,IAANe,KAAe6B,MAAM,CAACzC,OAAPyC,CAAe5C,IAAnC;AAAA,eADAiB,CAARX;AAGF;;AAEA,gBAAIA,KAAK,KAAK,CAAC,CAAf,EAAkB;AAChB,qBAAO,IAAP;AACF;;AAEA,mBAAOU,WAAW,iCAEXC,KAFW;AAGdZ,cAAAA,MAAM,EAAEY,KAAK,CAACZ,MAANY,CAAaa,GAAbb,CAAiB,UAACF,KAAD,EAAQH,CAAR,EAAc;AACrC,oBAAIA,CAAC,KAAKN,KAAV,EAAiB;AACf,yBAAOS,KAAP;AACF;;AAEA,oBAAM+B,KAAK,GAAGD,cAAc,CAAC9B,KAAK,CAACf,IAAP,CAA5B;AAEA,oBAAM+C,SAAS,GAAGD,KAAK,KAAA,IAALA,IAAAA,KAAK,KAAA,KAAA,CAALA,GAAK,KAAA,CAALA,GAAAA,KAAK,CAAG;AAAE7C,kBAAAA,MAAM,EAAEc,KAAK,CAACd;AAAhB,iBAAH,CAAvB;AACA,oBAAM+C,MAAM,GAAGF,KAAK,KAAA,IAALA,IAAAA,KAAK,KAAA,KAAA,CAALA,GAAK,KAAA,CAALA,GAAAA,KAAK,CAAG;AAAE7C,kBAAAA,MAAM,EAAE2C,MAAM,CAACzC,OAAPyC,CAAe3C;AAAzB,iBAAH,CAApB;AAEA,oBAAMS,GAAG,GACPqC,SAAS,KAAKC,MAAdD,GACIhC,KAAK,CAACL,GADVqC,GAEOhC,KAAK,CAACf,IAFb+C,SAEqBpD,MAAM,EAH7B;AAKA,oBAAIM,MAAJ;;AAEA,oBACE2C,MAAM,CAAC1C,IAAP0C,KAAgB,UAAhBA,IACAA,MAAM,CAACzC,OAAPyC,CAAeK,KADfL,IAEAG,SAAS,KAAKC,MAHhB,EAIE;AACA/C,kBAAAA,MAAM,GACJ2C,MAAM,CAACzC,OAAPyC,CAAe3C,MAAf2C,KAA0BjB,SAA1BiB,IACAlB,cAAc,CAACX,KAAK,CAACf,IAAP,CAAd0B,KAA+BC,SAD/BiB,iDAGSlB,cAAc,CAACX,KAAK,CAACf,IAAP,CAHvB4C,GAIS7B,KAAK,CAACd,MAJf2C,GAKSA,MAAM,CAACzC,OAAPyC,CAAe3C,MALxB2C,IAOI7B,KAAK,CAACd,MARZA;AASD,iBAdD,MAcO;AACLA,kBAAAA,MAAM,GACJyB,cAAc,CAACX,KAAK,CAACf,IAAP,CAAd0B,KAA+BC,SAA/BD,mCAESA,cAAc,CAACX,KAAK,CAACf,IAAP,CAFvB0B,GAGSkB,MAAM,CAACzC,OAAPyC,CAAe3C,MAHxByB,IAKIkB,MAAM,CAACzC,OAAPyC,CAAe3C,MANrBA;AAOF;;AAEA,oBAAMiD,IAAI,GACRN,MAAM,CAAC1C,IAAP0C,KAAgB,UAAhBA,IAA8BA,MAAM,CAACzC,OAAPyC,CAAeM,IAAfN,IAAuB,IAArDA,GACIA,MAAM,CAACzC,OAAPyC,CAAeM,IADnBN,GAEI7B,KAAK,CAACmC,IAHZ;AAKA,uBAAOjD,MAAM,KAAKc,KAAK,CAACd,MAAjBA,IAA2BiD,IAAI,KAAKnC,KAAK,CAACmC,IAA1CjD,mCACEc,KADFd;AACSS,kBAAAA,GAAG,EAAHA,GADTT;AACciD,kBAAAA,IAAI,EAAJA,IADdjD;AACoBA,kBAAAA,MAAAA,EAAAA;AADpBA,qBAEHc,KAFJ;AAGD,eAjDOE;AAHM,gBAsDhBX,KAtDgB,EAuDhBC,YAvDgB,EAwDhBC,gBAxDgB,CAAlB;AA0DF;;AAEA,aAAK,SAAL;AAAgB;AACd,gBAAIS,KAAK,CAACR,OAANQ,CAAcsB,MAAdtB,KAAyB,CAA7B,EAAgC;AAC9B,qBAAO,IAAP;AACF;;AAEA,gBAAMkC,WAAW,GAAGlC,KAAK,CAACR,OAANQ,CAAcA,KAAK,CAACR,OAANQ,CAAcsB,MAAdtB,GAAuB,CAArCA,EAAwCP,GAA5D;;AACA,gBAAMJ,MAAK,GAAGW,KAAK,CAACZ,MAANY,CAAaH,SAAbG,CACXF,UAAAA,KAAK;AAAA,qBAAKA,KAAK,CAACL,GAANK,KAAcoC,WAAnB;AAAA,aADMlC,CAAd;;AAIA,gBAAIX,MAAK,KAAK,CAAC,CAAf,EAAkB;AAChB,qBAAO,IAAP;AACF;;AAEA,mDACKW,KADL;AAEER,cAAAA,OAAO,EAAEQ,KAAK,CAACR,OAANQ,CAAcmC,KAAdnC,CAAoB,CAApBA,EAAuB,CAAC,CAAxBA,CAFX;AAGEX,cAAAA,KAAAA,EAAAA;AAHF;AAKF;;AAEA;AACE,iBAAOV,UAAU,CAAC+C,iBAAX/C,CAA6BqB,KAA7BrB,EAAoCgD,MAApChD,CAAP;AArGJ;AAuGD,KAxPF;AA0PCyD,IAAAA,uBA1PD,mCA0PyBT,MA1PzB,EA0PiC;AAC9B,aAAOA,MAAM,CAAC1C,IAAP0C,KAAgB,UAAvB;AACD,KA5PF;AA8PCU,IAAAA,cAAc,EAAExD;AA9PjB,IAHD;;AAoQA,SAAOyB,MAAP;AACF","sourceRoot":"../../src","sourcesContent":["import { nanoid } from 'nanoid/non-secure';\nimport BaseRouter from './BaseRouter';\nconst TYPE_ROUTE = 'route';\nexport const TabActions = {\n  jumpTo(name, params) {\n    return {\n      type: 'JUMP_TO',\n      payload: {\n        name,\n        params\n      }\n    };\n  }\n};\nconst getRouteHistory = (routes, index, backBehavior, initialRouteName) => {\n  const history = [{\n    type: TYPE_ROUTE,\n    key: routes[index].key\n  }];\n  let initialRouteIndex;\n  switch (backBehavior) {\n    case 'order':\n      for (let i = index; i > 0; i--) {\n        history.unshift({\n          type: TYPE_ROUTE,\n          key: routes[i - 1].key\n        });\n      }\n      break;\n    case 'firstRoute':\n      if (index !== 0) {\n        history.unshift({\n          type: TYPE_ROUTE,\n          key: routes[0].key\n        });\n      }\n      break;\n    case 'initialRoute':\n      initialRouteIndex = routes.findIndex(route => route.name === initialRouteName);\n      initialRouteIndex = initialRouteIndex === -1 ? 0 : initialRouteIndex;\n      if (index !== initialRouteIndex) {\n        history.unshift({\n          type: TYPE_ROUTE,\n          key: routes[initialRouteIndex].key\n        });\n      }\n      break;\n    case 'history':\n      // The history will fill up on navigation\n      break;\n  }\n  return history;\n};\nconst changeIndex = (state, index, backBehavior, initialRouteName) => {\n  let history;\n  if (backBehavior === 'history') {\n    const currentKey = state.routes[index].key;\n    history = state.history.filter(it => it.type === 'route' ? it.key !== currentKey : false).concat({\n      type: TYPE_ROUTE,\n      key: currentKey\n    });\n  } else {\n    history = getRouteHistory(state.routes, index, backBehavior, initialRouteName);\n  }\n  return {\n    ...state,\n    index,\n    history\n  };\n};\nexport default function TabRouter(_ref) {\n  let {\n    initialRouteName,\n    backBehavior = 'firstRoute'\n  } = _ref;\n  const router = {\n    ...BaseRouter,\n    type: 'tab',\n    getInitialState(_ref2) {\n      let {\n        routeNames,\n        routeParamList\n      } = _ref2;\n      const index = initialRouteName !== undefined && routeNames.includes(initialRouteName) ? routeNames.indexOf(initialRouteName) : 0;\n      const routes = routeNames.map(name => ({\n        name,\n        key: `${name}-${nanoid()}`,\n        params: routeParamList[name]\n      }));\n      const history = getRouteHistory(routes, index, backBehavior, initialRouteName);\n      return {\n        stale: false,\n        type: 'tab',\n        key: `tab-${nanoid()}`,\n        index,\n        routeNames,\n        history,\n        routes\n      };\n    },\n    getRehydratedState(partialState, _ref3) {\n      var _state$routes, _state$history;\n      let {\n        routeNames,\n        routeParamList\n      } = _ref3;\n      let state = partialState;\n      if (state.stale === false) {\n        return state;\n      }\n      const routes = routeNames.map(name => {\n        const route = state.routes.find(r => r.name === name);\n        return {\n          ...route,\n          name,\n          key: route && route.name === name && route.key ? route.key : `${name}-${nanoid()}`,\n          params: routeParamList[name] !== undefined ? {\n            ...routeParamList[name],\n            ...(route ? route.params : undefined)\n          } : route ? route.params : undefined\n        };\n      });\n      const index = Math.min(Math.max(routeNames.indexOf((_state$routes = state.routes[(state === null || state === void 0 ? void 0 : state.index) ?? 0]) === null || _state$routes === void 0 ? void 0 : _state$routes.name), 0), routes.length - 1);\n      const history = ((_state$history = state.history) === null || _state$history === void 0 ? void 0 : _state$history.filter(it => routes.find(r => r.key === it.key))) ?? [];\n      return changeIndex({\n        stale: false,\n        type: 'tab',\n        key: `tab-${nanoid()}`,\n        index,\n        routeNames,\n        history,\n        routes\n      }, index, backBehavior, initialRouteName);\n    },\n    getStateForRouteNamesChange(state, _ref4) {\n      let {\n        routeNames,\n        routeParamList,\n        routeKeyChanges\n      } = _ref4;\n      const routes = routeNames.map(name => state.routes.find(r => r.name === name && !routeKeyChanges.includes(r.name)) || {\n        name,\n        key: `${name}-${nanoid()}`,\n        params: routeParamList[name]\n      });\n      const index = Math.max(0, routeNames.indexOf(state.routes[state.index].name));\n      let history = state.history.filter(\n      // Type will always be 'route' for tabs, but could be different in a router extending this (e.g. drawer)\n      it => it.type !== 'route' || routes.find(r => r.key === it.key));\n      if (!history.length) {\n        history = getRouteHistory(routes, index, backBehavior, initialRouteName);\n      }\n      return {\n        ...state,\n        history,\n        routeNames,\n        routes,\n        index\n      };\n    },\n    getStateForRouteFocus(state, key) {\n      const index = state.routes.findIndex(r => r.key === key);\n      if (index === -1 || index === state.index) {\n        return state;\n      }\n      return changeIndex(state, index, backBehavior, initialRouteName);\n    },\n    getStateForAction(state, action, _ref5) {\n      let {\n        routeParamList,\n        routeGetIdList\n      } = _ref5;\n      switch (action.type) {\n        case 'JUMP_TO':\n        case 'NAVIGATE':\n          {\n            let index = -1;\n            if (action.type === 'NAVIGATE' && action.payload.key) {\n              index = state.routes.findIndex(route => route.key === action.payload.key);\n            } else {\n              index = state.routes.findIndex(route => route.name === action.payload.name);\n            }\n            if (index === -1) {\n              return null;\n            }\n            return changeIndex({\n              ...state,\n              routes: state.routes.map((route, i) => {\n                if (i !== index) {\n                  return route;\n                }\n                const getId = routeGetIdList[route.name];\n                const currentId = getId === null || getId === void 0 ? void 0 : getId({\n                  params: route.params\n                });\n                const nextId = getId === null || getId === void 0 ? void 0 : getId({\n                  params: action.payload.params\n                });\n                const key = currentId === nextId ? route.key : `${route.name}-${nanoid()}`;\n                let params;\n                if (action.type === 'NAVIGATE' && action.payload.merge && currentId === nextId) {\n                  params = action.payload.params !== undefined || routeParamList[route.name] !== undefined ? {\n                    ...routeParamList[route.name],\n                    ...route.params,\n                    ...action.payload.params\n                  } : route.params;\n                } else {\n                  params = routeParamList[route.name] !== undefined ? {\n                    ...routeParamList[route.name],\n                    ...action.payload.params\n                  } : action.payload.params;\n                }\n                const path = action.type === 'NAVIGATE' && action.payload.path != null ? action.payload.path : route.path;\n                return params !== route.params || path !== route.path ? {\n                  ...route,\n                  key,\n                  path,\n                  params\n                } : route;\n              })\n            }, index, backBehavior, initialRouteName);\n          }\n        case 'GO_BACK':\n          {\n            if (state.history.length === 1) {\n              return null;\n            }\n            const previousKey = state.history[state.history.length - 2].key;\n            const index = state.routes.findIndex(route => route.key === previousKey);\n            if (index === -1) {\n              return null;\n            }\n            return {\n              ...state,\n              history: state.history.slice(0, -1),\n              index\n            };\n          }\n        default:\n          return BaseRouter.getStateForAction(state, action);\n      }\n    },\n    shouldActionChangeFocus(action) {\n      return action.type === 'NAVIGATE';\n    },\n    actionCreators: TabActions\n  };\n  return router;\n}\n//# sourceMappingURL=TabRouter.js.map"]},"metadata":{},"sourceType":"module"}