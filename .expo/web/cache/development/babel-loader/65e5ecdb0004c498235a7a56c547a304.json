{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nimport { Background, getDefaultHeaderHeight, SafeAreaProviderCompat } from '@react-navigation/elements';\nimport Color from 'color';\nimport * as React from 'react';\nimport Animated from \"react-native-web/dist/exports/Animated\";\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport { forModalPresentationIOS, forNoAnimation as forNoAnimationCard } from \"../../TransitionConfigs/CardStyleInterpolators\";\nimport { DefaultTransition, ModalFadeTransition, ModalTransition } from \"../../TransitionConfigs/TransitionPresets\";\nimport findLastIndex from \"../../utils/findLastIndex\";\nimport getDistanceForDirection from \"../../utils/getDistanceForDirection\";\nimport { MaybeScreen, MaybeScreenContainer } from \"../Screens\";\nimport { getIsModalPresentation } from \"./Card\";\nimport CardContainer from \"./CardContainer\";\nvar EPSILON = 1e-5;\nvar STATE_INACTIVE = 0;\nvar STATE_TRANSITIONING_OR_BELOW_TOP = 1;\nvar STATE_ON_TOP = 2;\nvar FALLBACK_DESCRIPTOR = Object.freeze({\n  options: {}\n});\n\nvar getInterpolationIndex = function getInterpolationIndex(scenes, index) {\n  var cardStyleInterpolator = scenes[index].descriptor.options.cardStyleInterpolator;\n  var interpolationIndex = 0;\n\n  for (var i = index - 1; i >= 0; i--) {\n    var _scenes$i;\n\n    var cardStyleInterpolatorCurrent = (_scenes$i = scenes[i]) === null || _scenes$i === void 0 ? void 0 : _scenes$i.descriptor.options.cardStyleInterpolator;\n\n    if (cardStyleInterpolatorCurrent !== cardStyleInterpolator) {\n      break;\n    }\n\n    interpolationIndex++;\n  }\n\n  return interpolationIndex;\n};\n\nvar getIsModal = function getIsModal(scene, interpolationIndex, isParentModal) {\n  if (isParentModal) {\n    return true;\n  }\n\n  var cardStyleInterpolator = scene.descriptor.options.cardStyleInterpolator;\n  var isModalPresentation = getIsModalPresentation(cardStyleInterpolator);\n  var isModal = isModalPresentation && interpolationIndex !== 0;\n  return isModal;\n};\n\nvar getHeaderHeights = function getHeaderHeights(scenes, insets, isParentHeaderShown, isParentModal, layout, previous) {\n  return scenes.reduce(function (acc, curr, index) {\n    var _curr$descriptor$opti = curr.descriptor.options,\n        _curr$descriptor$opti2 = _curr$descriptor$opti.headerStatusBarHeight,\n        headerStatusBarHeight = _curr$descriptor$opti2 === void 0 ? isParentHeaderShown ? 0 : insets.top : _curr$descriptor$opti2,\n        headerStyle = _curr$descriptor$opti.headerStyle;\n    var style = StyleSheet.flatten(headerStyle || {});\n    var height = 'height' in style && typeof style.height === 'number' ? style.height : previous[curr.route.key];\n    var interpolationIndex = getInterpolationIndex(scenes, index);\n    var isModal = getIsModal(curr, interpolationIndex, isParentModal);\n    acc[curr.route.key] = typeof height === 'number' ? height : getDefaultHeaderHeight(layout, isModal, headerStatusBarHeight);\n    return acc;\n  }, {});\n};\n\nvar getDistanceFromOptions = function getDistanceFromOptions(layout, descriptor) {\n  var _ref4 = (descriptor === null || descriptor === void 0 ? void 0 : descriptor.options) || {},\n      presentation = _ref4.presentation,\n      _ref4$gestureDirectio = _ref4.gestureDirection,\n      gestureDirection = _ref4$gestureDirectio === void 0 ? presentation === 'modal' ? ModalTransition.gestureDirection : DefaultTransition.gestureDirection : _ref4$gestureDirectio;\n\n  return getDistanceForDirection(layout, gestureDirection);\n};\n\nvar getProgressFromGesture = function getProgressFromGesture(gesture, layout, descriptor) {\n  var distance = getDistanceFromOptions({\n    width: Math.max(1, layout.width),\n    height: Math.max(1, layout.height)\n  }, descriptor);\n\n  if (distance > 0) {\n    return gesture.interpolate({\n      inputRange: [0, distance],\n      outputRange: [1, 0]\n    });\n  }\n\n  return gesture.interpolate({\n    inputRange: [distance, 0],\n    outputRange: [0, 1]\n  });\n};\n\nvar CardStack = function (_React$Component) {\n  _inherits(CardStack, _React$Component);\n\n  var _super = _createSuper(CardStack);\n\n  function CardStack(_props) {\n    var _this;\n\n    _classCallCheck(this, CardStack);\n\n    _this = _super.call(this, _props);\n\n    _this.handleLayout = function (e) {\n      var _e$nativeEvent$layout = e.nativeEvent.layout,\n          height = _e$nativeEvent$layout.height,\n          width = _e$nativeEvent$layout.width;\n      var layout = {\n        width: width,\n        height: height\n      };\n\n      _this.setState(function (state, props) {\n        if (height === state.layout.height && width === state.layout.width) {\n          return null;\n        }\n\n        return {\n          layout: layout,\n          headerHeights: getHeaderHeights(state.scenes, props.insets, props.isParentHeaderShown, props.isParentModal, layout, state.headerHeights)\n        };\n      });\n    };\n\n    _this.handleHeaderLayout = function (_ref) {\n      var route = _ref.route,\n          height = _ref.height;\n\n      _this.setState(function (_ref2) {\n        var headerHeights = _ref2.headerHeights;\n        var previousHeight = headerHeights[route.key];\n\n        if (previousHeight === height) {\n          return null;\n        }\n\n        return {\n          headerHeights: _objectSpread(_objectSpread({}, headerHeights), {}, _defineProperty({}, route.key, height))\n        };\n      });\n    };\n\n    _this.getFocusedRoute = function () {\n      var state = _this.props.state;\n      return state.routes[state.index];\n    };\n\n    _this.getPreviousScene = function (_ref3) {\n      var route = _ref3.route;\n      var getPreviousRoute = _this.props.getPreviousRoute;\n      var scenes = _this.state.scenes;\n      var previousRoute = getPreviousRoute({\n        route: route\n      });\n\n      if (previousRoute) {\n        var previousScene = scenes.find(function (scene) {\n          return scene.descriptor.route.key === previousRoute.key;\n        });\n        return previousScene;\n      }\n\n      return undefined;\n    };\n\n    _this.state = {\n      routes: [],\n      scenes: [],\n      gestures: {},\n      layout: SafeAreaProviderCompat.initialMetrics.frame,\n      descriptors: _this.props.descriptors,\n      headerHeights: {}\n    };\n    return _this;\n  }\n\n  _createClass(CardStack, [{\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var _this$props = this.props,\n          insets = _this$props.insets,\n          state = _this$props.state,\n          routes = _this$props.routes,\n          closingRouteKeys = _this$props.closingRouteKeys,\n          onOpenRoute = _this$props.onOpenRoute,\n          onCloseRoute = _this$props.onCloseRoute,\n          renderHeader = _this$props.renderHeader,\n          renderScene = _this$props.renderScene,\n          isParentHeaderShown = _this$props.isParentHeaderShown,\n          isParentModal = _this$props.isParentModal,\n          onTransitionStart = _this$props.onTransitionStart,\n          onTransitionEnd = _this$props.onTransitionEnd,\n          onGestureStart = _this$props.onGestureStart,\n          onGestureEnd = _this$props.onGestureEnd,\n          onGestureCancel = _this$props.onGestureCancel,\n          _this$props$detachIna = _this$props.detachInactiveScreens,\n          detachInactiveScreens = _this$props$detachIna === void 0 ? Platform.OS === 'web' || Platform.OS === 'android' || Platform.OS === 'ios' : _this$props$detachIna;\n      var _this$state = this.state,\n          scenes = _this$state.scenes,\n          layout = _this$state.layout,\n          gestures = _this$state.gestures,\n          headerHeights = _this$state.headerHeights;\n      var focusedRoute = state.routes[state.index];\n      var focusedHeaderHeight = headerHeights[focusedRoute.key];\n      var isFloatHeaderAbsolute = this.state.scenes.slice(-2).some(function (scene) {\n        var _scene$descriptor$opt;\n\n        var options = (_scene$descriptor$opt = scene.descriptor.options) != null ? _scene$descriptor$opt : {};\n        var headerMode = options.headerMode,\n            headerTransparent = options.headerTransparent,\n            _options$headerShown = options.headerShown,\n            headerShown = _options$headerShown === void 0 ? true : _options$headerShown;\n\n        if (headerTransparent || headerShown === false || headerMode === 'screen') {\n          return true;\n        }\n\n        return false;\n      });\n      var activeScreensLimit = 1;\n\n      for (var i = scenes.length - 1; i >= 0; i--) {\n        var options = scenes[i].descriptor.options;\n        var _options$detachPrevio = options.detachPreviousScreen,\n            detachPreviousScreen = _options$detachPrevio === void 0 ? options.presentation === 'transparentModal' ? false : getIsModalPresentation(options.cardStyleInterpolator) ? i !== findLastIndex(scenes, function (scene) {\n          var cardStyleInterpolator = scene.descriptor.options.cardStyleInterpolator;\n          return cardStyleInterpolator === forModalPresentationIOS || (cardStyleInterpolator === null || cardStyleInterpolator === void 0 ? void 0 : cardStyleInterpolator.name) === 'forModalPresentationIOS';\n        }) : true : _options$detachPrevio;\n\n        if (detachPreviousScreen === false) {\n          activeScreensLimit++;\n        } else {\n          if (i <= scenes.length - 2) {\n            break;\n          }\n        }\n      }\n\n      var floatingHeader = React.createElement(React.Fragment, {\n        key: \"header\"\n      }, renderHeader({\n        mode: 'float',\n        layout: layout,\n        scenes: scenes,\n        getPreviousScene: this.getPreviousScene,\n        getFocusedRoute: this.getFocusedRoute,\n        onContentHeightChange: this.handleHeaderLayout,\n        style: [styles.floating, isFloatHeaderAbsolute && [{\n          height: focusedHeaderHeight\n        }, styles.absolute]]\n      }));\n      return React.createElement(Background, null, isFloatHeaderAbsolute ? null : floatingHeader, React.createElement(MaybeScreenContainer, {\n        enabled: detachInactiveScreens,\n        style: styles.container,\n        onLayout: this.handleLayout\n      }, routes.map(function (route, index, self) {\n        var _scenes, _scenes2;\n\n        var focused = focusedRoute.key === route.key;\n        var gesture = gestures[route.key];\n        var scene = scenes[index];\n        var isScreenActive = 1;\n\n        if (index < self.length - activeScreensLimit - 1) {\n          isScreenActive = STATE_INACTIVE;\n        } else {\n          var sceneForActivity = scenes[self.length - 1];\n          var outputValue = index === self.length - 1 ? STATE_ON_TOP : index >= self.length - activeScreensLimit ? STATE_TRANSITIONING_OR_BELOW_TOP : STATE_INACTIVE;\n          isScreenActive = sceneForActivity ? sceneForActivity.progress.current.interpolate({\n            inputRange: [0, 1 - EPSILON, 1],\n            outputRange: [1, 1, outputValue],\n            extrapolate: 'clamp'\n          }) : STATE_TRANSITIONING_OR_BELOW_TOP;\n        }\n\n        var _scene$descriptor$opt2 = scene.descriptor.options,\n            _scene$descriptor$opt3 = _scene$descriptor$opt2.headerShown,\n            headerShown = _scene$descriptor$opt3 === void 0 ? true : _scene$descriptor$opt3,\n            headerTransparent = _scene$descriptor$opt2.headerTransparent,\n            headerStyle = _scene$descriptor$opt2.headerStyle,\n            headerTintColor = _scene$descriptor$opt2.headerTintColor,\n            freezeOnBlur = _scene$descriptor$opt2.freezeOnBlur;\n        var safeAreaInsetTop = insets.top;\n        var safeAreaInsetRight = insets.right;\n        var safeAreaInsetBottom = insets.bottom;\n        var safeAreaInsetLeft = insets.left;\n        var headerHeight = headerShown !== false ? headerHeights[route.key] : 0;\n        var headerDarkContent;\n\n        if (headerShown) {\n          if (typeof headerTintColor === 'string') {\n            headerDarkContent = Color(headerTintColor).isDark();\n          } else {\n            var flattenedHeaderStyle = StyleSheet.flatten(headerStyle);\n\n            if (flattenedHeaderStyle && 'backgroundColor' in flattenedHeaderStyle && typeof flattenedHeaderStyle.backgroundColor === 'string') {\n              headerDarkContent = !Color(flattenedHeaderStyle.backgroundColor).isDark();\n            }\n          }\n        }\n\n        var interpolationIndex = getInterpolationIndex(scenes, index);\n        var isModal = getIsModal(scene, interpolationIndex, isParentModal);\n        var isNextScreenTransparent = ((_scenes = scenes[index + 1]) === null || _scenes === void 0 ? void 0 : _scenes.descriptor.options.presentation) === 'transparentModal';\n        var detachCurrentScreen = ((_scenes2 = scenes[index + 1]) === null || _scenes2 === void 0 ? void 0 : _scenes2.descriptor.options.detachPreviousScreen) !== false;\n        return React.createElement(MaybeScreen, {\n          key: route.key,\n          style: StyleSheet.absoluteFill,\n          enabled: detachInactiveScreens,\n          active: isScreenActive,\n          freezeOnBlur: freezeOnBlur,\n          pointerEvents: \"box-none\"\n        }, React.createElement(CardContainer, {\n          index: index,\n          interpolationIndex: interpolationIndex,\n          modal: isModal,\n          active: index === self.length - 1,\n          focused: focused,\n          closing: closingRouteKeys.includes(route.key),\n          layout: layout,\n          gesture: gesture,\n          scene: scene,\n          safeAreaInsetTop: safeAreaInsetTop,\n          safeAreaInsetRight: safeAreaInsetRight,\n          safeAreaInsetBottom: safeAreaInsetBottom,\n          safeAreaInsetLeft: safeAreaInsetLeft,\n          onGestureStart: onGestureStart,\n          onGestureCancel: onGestureCancel,\n          onGestureEnd: onGestureEnd,\n          headerHeight: headerHeight,\n          isParentHeaderShown: isParentHeaderShown,\n          onHeaderHeightChange: _this2.handleHeaderLayout,\n          getPreviousScene: _this2.getPreviousScene,\n          getFocusedRoute: _this2.getFocusedRoute,\n          headerDarkContent: headerDarkContent,\n          hasAbsoluteFloatHeader: isFloatHeaderAbsolute && !headerTransparent,\n          renderHeader: renderHeader,\n          renderScene: renderScene,\n          onOpenRoute: onOpenRoute,\n          onCloseRoute: onCloseRoute,\n          onTransitionStart: onTransitionStart,\n          onTransitionEnd: onTransitionEnd,\n          isNextScreenTransparent: isNextScreenTransparent,\n          detachCurrentScreen: detachCurrentScreen\n        }));\n      })), isFloatHeaderAbsolute ? floatingHeader : null);\n    }\n  }], [{\n    key: \"getDerivedStateFromProps\",\n    value: function getDerivedStateFromProps(props, state) {\n      if (props.routes === state.routes && props.descriptors === state.descriptors) {\n        return null;\n      }\n\n      var gestures = props.routes.reduce(function (acc, curr) {\n        var descriptor = props.descriptors[curr.key];\n\n        var _ref5 = (descriptor === null || descriptor === void 0 ? void 0 : descriptor.options) || {},\n            animationEnabled = _ref5.animationEnabled;\n\n        acc[curr.key] = state.gestures[curr.key] || new Animated.Value(props.openingRouteKeys.includes(curr.key) && animationEnabled !== false ? getDistanceFromOptions(state.layout, descriptor) : 0);\n        return acc;\n      }, {});\n      var scenes = props.routes.map(function (route, index, self) {\n        var _descriptor$options$h;\n\n        var previousRoute = self[index - 1];\n        var nextRoute = self[index + 1];\n        var oldScene = state.scenes[index];\n        var currentGesture = gestures[route.key];\n        var previousGesture = previousRoute ? gestures[previousRoute.key] : undefined;\n        var nextGesture = nextRoute ? gestures[nextRoute.key] : undefined;\n        var descriptor = props.descriptors[route.key] || state.descriptors[route.key] || (oldScene ? oldScene.descriptor : FALLBACK_DESCRIPTOR);\n        var nextDescriptor = props.descriptors[nextRoute === null || nextRoute === void 0 ? void 0 : nextRoute.key] || state.descriptors[nextRoute === null || nextRoute === void 0 ? void 0 : nextRoute.key];\n        var previousDescriptor = props.descriptors[previousRoute === null || previousRoute === void 0 ? void 0 : previousRoute.key] || state.descriptors[previousRoute === null || previousRoute === void 0 ? void 0 : previousRoute.key];\n        var optionsForTransitionConfig = index !== self.length - 1 && nextDescriptor && nextDescriptor.options.presentation !== 'transparentModal' ? nextDescriptor.options : descriptor.options;\n        var defaultTransitionPreset = optionsForTransitionConfig.presentation === 'modal' ? ModalTransition : optionsForTransitionConfig.presentation === 'transparentModal' ? ModalFadeTransition : DefaultTransition;\n        var _optionsForTransition = optionsForTransitionConfig.animationEnabled,\n            animationEnabled = _optionsForTransition === void 0 ? Platform.OS !== 'web' && Platform.OS !== 'windows' && Platform.OS !== 'macos' : _optionsForTransition,\n            _optionsForTransition2 = optionsForTransitionConfig.gestureEnabled,\n            gestureEnabled = _optionsForTransition2 === void 0 ? Platform.OS === 'ios' && animationEnabled : _optionsForTransition2,\n            _optionsForTransition3 = optionsForTransitionConfig.gestureDirection,\n            gestureDirection = _optionsForTransition3 === void 0 ? defaultTransitionPreset.gestureDirection : _optionsForTransition3,\n            _optionsForTransition4 = optionsForTransitionConfig.transitionSpec,\n            transitionSpec = _optionsForTransition4 === void 0 ? defaultTransitionPreset.transitionSpec : _optionsForTransition4,\n            _optionsForTransition5 = optionsForTransitionConfig.cardStyleInterpolator,\n            cardStyleInterpolator = _optionsForTransition5 === void 0 ? animationEnabled === false ? forNoAnimationCard : defaultTransitionPreset.cardStyleInterpolator : _optionsForTransition5,\n            _optionsForTransition6 = optionsForTransitionConfig.headerStyleInterpolator,\n            headerStyleInterpolator = _optionsForTransition6 === void 0 ? defaultTransitionPreset.headerStyleInterpolator : _optionsForTransition6,\n            _optionsForTransition7 = optionsForTransitionConfig.cardOverlayEnabled,\n            cardOverlayEnabled = _optionsForTransition7 === void 0 ? Platform.OS !== 'ios' && optionsForTransitionConfig.presentation !== 'transparentModal' || getIsModalPresentation(cardStyleInterpolator) : _optionsForTransition7;\n        var headerMode = (_descriptor$options$h = descriptor.options.headerMode) != null ? _descriptor$options$h : !(optionsForTransitionConfig.presentation === 'modal' || optionsForTransitionConfig.presentation === 'transparentModal' || (nextDescriptor === null || nextDescriptor === void 0 ? void 0 : nextDescriptor.options.presentation) === 'modal' || (nextDescriptor === null || nextDescriptor === void 0 ? void 0 : nextDescriptor.options.presentation) === 'transparentModal' || getIsModalPresentation(cardStyleInterpolator)) && Platform.OS === 'ios' && descriptor.options.header === undefined ? 'float' : 'screen';\n        var scene = {\n          route: route,\n          descriptor: _objectSpread(_objectSpread({}, descriptor), {}, {\n            options: _objectSpread(_objectSpread({}, descriptor.options), {}, {\n              animationEnabled: animationEnabled,\n              cardOverlayEnabled: cardOverlayEnabled,\n              cardStyleInterpolator: cardStyleInterpolator,\n              gestureDirection: gestureDirection,\n              gestureEnabled: gestureEnabled,\n              headerStyleInterpolator: headerStyleInterpolator,\n              transitionSpec: transitionSpec,\n              headerMode: headerMode\n            })\n          }),\n          progress: {\n            current: getProgressFromGesture(currentGesture, state.layout, descriptor),\n            next: nextGesture && (nextDescriptor === null || nextDescriptor === void 0 ? void 0 : nextDescriptor.options.presentation) !== 'transparentModal' ? getProgressFromGesture(nextGesture, state.layout, nextDescriptor) : undefined,\n            previous: previousGesture ? getProgressFromGesture(previousGesture, state.layout, previousDescriptor) : undefined\n          },\n          __memo: [state.layout, descriptor, nextDescriptor, previousDescriptor, currentGesture, nextGesture, previousGesture]\n        };\n\n        if (oldScene && scene.__memo.every(function (it, i) {\n          return oldScene.__memo[i] === it;\n        })) {\n          return oldScene;\n        }\n\n        return scene;\n      });\n      return {\n        routes: props.routes,\n        scenes: scenes,\n        gestures: gestures,\n        descriptors: props.descriptors,\n        headerHeights: getHeaderHeights(scenes, props.insets, props.isParentHeaderShown, props.isParentModal, state.layout, state.headerHeights)\n      };\n    }\n  }]);\n\n  return CardStack;\n}(React.Component);\n\nexport { CardStack as default };\nvar styles = StyleSheet.create({\n  container: {\n    flex: 1\n  },\n  absolute: {\n    position: 'absolute',\n    top: 0,\n    left: 0,\n    right: 0\n  },\n  floating: {\n    zIndex: 1\n  }\n});","map":{"version":3,"sources":["views/Stack/CardStack.tsx"],"names":["Background","getDefaultHeaderHeight","SafeAreaProviderCompat","Color","React","forModalPresentationIOS","forNoAnimation","forNoAnimationCard","DefaultTransition","ModalFadeTransition","ModalTransition","findLastIndex","getDistanceForDirection","MaybeScreen","MaybeScreenContainer","getIsModalPresentation","CardContainer","EPSILON","STATE_INACTIVE","STATE_TRANSITIONING_OR_BELOW_TOP","STATE_ON_TOP","FALLBACK_DESCRIPTOR","Object","freeze","options","getInterpolationIndex","scenes","index","cardStyleInterpolator","descriptor","interpolationIndex","i","cardStyleInterpolatorCurrent","getIsModal","scene","isParentModal","isModalPresentation","isModal","getHeaderHeights","insets","isParentHeaderShown","layout","previous","reduce","acc","curr","headerStatusBarHeight","top","headerStyle","style","StyleSheet","flatten","height","route","key","getDistanceFromOptions","presentation","gestureDirection","getProgressFromGesture","gesture","distance","width","Math","max","interpolate","inputRange","outputRange","CardStack","Component","props","state","routes","descriptors","gestures","animationEnabled","Animated","Value","openingRouteKeys","includes","map","self","previousRoute","nextRoute","oldScene","currentGesture","previousGesture","undefined","nextGesture","nextDescriptor","previousDescriptor","optionsForTransitionConfig","length","defaultTransitionPreset","Platform","OS","gestureEnabled","transitionSpec","headerStyleInterpolator","cardOverlayEnabled","headerMode","header","progress","current","next","__memo","every","it","headerHeights","constructor","initialMetrics","frame","handleLayout","e","nativeEvent","setState","handleHeaderLayout","previousHeight","getFocusedRoute","getPreviousScene","getPreviousRoute","previousScene","find","render","closingRouteKeys","onOpenRoute","onCloseRoute","renderHeader","renderScene","onTransitionStart","onTransitionEnd","onGestureStart","onGestureEnd","onGestureCancel","detachInactiveScreens","focusedRoute","focusedHeaderHeight","isFloatHeaderAbsolute","slice","some","headerTransparent","headerShown","activeScreensLimit","detachPreviousScreen","name","floatingHeader","mode","onContentHeightChange","styles","floating","absolute","container","focused","isScreenActive","sceneForActivity","outputValue","extrapolate","headerTintColor","freezeOnBlur","safeAreaInsetTop","safeAreaInsetRight","right","safeAreaInsetBottom","bottom","safeAreaInsetLeft","left","headerHeight","headerDarkContent","isDark","flattenedHeaderStyle","backgroundColor","isNextScreenTransparent","detachCurrentScreen","absoluteFill","create","flex","position","zIndex"],"mappings":"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","sourceRoot":"../../../../src","sourcesContent":["import { Background, getDefaultHeaderHeight, SafeAreaProviderCompat } from '@react-navigation/elements';\nimport Color from 'color';\nimport * as React from 'react';\nimport { Animated, Platform, StyleSheet } from 'react-native';\nimport { forModalPresentationIOS, forNoAnimation as forNoAnimationCard } from '../../TransitionConfigs/CardStyleInterpolators';\nimport { DefaultTransition, ModalFadeTransition, ModalTransition } from '../../TransitionConfigs/TransitionPresets';\nimport findLastIndex from '../../utils/findLastIndex';\nimport getDistanceForDirection from '../../utils/getDistanceForDirection';\nimport { MaybeScreen, MaybeScreenContainer } from '../Screens';\nimport { getIsModalPresentation } from './Card';\nimport CardContainer from './CardContainer';\nconst EPSILON = 1e-5;\nconst STATE_INACTIVE = 0;\nconst STATE_TRANSITIONING_OR_BELOW_TOP = 1;\nconst STATE_ON_TOP = 2;\nconst FALLBACK_DESCRIPTOR = Object.freeze({\n  options: {}\n});\nconst getInterpolationIndex = (scenes, index) => {\n  const {\n    cardStyleInterpolator\n  } = scenes[index].descriptor.options;\n\n  // Start from current card and count backwards the number of cards with same interpolation\n  let interpolationIndex = 0;\n  for (let i = index - 1; i >= 0; i--) {\n    var _scenes$i;\n    const cardStyleInterpolatorCurrent = (_scenes$i = scenes[i]) === null || _scenes$i === void 0 ? void 0 : _scenes$i.descriptor.options.cardStyleInterpolator;\n    if (cardStyleInterpolatorCurrent !== cardStyleInterpolator) {\n      break;\n    }\n    interpolationIndex++;\n  }\n  return interpolationIndex;\n};\nconst getIsModal = (scene, interpolationIndex, isParentModal) => {\n  if (isParentModal) {\n    return true;\n  }\n  const {\n    cardStyleInterpolator\n  } = scene.descriptor.options;\n  const isModalPresentation = getIsModalPresentation(cardStyleInterpolator);\n  const isModal = isModalPresentation && interpolationIndex !== 0;\n  return isModal;\n};\nconst getHeaderHeights = (scenes, insets, isParentHeaderShown, isParentModal, layout, previous) => {\n  return scenes.reduce((acc, curr, index) => {\n    const {\n      headerStatusBarHeight = isParentHeaderShown ? 0 : insets.top,\n      headerStyle\n    } = curr.descriptor.options;\n    const style = StyleSheet.flatten(headerStyle || {});\n    const height = 'height' in style && typeof style.height === 'number' ? style.height : previous[curr.route.key];\n    const interpolationIndex = getInterpolationIndex(scenes, index);\n    const isModal = getIsModal(curr, interpolationIndex, isParentModal);\n    acc[curr.route.key] = typeof height === 'number' ? height : getDefaultHeaderHeight(layout, isModal, headerStatusBarHeight);\n    return acc;\n  }, {});\n};\nconst getDistanceFromOptions = (layout, descriptor) => {\n  const {\n    presentation,\n    gestureDirection = presentation === 'modal' ? ModalTransition.gestureDirection : DefaultTransition.gestureDirection\n  } = (descriptor === null || descriptor === void 0 ? void 0 : descriptor.options) || {};\n  return getDistanceForDirection(layout, gestureDirection);\n};\nconst getProgressFromGesture = (gesture, layout, descriptor) => {\n  const distance = getDistanceFromOptions({\n    // Make sure that we have a non-zero distance, otherwise there will be incorrect progress\n    // This causes blank screen on web if it was previously inside container with display: none\n    width: Math.max(1, layout.width),\n    height: Math.max(1, layout.height)\n  }, descriptor);\n  if (distance > 0) {\n    return gesture.interpolate({\n      inputRange: [0, distance],\n      outputRange: [1, 0]\n    });\n  }\n  return gesture.interpolate({\n    inputRange: [distance, 0],\n    outputRange: [0, 1]\n  });\n};\nexport default class CardStack extends React.Component {\n  static getDerivedStateFromProps(props, state) {\n    if (props.routes === state.routes && props.descriptors === state.descriptors) {\n      return null;\n    }\n    const gestures = props.routes.reduce((acc, curr) => {\n      const descriptor = props.descriptors[curr.key];\n      const {\n        animationEnabled\n      } = (descriptor === null || descriptor === void 0 ? void 0 : descriptor.options) || {};\n      acc[curr.key] = state.gestures[curr.key] || new Animated.Value(props.openingRouteKeys.includes(curr.key) && animationEnabled !== false ? getDistanceFromOptions(state.layout, descriptor) : 0);\n      return acc;\n    }, {});\n    const scenes = props.routes.map((route, index, self) => {\n      const previousRoute = self[index - 1];\n      const nextRoute = self[index + 1];\n      const oldScene = state.scenes[index];\n      const currentGesture = gestures[route.key];\n      const previousGesture = previousRoute ? gestures[previousRoute.key] : undefined;\n      const nextGesture = nextRoute ? gestures[nextRoute.key] : undefined;\n      const descriptor = props.descriptors[route.key] || state.descriptors[route.key] || (oldScene ? oldScene.descriptor : FALLBACK_DESCRIPTOR);\n      const nextDescriptor = props.descriptors[nextRoute === null || nextRoute === void 0 ? void 0 : nextRoute.key] || state.descriptors[nextRoute === null || nextRoute === void 0 ? void 0 : nextRoute.key];\n      const previousDescriptor = props.descriptors[previousRoute === null || previousRoute === void 0 ? void 0 : previousRoute.key] || state.descriptors[previousRoute === null || previousRoute === void 0 ? void 0 : previousRoute.key];\n\n      // When a screen is not the last, it should use next screen's transition config\n      // Many transitions also animate the previous screen, so using 2 different transitions doesn't look right\n      // For example combining a slide and a modal transition would look wrong otherwise\n      // With this approach, combining different transition styles in the same navigator mostly looks right\n      // This will still be broken when 2 transitions have different idle state (e.g. modal presentation),\n      // but majority of the transitions look alright\n      const optionsForTransitionConfig = index !== self.length - 1 && nextDescriptor && nextDescriptor.options.presentation !== 'transparentModal' ? nextDescriptor.options : descriptor.options;\n      let defaultTransitionPreset = optionsForTransitionConfig.presentation === 'modal' ? ModalTransition : optionsForTransitionConfig.presentation === 'transparentModal' ? ModalFadeTransition : DefaultTransition;\n      const {\n        animationEnabled = Platform.OS !== 'web' && Platform.OS !== 'windows' && Platform.OS !== 'macos',\n        gestureEnabled = Platform.OS === 'ios' && animationEnabled,\n        gestureDirection = defaultTransitionPreset.gestureDirection,\n        transitionSpec = defaultTransitionPreset.transitionSpec,\n        cardStyleInterpolator = animationEnabled === false ? forNoAnimationCard : defaultTransitionPreset.cardStyleInterpolator,\n        headerStyleInterpolator = defaultTransitionPreset.headerStyleInterpolator,\n        cardOverlayEnabled = Platform.OS !== 'ios' && optionsForTransitionConfig.presentation !== 'transparentModal' || getIsModalPresentation(cardStyleInterpolator)\n      } = optionsForTransitionConfig;\n      const headerMode = descriptor.options.headerMode ?? (!(optionsForTransitionConfig.presentation === 'modal' || optionsForTransitionConfig.presentation === 'transparentModal' || (nextDescriptor === null || nextDescriptor === void 0 ? void 0 : nextDescriptor.options.presentation) === 'modal' || (nextDescriptor === null || nextDescriptor === void 0 ? void 0 : nextDescriptor.options.presentation) === 'transparentModal' || getIsModalPresentation(cardStyleInterpolator)) && Platform.OS === 'ios' && descriptor.options.header === undefined ? 'float' : 'screen');\n      const scene = {\n        route,\n        descriptor: {\n          ...descriptor,\n          options: {\n            ...descriptor.options,\n            animationEnabled,\n            cardOverlayEnabled,\n            cardStyleInterpolator,\n            gestureDirection,\n            gestureEnabled,\n            headerStyleInterpolator,\n            transitionSpec,\n            headerMode\n          }\n        },\n        progress: {\n          current: getProgressFromGesture(currentGesture, state.layout, descriptor),\n          next: nextGesture && (nextDescriptor === null || nextDescriptor === void 0 ? void 0 : nextDescriptor.options.presentation) !== 'transparentModal' ? getProgressFromGesture(nextGesture, state.layout, nextDescriptor) : undefined,\n          previous: previousGesture ? getProgressFromGesture(previousGesture, state.layout, previousDescriptor) : undefined\n        },\n        __memo: [state.layout, descriptor, nextDescriptor, previousDescriptor, currentGesture, nextGesture, previousGesture]\n      };\n      if (oldScene && scene.__memo.every((it, i) => {\n        // @ts-expect-error: we haven't added __memo to the annotation to prevent usage elsewhere\n        return oldScene.__memo[i] === it;\n      })) {\n        return oldScene;\n      }\n      return scene;\n    });\n    return {\n      routes: props.routes,\n      scenes,\n      gestures,\n      descriptors: props.descriptors,\n      headerHeights: getHeaderHeights(scenes, props.insets, props.isParentHeaderShown, props.isParentModal, state.layout, state.headerHeights)\n    };\n  }\n  constructor(props) {\n    super(props);\n    this.state = {\n      routes: [],\n      scenes: [],\n      gestures: {},\n      layout: SafeAreaProviderCompat.initialMetrics.frame,\n      descriptors: this.props.descriptors,\n      // Used when card's header is null and mode is float to make transition\n      // between screens with headers and those without headers smooth.\n      // This is not a great heuristic here. We don't know synchronously\n      // on mount what the header height is so we have just used the most\n      // common cases here.\n      headerHeights: {}\n    };\n  }\n  handleLayout = e => {\n    const {\n      height,\n      width\n    } = e.nativeEvent.layout;\n    const layout = {\n      width,\n      height\n    };\n    this.setState((state, props) => {\n      if (height === state.layout.height && width === state.layout.width) {\n        return null;\n      }\n      return {\n        layout,\n        headerHeights: getHeaderHeights(state.scenes, props.insets, props.isParentHeaderShown, props.isParentModal, layout, state.headerHeights)\n      };\n    });\n  };\n  handleHeaderLayout = _ref => {\n    let {\n      route,\n      height\n    } = _ref;\n    this.setState(_ref2 => {\n      let {\n        headerHeights\n      } = _ref2;\n      const previousHeight = headerHeights[route.key];\n      if (previousHeight === height) {\n        return null;\n      }\n      return {\n        headerHeights: {\n          ...headerHeights,\n          [route.key]: height\n        }\n      };\n    });\n  };\n  getFocusedRoute = () => {\n    const {\n      state\n    } = this.props;\n    return state.routes[state.index];\n  };\n  getPreviousScene = _ref3 => {\n    let {\n      route\n    } = _ref3;\n    const {\n      getPreviousRoute\n    } = this.props;\n    const {\n      scenes\n    } = this.state;\n    const previousRoute = getPreviousRoute({\n      route\n    });\n    if (previousRoute) {\n      const previousScene = scenes.find(scene => scene.descriptor.route.key === previousRoute.key);\n      return previousScene;\n    }\n    return undefined;\n  };\n  render() {\n    const {\n      insets,\n      state,\n      routes,\n      closingRouteKeys,\n      onOpenRoute,\n      onCloseRoute,\n      renderHeader,\n      renderScene,\n      isParentHeaderShown,\n      isParentModal,\n      onTransitionStart,\n      onTransitionEnd,\n      onGestureStart,\n      onGestureEnd,\n      onGestureCancel,\n      detachInactiveScreens = Platform.OS === 'web' || Platform.OS === 'android' || Platform.OS === 'ios'\n    } = this.props;\n    const {\n      scenes,\n      layout,\n      gestures,\n      headerHeights\n    } = this.state;\n    const focusedRoute = state.routes[state.index];\n    const focusedHeaderHeight = headerHeights[focusedRoute.key];\n    const isFloatHeaderAbsolute = this.state.scenes.slice(-2).some(scene => {\n      const options = scene.descriptor.options ?? {};\n      const {\n        headerMode,\n        headerTransparent,\n        headerShown = true\n      } = options;\n      if (headerTransparent || headerShown === false || headerMode === 'screen') {\n        return true;\n      }\n      return false;\n    });\n    let activeScreensLimit = 1;\n    for (let i = scenes.length - 1; i >= 0; i--) {\n      const {\n        options\n      } = scenes[i].descriptor;\n      const {\n        // By default, we don't want to detach the previous screen of the active one for modals\n        detachPreviousScreen = options.presentation === 'transparentModal' ? false : getIsModalPresentation(options.cardStyleInterpolator) ? i !== findLastIndex(scenes, scene => {\n          const {\n            cardStyleInterpolator\n          } = scene.descriptor.options;\n          return cardStyleInterpolator === forModalPresentationIOS || (cardStyleInterpolator === null || cardStyleInterpolator === void 0 ? void 0 : cardStyleInterpolator.name) === 'forModalPresentationIOS';\n        }) : true\n      } = options;\n      if (detachPreviousScreen === false) {\n        activeScreensLimit++;\n      } else {\n        // Check at least last 2 screens before stopping\n        // This will make sure that screen isn't detached when another screen is animating on top of the transparent one\n        // For example, (Opaque -> Transparent -> Opaque)\n        if (i <= scenes.length - 2) {\n          break;\n        }\n      }\n    }\n    const floatingHeader = /*#__PURE__*/React.createElement(React.Fragment, {\n      key: \"header\"\n    }, renderHeader({\n      mode: 'float',\n      layout,\n      scenes,\n      getPreviousScene: this.getPreviousScene,\n      getFocusedRoute: this.getFocusedRoute,\n      onContentHeightChange: this.handleHeaderLayout,\n      style: [styles.floating, isFloatHeaderAbsolute && [\n      // Without this, the header buttons won't be touchable on Android when headerTransparent: true\n      {\n        height: focusedHeaderHeight\n      }, styles.absolute]]\n    }));\n    return /*#__PURE__*/React.createElement(Background, null, isFloatHeaderAbsolute ? null : floatingHeader, /*#__PURE__*/React.createElement(MaybeScreenContainer, {\n      enabled: detachInactiveScreens,\n      style: styles.container,\n      onLayout: this.handleLayout\n    }, routes.map((route, index, self) => {\n      var _scenes, _scenes2;\n      const focused = focusedRoute.key === route.key;\n      const gesture = gestures[route.key];\n      const scene = scenes[index];\n\n      // For the screens that shouldn't be active, the value is 0\n      // For those that should be active, but are not the top screen, the value is 1\n      // For those on top of the stack and with interaction enabled, the value is 2\n      // For the old implementation, it stays the same it was\n      let isScreenActive = 1;\n      if (index < self.length - activeScreensLimit - 1) {\n        // screen should be inactive because it is too deep in the stack\n        isScreenActive = STATE_INACTIVE;\n      } else {\n        const sceneForActivity = scenes[self.length - 1];\n        const outputValue = index === self.length - 1 ? STATE_ON_TOP // the screen is on top after the transition\n        : index >= self.length - activeScreensLimit ? STATE_TRANSITIONING_OR_BELOW_TOP // the screen should stay active after the transition, it is not on top but is in activeLimit\n        : STATE_INACTIVE; // the screen should be active only during the transition, it is at the edge of activeLimit\n        isScreenActive = sceneForActivity ? sceneForActivity.progress.current.interpolate({\n          inputRange: [0, 1 - EPSILON, 1],\n          outputRange: [1, 1, outputValue],\n          extrapolate: 'clamp'\n        }) : STATE_TRANSITIONING_OR_BELOW_TOP;\n      }\n      const {\n        headerShown = true,\n        headerTransparent,\n        headerStyle,\n        headerTintColor,\n        freezeOnBlur\n      } = scene.descriptor.options;\n      const safeAreaInsetTop = insets.top;\n      const safeAreaInsetRight = insets.right;\n      const safeAreaInsetBottom = insets.bottom;\n      const safeAreaInsetLeft = insets.left;\n      const headerHeight = headerShown !== false ? headerHeights[route.key] : 0;\n      let headerDarkContent;\n      if (headerShown) {\n        if (typeof headerTintColor === 'string') {\n          headerDarkContent = Color(headerTintColor).isDark();\n        } else {\n          const flattenedHeaderStyle = StyleSheet.flatten(headerStyle);\n          if (flattenedHeaderStyle && 'backgroundColor' in flattenedHeaderStyle && typeof flattenedHeaderStyle.backgroundColor === 'string') {\n            headerDarkContent = !Color(flattenedHeaderStyle.backgroundColor).isDark();\n          }\n        }\n      }\n\n      // Start from current card and count backwards the number of cards with same interpolation\n      const interpolationIndex = getInterpolationIndex(scenes, index);\n      const isModal = getIsModal(scene, interpolationIndex, isParentModal);\n      const isNextScreenTransparent = ((_scenes = scenes[index + 1]) === null || _scenes === void 0 ? void 0 : _scenes.descriptor.options.presentation) === 'transparentModal';\n      const detachCurrentScreen = ((_scenes2 = scenes[index + 1]) === null || _scenes2 === void 0 ? void 0 : _scenes2.descriptor.options.detachPreviousScreen) !== false;\n      return /*#__PURE__*/React.createElement(MaybeScreen, {\n        key: route.key,\n        style: StyleSheet.absoluteFill,\n        enabled: detachInactiveScreens,\n        active: isScreenActive,\n        freezeOnBlur: freezeOnBlur,\n        pointerEvents: \"box-none\"\n      }, /*#__PURE__*/React.createElement(CardContainer, {\n        index: index,\n        interpolationIndex: interpolationIndex,\n        modal: isModal,\n        active: index === self.length - 1,\n        focused: focused,\n        closing: closingRouteKeys.includes(route.key),\n        layout: layout,\n        gesture: gesture,\n        scene: scene,\n        safeAreaInsetTop: safeAreaInsetTop,\n        safeAreaInsetRight: safeAreaInsetRight,\n        safeAreaInsetBottom: safeAreaInsetBottom,\n        safeAreaInsetLeft: safeAreaInsetLeft,\n        onGestureStart: onGestureStart,\n        onGestureCancel: onGestureCancel,\n        onGestureEnd: onGestureEnd,\n        headerHeight: headerHeight,\n        isParentHeaderShown: isParentHeaderShown,\n        onHeaderHeightChange: this.handleHeaderLayout,\n        getPreviousScene: this.getPreviousScene,\n        getFocusedRoute: this.getFocusedRoute,\n        headerDarkContent: headerDarkContent,\n        hasAbsoluteFloatHeader: isFloatHeaderAbsolute && !headerTransparent,\n        renderHeader: renderHeader,\n        renderScene: renderScene,\n        onOpenRoute: onOpenRoute,\n        onCloseRoute: onCloseRoute,\n        onTransitionStart: onTransitionStart,\n        onTransitionEnd: onTransitionEnd,\n        isNextScreenTransparent: isNextScreenTransparent,\n        detachCurrentScreen: detachCurrentScreen\n      }));\n    })), isFloatHeaderAbsolute ? floatingHeader : null);\n  }\n}\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1\n  },\n  absolute: {\n    position: 'absolute',\n    top: 0,\n    left: 0,\n    right: 0\n  },\n  floating: {\n    zIndex: 1\n  }\n});\n//# sourceMappingURL=CardStack.js.map"]},"metadata":{},"sourceType":"module"}