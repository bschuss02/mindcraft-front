{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nvar _excluded = [\"icon\", \"inputProps\", \"combinedProps\", \"children\", \"wrapperRef\", \"isHovered\", \"isPressed\", \"isFocused\", \"isFocusVisible\"],\n    _excluded2 = [\"_interactionBox\", \"_icon\", \"_stack\", \"_text\"],\n    _excluded3 = [\"icon\", \"children\", \"wrapperRef\", \"isHovered\", \"isPressed\", \"isFocused\", \"isFocusVisible\"];\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nimport React, { memo, forwardRef } from 'react';\nimport stableHash from 'stable-hash';\nimport Box from \"../Box\";\nimport { Stack } from \"../Stack\";\nimport { Center } from \"../../composites/Center\";\nimport { usePropsResolution } from \"../../../hooks/useThemeProps\";\nimport { wrapStringChild } from \"../../../utils/wrapStringChild\";\nimport { mergeRefs } from \"./../../../utils\";\nimport { useHover } from '@react-native-aria/interactions';\nimport { useRadio } from '@react-native-aria/radio';\nimport { VisuallyHidden } from '@react-aria/visually-hidden';\nimport { RadioContext } from \"./RadioGroup\";\nimport { useFocusRing } from '@react-native-aria/focus';\nimport { CircleIcon } from \"../Icon/Icons\";\nimport { useHasResponsiveProps } from \"../../../hooks/useHasResponsiveProps\";\nimport { combineContextAndProps, isEmptyObj } from \"../../../utils\";\nimport { useFormControlContext } from \"../../composites/FormControl\";\nvar RadioComponent = memo(forwardRef(function (_ref2, ref) {\n  var icon = _ref2.icon,\n      inputProps = _ref2.inputProps,\n      combinedProps = _ref2.combinedProps,\n      children = _ref2.children,\n      wrapperRef = _ref2.wrapperRef,\n      isHoveredProp = _ref2.isHovered,\n      isPressedProp = _ref2.isPressed,\n      isFocusedProp = _ref2.isFocused,\n      isFocusVisibleProp = _ref2.isFocusVisible,\n      props = _objectWithoutProperties(_ref2, _excluded);\n\n  var isInvalid = combinedProps.isInvalid,\n      isReadOnly = combinedProps.isReadOnly,\n      isIndeterminate = combinedProps.isIndeterminate;\n  var isDisabled = inputProps.disabled,\n      isChecked = inputProps.checked;\n\n  var _ref = React.useRef(null);\n\n  var _useHover = useHover({}, _ref),\n      isHovered = _useHover.isHovered;\n\n  var mergedRefs = mergeRefs([_ref, wrapperRef]);\n\n  var _useFocusRing = useFocusRing(),\n      focusProps = _useFocusRing.focusProps,\n      isFocusVisible = _useFocusRing.isFocusVisible;\n\n  var _React$useState = React.useState(isFocusedProp),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      isFocused = _React$useState2[0],\n      setFocused = _React$useState2[1];\n\n  var _React$useState3 = React.useState(isPressedProp),\n      _React$useState4 = _slicedToArray(_React$useState3, 2),\n      isPressed = _React$useState4[0],\n      setPressed = _React$useState4[1];\n\n  var handleFocus = function handleFocus() {\n    setFocused(true);\n  };\n\n  var handleBlur = function handleBlur() {\n    isFocusedProp ? setFocused(true) : setFocused(false);\n  };\n\n  var handlePressIn = function handlePressIn() {\n    setPressed(true);\n  };\n\n  var handlePressOut = function handlePressOut() {\n    isPressedProp ? setPressed(true) : setPressed(false);\n  };\n\n  var _usePropsResolution = usePropsResolution('Radio', combinedProps, {\n    isInvalid: isInvalid,\n    isReadOnly: isReadOnly,\n    isFocusVisible: isFocusVisibleProp || isFocused || isFocusVisible,\n    isDisabled: isDisabled,\n    isIndeterminate: isIndeterminate,\n    isChecked: isChecked,\n    isHovered: isHoveredProp || isHovered,\n    isPressed: isPressed,\n    isFocused: isFocused\n  }),\n      _interactionBox = _usePropsResolution._interactionBox,\n      _icon = _usePropsResolution._icon,\n      _stack = _usePropsResolution._stack,\n      _text = _usePropsResolution._text,\n      resolvedProps = _objectWithoutProperties(_usePropsResolution, _excluded2);\n\n  var sizedIcon = function sizedIcon() {\n    return React.cloneElement(icon, _objectSpread({}, _icon));\n  };\n\n  var component = React.createElement(Stack, _stack, React.createElement(Center, null, React.createElement(Box, _interactionBox), React.createElement(Center, resolvedProps, icon && sizedIcon && isChecked ? sizedIcon() : React.createElement(CircleIcon, _extends({}, _icon, {\n    opacity: isChecked ? 1 : 0\n  })))), wrapStringChild(children, _text));\n\n  if (useHasResponsiveProps(props)) {\n    return null;\n  }\n\n  return React.createElement(Box, {\n    accessibilityRole: \"label\",\n    ref: mergedRefs\n  }, React.createElement(\"div\", {\n    onMouseDown: handlePressIn,\n    onMouseUp: handlePressOut\n  }, React.createElement(VisuallyHidden, null, React.createElement(\"input\", _extends({}, inputProps, focusProps, {\n    ref: ref,\n    onFocus: handleFocus,\n    onBlur: handleBlur\n  }))), component));\n}));\n\nvar Radio = function Radio(_ref3, ref) {\n  var icon = _ref3.icon,\n      children = _ref3.children,\n      wrapperRef = _ref3.wrapperRef,\n      isHoveredProp = _ref3.isHovered,\n      isPressed = _ref3.isPressed,\n      isFocusedProp = _ref3.isFocused,\n      isFocusVisibleProp = _ref3.isFocusVisible,\n      props = _objectWithoutProperties(_ref3, _excluded3);\n\n  var _contextState$state;\n\n  var formControlContext = useFormControlContext();\n  var contextState = React.useContext(RadioContext);\n  var combinedProps = combineContextAndProps(_objectSpread(_objectSpread({}, formControlContext), contextState), props);\n  var inputRef = React.useRef(null);\n  var radioState = useRadio(_objectSpread(_objectSpread({}, combinedProps), {}, {\n    'aria-label': props.accessibilityLabel,\n    children: children\n  }), (_contextState$state = contextState.state) !== null && _contextState$state !== void 0 ? _contextState$state : {}, inputRef);\n  var inputProps = React.useMemo(function () {\n    return radioState.inputProps;\n  }, [radioState.inputProps.checked, radioState.inputProps.disabled]);\n  var contextCombinedProps = React.useMemo(function () {\n    return _objectSpread({}, combinedProps);\n  }, [stableHash(combinedProps)]);\n\n  if (useHasResponsiveProps(props)) {\n    return null;\n  }\n\n  if (isEmptyObj(contextState)) {\n    console.error('Error: Radio must be wrapped inside a Radio.Group');\n    return React.createElement(React.Fragment, null);\n  }\n\n  return React.createElement(RadioComponent, {\n    inputProps: inputProps,\n    combinedProps: contextCombinedProps,\n    children: children,\n    ref: ref,\n    icon: icon,\n    wrapperRef: wrapperRef,\n    isHovered: isHoveredProp,\n    isPressed: isPressed,\n    isFocused: isFocusedProp,\n    isFocusVisible: isFocusVisibleProp\n  });\n};\n\nexport default memo(forwardRef(Radio));","map":{"version":3,"sources":["Radio.web.tsx"],"names":["RadioComponent","memo","forwardRef","isHovered","isPressed","isFocused","isFocusVisible","props","isIndeterminate","disabled","checked","isChecked","_ref","React","useHover","mergedRefs","mergeRefs","useFocusRing","handleFocus","setFocused","handleBlur","isFocusedProp","handlePressIn","setPressed","handlePressOut","isPressedProp","resolvedProps","usePropsResolution","isInvalid","isReadOnly","isFocusVisibleProp","isDisabled","isHoveredProp","sizedIcon","_icon","component","icon","wrapStringChild","useHasResponsiveProps","Radio","formControlContext","useFormControlContext","contextState","combinedProps","combineContextAndProps","inputRef","radioState","useRadio","children","inputProps","contextCombinedProps","stableHash","isEmptyObj","console"],"mappings":"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","sourcesContent":["import React, { memo, forwardRef } from 'react';\n//@ts-ignore\nimport stableHash from 'stable-hash';\nimport Box from '../Box';\nimport { Stack } from '../Stack';\nimport { Center } from '../../composites/Center';\nimport { usePropsResolution } from '../../../hooks/useThemeProps';\nimport { wrapStringChild } from '../../../utils/wrapStringChild';\nimport type { IRadioProps } from './types';\nimport { mergeRefs } from './../../../utils';\nimport { useHover } from '@react-native-aria/interactions';\nimport { useRadio } from '@react-native-aria/radio';\nimport { VisuallyHidden } from '@react-aria/visually-hidden';\nimport { RadioContext } from './RadioGroup';\nimport { useFocusRing } from '@react-native-aria/focus';\nimport { CircleIcon } from '../Icon/Icons';\nimport { useHasResponsiveProps } from '../../../hooks/useHasResponsiveProps';\nimport { combineContextAndProps, isEmptyObj } from '../../../utils';\nimport { useFormControlContext } from '../../composites/FormControl';\nconst RadioComponent = memo(\n  forwardRef(\n    (\n      {\n        icon,\n        inputProps,\n        combinedProps,\n        children,\n        wrapperRef,\n        isHovered: isHoveredProp,\n        isPressed: isPressedProp,\n        isFocused: isFocusedProp,\n        isFocusVisible: isFocusVisibleProp,\n        ...props\n      }: any,\n      ref: any\n    ) => {\n      const { isInvalid, isReadOnly, isIndeterminate } = combinedProps;\n      const { disabled: isDisabled, checked: isChecked } = inputProps;\n      const _ref = React.useRef(null);\n      const { isHovered } = useHover({}, _ref);\n      const mergedRefs = mergeRefs([_ref, wrapperRef]);\n      const { focusProps, isFocusVisible } = useFocusRing();\n      const [isFocused, setFocused] = React.useState(isFocusedProp);\n      const [isPressed, setPressed] = React.useState(isPressedProp);\n      const handleFocus = () => {\n        setFocused(true);\n      };\n      const handleBlur = () => {\n        isFocusedProp ? setFocused(true) : setFocused(false);\n      };\n      const handlePressIn = () => {\n        setPressed(true);\n      };\n\n      const handlePressOut = () => {\n        isPressedProp ? setPressed(true) : setPressed(false);\n      };\n      const {\n        _interactionBox,\n        _icon,\n        _stack,\n        _text,\n        ...resolvedProps\n      } = usePropsResolution('Radio', combinedProps, {\n        isInvalid,\n        isReadOnly,\n        isFocusVisible: isFocusVisibleProp || isFocused || isFocusVisible,\n        isDisabled,\n        isIndeterminate,\n        isChecked,\n        isHovered: isHoveredProp || isHovered,\n        isPressed,\n        isFocused,\n      });\n\n      // only calling below function when icon exist.\n      const sizedIcon = () =>\n        //@ts-ignore\n        React.cloneElement(icon, {\n          ..._icon,\n        });\n\n      const component = (\n        <Stack {..._stack}>\n          <Center>\n            {/* Interaction Box */}\n            <Box {..._interactionBox} />\n            {/* Radio */}\n            <Center {...resolvedProps}>\n              {icon && sizedIcon && isChecked ? (\n                sizedIcon()\n              ) : (\n                <CircleIcon {..._icon} opacity={isChecked ? 1 : 0} />\n              )}\n            </Center>\n          </Center>\n          {wrapStringChild(children, _text)}\n        </Stack>\n      );\n      //TODO: refactor for responsive prop\n      if (useHasResponsiveProps(props)) {\n        return null;\n      }\n\n      return (\n        <Box\n          // @ts-ignore - RN web supports accessibilityRole=\"label\"\n          accessibilityRole=\"label\"\n          ref={mergedRefs}\n        >\n          <div onMouseDown={handlePressIn} onMouseUp={handlePressOut}>\n            <VisuallyHidden>\n              <input\n                {...inputProps}\n                {...focusProps}\n                ref={ref}\n                onFocus={handleFocus}\n                onBlur={handleBlur}\n              />\n            </VisuallyHidden>\n            {component}\n          </div>\n        </Box>\n      );\n    }\n  )\n);\n\nconst Radio = (\n  {\n    icon,\n    children,\n    wrapperRef,\n    isHovered: isHoveredProp,\n    isPressed,\n    isFocused: isFocusedProp,\n    isFocusVisible: isFocusVisibleProp,\n    ...props\n  }: IRadioProps,\n  ref: any\n) => {\n  const formControlContext = useFormControlContext();\n  const contextState = React.useContext(RadioContext);\n\n  const combinedProps = combineContextAndProps(\n    { ...formControlContext, ...contextState },\n    props\n  );\n\n  const inputRef = React.useRef(null);\n  const radioState = useRadio(\n    { ...combinedProps, 'aria-label': props.accessibilityLabel, children },\n    contextState.state ?? {},\n    inputRef\n  );\n\n  //@ts-ignore\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  const inputProps = React.useMemo(() => radioState.inputProps, [\n    radioState.inputProps.checked,\n    radioState.inputProps.disabled,\n  ]);\n\n  const contextCombinedProps = React.useMemo(() => {\n    return { ...combinedProps };\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [stableHash(combinedProps)]);\n\n  //TODO: refactor for responsive prop\n  if (useHasResponsiveProps(props)) {\n    return null;\n  }\n  if (isEmptyObj(contextState)) {\n    console.error('Error: Radio must be wrapped inside a Radio.Group');\n    return <></>;\n  }\n\n  return (\n    <RadioComponent\n      inputProps={inputProps}\n      combinedProps={contextCombinedProps}\n      children={children}\n      ref={ref}\n      icon={icon}\n      wrapperRef={wrapperRef}\n      isHovered={isHoveredProp}\n      isPressed={isPressed}\n      isFocused={isFocusedProp}\n      isFocusVisible={isFocusVisibleProp}\n    />\n  );\n};\n\nexport default memo(forwardRef(Radio));\n"]},"metadata":{},"sourceType":"module"}