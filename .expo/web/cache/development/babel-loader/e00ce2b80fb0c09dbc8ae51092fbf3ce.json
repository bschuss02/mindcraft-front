{"ast":null,"code":"import _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nvar _excluded = [\"id\", \"initialRouteName\", \"defaultStatus\", \"backBehavior\", \"children\", \"screenListeners\", \"screenOptions\"],\n    _excluded2 = [\"openByDefault\", \"lazy\", \"drawerContentOptions\"];\n\nfunction _extends() {\n  _extends = Object.assign ? Object.assign.bind() : function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n  return _extends.apply(this, arguments);\n}\n\nimport { createNavigatorFactory, DrawerRouter, useNavigationBuilder } from '@react-navigation/native';\nimport * as React from 'react';\nimport warnOnce from 'warn-once';\nimport DrawerView from \"../views/DrawerView\";\n\nfunction DrawerNavigator(_ref) {\n  var id = _ref.id,\n      initialRouteName = _ref.initialRouteName,\n      customDefaultStatus = _ref.defaultStatus,\n      backBehavior = _ref.backBehavior,\n      children = _ref.children,\n      screenListeners = _ref.screenListeners,\n      screenOptions = _ref.screenOptions,\n      restWithDeprecated = _objectWithoutProperties(_ref, _excluded);\n\n  var openByDefault = restWithDeprecated.openByDefault,\n      lazy = restWithDeprecated.lazy,\n      drawerContentOptions = restWithDeprecated.drawerContentOptions,\n      rest = _objectWithoutProperties(restWithDeprecated, _excluded2);\n\n  var defaultScreenOptions = {};\n\n  if (drawerContentOptions) {\n    Object.assign(defaultScreenOptions, {\n      drawerPosition: drawerContentOptions.drawerPosition,\n      drawerType: drawerContentOptions.drawerType,\n      swipeEdgeWidth: drawerContentOptions.edgeWidth,\n      drawerHideStatusBarOnOpen: drawerContentOptions.hideStatusBar,\n      keyboardDismissMode: drawerContentOptions.keyboardDismissMode,\n      swipeMinDistance: drawerContentOptions.minSwipeDistance,\n      overlayColor: drawerContentOptions.overlayColor,\n      drawerStatusBarAnimation: drawerContentOptions.statusBarAnimation,\n      gestureHandlerProps: drawerContentOptions.gestureHandlerProps\n    });\n    Object.keys(defaultScreenOptions).forEach(function (key) {\n      if (defaultScreenOptions[key] === undefined) {\n        delete defaultScreenOptions[key];\n      }\n    });\n    warnOnce(drawerContentOptions, \"Drawer Navigator: 'drawerContentOptions' is deprecated. Migrate the options to 'screenOptions' instead.\\n\\nPlace the following in 'screenOptions' in your code to keep current behavior:\\n\\n\" + JSON.stringify(defaultScreenOptions, null, 2) + \"\\n\\nSee https://reactnavigation.org/docs/drawer-navigator#options for more details.\");\n  }\n\n  if (typeof lazy === 'boolean') {\n    defaultScreenOptions.lazy = lazy;\n    warnOnce(true, \"Drawer Navigator: 'lazy' in props is deprecated. Move it to 'screenOptions' instead.\\n\\nSee https://reactnavigation.org/docs/drawer-navigator/#lazy for more details.\");\n  }\n\n  if (typeof openByDefault === 'boolean') {\n    warnOnce(true, \"Drawer Navigator: 'openByDefault' is deprecated. Use 'defaultStatus' and set it to 'open' or 'closed' instead.\\n\\nSee https://reactnavigation.org/docs/drawer-navigator/#defaultstatus for more details.\");\n  }\n\n  var defaultStatus = customDefaultStatus !== undefined ? customDefaultStatus : openByDefault ? 'open' : 'closed';\n\n  var _useNavigationBuilder = useNavigationBuilder(DrawerRouter, {\n    id: id,\n    initialRouteName: initialRouteName,\n    defaultStatus: defaultStatus,\n    backBehavior: backBehavior,\n    children: children,\n    screenListeners: screenListeners,\n    screenOptions: screenOptions,\n    defaultScreenOptions: defaultScreenOptions\n  }),\n      state = _useNavigationBuilder.state,\n      descriptors = _useNavigationBuilder.descriptors,\n      navigation = _useNavigationBuilder.navigation,\n      NavigationContent = _useNavigationBuilder.NavigationContent;\n\n  return React.createElement(NavigationContent, null, React.createElement(DrawerView, _extends({}, rest, {\n    defaultStatus: defaultStatus,\n    state: state,\n    descriptors: descriptors,\n    navigation: navigation\n  })));\n}\n\nexport default createNavigatorFactory(DrawerNavigator);","map":{"version":3,"sources":["navigators/createDrawerNavigator.tsx"],"names":["createNavigatorFactory","DrawerRouter","useNavigationBuilder","React","warnOnce","DrawerView","DrawerNavigator","id","initialRouteName","defaultStatus","customDefaultStatus","backBehavior","children","screenListeners","screenOptions","restWithDeprecated","openByDefault","lazy","drawerContentOptions","rest","defaultScreenOptions","Object","assign","drawerPosition","drawerType","swipeEdgeWidth","edgeWidth","drawerHideStatusBarOnOpen","hideStatusBar","keyboardDismissMode","swipeMinDistance","minSwipeDistance","overlayColor","drawerStatusBarAnimation","statusBarAnimation","gestureHandlerProps","keys","forEach","key","undefined","JSON","stringify","state","descriptors","navigation","NavigationContent"],"mappings":"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","sourceRoot":"../../../src","sourcesContent":["function _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\nimport { createNavigatorFactory, DrawerRouter, useNavigationBuilder } from '@react-navigation/native';\nimport * as React from 'react';\nimport warnOnce from 'warn-once';\nimport DrawerView from '../views/DrawerView';\nfunction DrawerNavigator(_ref) {\n  let {\n    id,\n    initialRouteName,\n    defaultStatus: customDefaultStatus,\n    backBehavior,\n    children,\n    screenListeners,\n    screenOptions,\n    ...restWithDeprecated\n  } = _ref;\n  const {\n    // @ts-expect-error: openByDefault is deprecated\n    openByDefault,\n    // @ts-expect-error: lazy is deprecated\n    lazy,\n    // @ts-expect-error: drawerContentOptions is deprecated\n    drawerContentOptions,\n    ...rest\n  } = restWithDeprecated;\n  let defaultScreenOptions = {};\n  if (drawerContentOptions) {\n    Object.assign(defaultScreenOptions, {\n      drawerPosition: drawerContentOptions.drawerPosition,\n      drawerType: drawerContentOptions.drawerType,\n      swipeEdgeWidth: drawerContentOptions.edgeWidth,\n      drawerHideStatusBarOnOpen: drawerContentOptions.hideStatusBar,\n      keyboardDismissMode: drawerContentOptions.keyboardDismissMode,\n      swipeMinDistance: drawerContentOptions.minSwipeDistance,\n      overlayColor: drawerContentOptions.overlayColor,\n      drawerStatusBarAnimation: drawerContentOptions.statusBarAnimation,\n      gestureHandlerProps: drawerContentOptions.gestureHandlerProps\n    });\n    Object.keys(defaultScreenOptions).forEach(key => {\n      if (defaultScreenOptions[key] === undefined) {\n        // eslint-disable-next-line @typescript-eslint/no-dynamic-delete\n        delete defaultScreenOptions[key];\n      }\n    });\n    warnOnce(drawerContentOptions, `Drawer Navigator: 'drawerContentOptions' is deprecated. Migrate the options to 'screenOptions' instead.\\n\\nPlace the following in 'screenOptions' in your code to keep current behavior:\\n\\n${JSON.stringify(defaultScreenOptions, null, 2)}\\n\\nSee https://reactnavigation.org/docs/drawer-navigator#options for more details.`);\n  }\n  if (typeof lazy === 'boolean') {\n    defaultScreenOptions.lazy = lazy;\n    warnOnce(true, `Drawer Navigator: 'lazy' in props is deprecated. Move it to 'screenOptions' instead.\\n\\nSee https://reactnavigation.org/docs/drawer-navigator/#lazy for more details.`);\n  }\n  if (typeof openByDefault === 'boolean') {\n    warnOnce(true, `Drawer Navigator: 'openByDefault' is deprecated. Use 'defaultStatus' and set it to 'open' or 'closed' instead.\\n\\nSee https://reactnavigation.org/docs/drawer-navigator/#defaultstatus for more details.`);\n  }\n  const defaultStatus = customDefaultStatus !== undefined ? customDefaultStatus : openByDefault ? 'open' : 'closed';\n  const {\n    state,\n    descriptors,\n    navigation,\n    NavigationContent\n  } = useNavigationBuilder(DrawerRouter, {\n    id,\n    initialRouteName,\n    defaultStatus,\n    backBehavior,\n    children,\n    screenListeners,\n    screenOptions,\n    defaultScreenOptions\n  });\n  return /*#__PURE__*/React.createElement(NavigationContent, null, /*#__PURE__*/React.createElement(DrawerView, _extends({}, rest, {\n    defaultStatus: defaultStatus,\n    state: state,\n    descriptors: descriptors,\n    navigation: navigation\n  })));\n}\nexport default createNavigatorFactory(DrawerNavigator);\n//# sourceMappingURL=createDrawerNavigator.js.map"]},"metadata":{},"sourceType":"module"}