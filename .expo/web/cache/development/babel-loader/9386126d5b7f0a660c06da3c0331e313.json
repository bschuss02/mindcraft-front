{"ast":null,"code":"import { hsvToColor, RGBtoHSV, rgbaColor, processColor, red, green, blue, opacity } from \"./Colors\";\nimport { makeMutable } from \"./core\";\nimport { interpolate } from \"./interpolation\";\nimport { Extrapolate } from \"../reanimated1/derived\";\nimport { useSharedValue } from \"./hook/useSharedValue\";\n\nvar interpolateColorsHSV = function () {\n  var _f = function _f(value, inputRange, colors, options) {\n    var h = 0;\n    var _options$useCorrected = options.useCorrectedHSVInterpolation,\n        useCorrectedHSVInterpolation = _options$useCorrected === void 0 ? true : _options$useCorrected;\n\n    if (useCorrectedHSVInterpolation) {\n      var correctedInputRange = [inputRange[0]];\n      var originalH = colors.h;\n      var correctedH = [originalH[0]];\n\n      for (var i = 1; i < originalH.length; ++i) {\n        var d = originalH[i] - originalH[i - 1];\n\n        if (originalH[i] > originalH[i - 1] && d > 0.5) {\n          correctedInputRange.push(inputRange[i]);\n          correctedInputRange.push(inputRange[i] + 0.00001);\n          correctedH.push(originalH[i] - 1);\n          correctedH.push(originalH[i]);\n        } else if (originalH[i] < originalH[i - 1] && d < -0.5) {\n          correctedInputRange.push(inputRange[i]);\n          correctedInputRange.push(inputRange[i] + 0.00001);\n          correctedH.push(originalH[i] + 1);\n          correctedH.push(originalH[i]);\n        } else {\n          correctedInputRange.push(inputRange[i]);\n          correctedH.push(originalH[i]);\n        }\n      }\n\n      h = (interpolate(value, correctedInputRange, correctedH, Extrapolate.CLAMP) + 1) % 1;\n    } else {\n      h = interpolate(value, inputRange, colors.h, Extrapolate.CLAMP);\n    }\n\n    var s = interpolate(value, inputRange, colors.s, Extrapolate.CLAMP);\n    var v = interpolate(value, inputRange, colors.v, Extrapolate.CLAMP);\n    var a = interpolate(value, inputRange, colors.a, Extrapolate.CLAMP);\n    return hsvToColor(h, s, v, a);\n  };\n\n  _f._closure = {\n    interpolate: interpolate,\n    Extrapolate: {\n      CLAMP: Extrapolate.CLAMP\n    },\n    hsvToColor: hsvToColor\n  };\n  _f.asString = \"function _f(value,inputRange,colors,options){const{interpolate,Extrapolate,hsvToColor}=jsThis._closure;{let h=0;const{useCorrectedHSVInterpolation=true}=options;if(useCorrectedHSVInterpolation){const correctedInputRange=[inputRange[0]];const originalH=colors.h;const correctedH=[originalH[0]];for(let i=1;i<originalH.length;++i){const d=originalH[i]-originalH[i-1];if(originalH[i]>originalH[i-1]&&d>0.5){correctedInputRange.push(inputRange[i]);correctedInputRange.push(inputRange[i]+0.00001);correctedH.push(originalH[i]-1);correctedH.push(originalH[i]);}else if(originalH[i]<originalH[i-1]&&d<-0.5){correctedInputRange.push(inputRange[i]);correctedInputRange.push(inputRange[i]+0.00001);correctedH.push(originalH[i]+1);correctedH.push(originalH[i]);}else{correctedInputRange.push(inputRange[i]);correctedH.push(originalH[i]);}}h=(interpolate(value,correctedInputRange,correctedH,Extrapolate.CLAMP)+1)%1;}else{h=interpolate(value,inputRange,colors.h,Extrapolate.CLAMP);}const s=interpolate(value,inputRange,colors.s,Extrapolate.CLAMP);const v=interpolate(value,inputRange,colors.v,Extrapolate.CLAMP);const a=interpolate(value,inputRange,colors.a,Extrapolate.CLAMP);return hsvToColor(h,s,v,a);}}\";\n  _f.__workletHash = 8882134826991;\n  _f.__location = \"/Users/Benjamin/Dev/hoohacks/mindcraft-front/node_modules/react-native-reanimated/lib/reanimated2/interpolateColor.js (7:29)\";\n  return _f;\n}();\n\nvar toLinearSpace = function () {\n  var _f = function _f(x, gamma) {\n    return x.map(function (v) {\n      return Math.pow(v / 255, gamma);\n    });\n  };\n\n  _f._closure = {};\n  _f.asString = \"function _f(x,gamma){return x.map(function(v){return Math.pow(v/255,gamma);});}\";\n  _f.__workletHash = 1559524611463;\n  _f.__location = \"/Users/Benjamin/Dev/hoohacks/mindcraft-front/node_modules/react-native-reanimated/lib/reanimated2/interpolateColor.js (51:22)\";\n  return _f;\n}();\n\nvar toGammaSpace = function () {\n  var _f = function _f(x, gamma) {\n    return Math.round(Math.pow(x, 1 / gamma) * 255);\n  };\n\n  _f._closure = {};\n  _f.asString = \"function _f(x,gamma){return Math.round(Math.pow(x,1/gamma)*255);}\";\n  _f.__workletHash = 2913845988966;\n  _f.__location = \"/Users/Benjamin/Dev/hoohacks/mindcraft-front/node_modules/react-native-reanimated/lib/reanimated2/interpolateColor.js (55:21)\";\n  return _f;\n}();\n\nvar interpolateColorsRGB = function () {\n  var _f = function _f(value, inputRange, colors, options) {\n    var _options$gamma = options.gamma,\n        gamma = _options$gamma === void 0 ? 2.2 : _options$gamma;\n    var outputR = colors.r,\n        outputG = colors.g,\n        outputB = colors.b;\n\n    if (gamma !== 1) {\n      outputR = toLinearSpace(outputR, gamma);\n      outputG = toLinearSpace(outputG, gamma);\n      outputB = toLinearSpace(outputB, gamma);\n    }\n\n    var r = interpolate(value, inputRange, outputR, Extrapolate.CLAMP);\n    var g = interpolate(value, inputRange, outputG, Extrapolate.CLAMP);\n    var b = interpolate(value, inputRange, outputB, Extrapolate.CLAMP);\n    var a = interpolate(value, inputRange, colors.a, Extrapolate.CLAMP);\n\n    if (gamma === 1) {\n      return rgbaColor(r, g, b, a);\n    }\n\n    return rgbaColor(toGammaSpace(r, gamma), toGammaSpace(g, gamma), toGammaSpace(b, gamma), a);\n  };\n\n  _f._closure = {\n    toLinearSpace: toLinearSpace,\n    interpolate: interpolate,\n    Extrapolate: {\n      CLAMP: Extrapolate.CLAMP\n    },\n    rgbaColor: rgbaColor,\n    toGammaSpace: toGammaSpace\n  };\n  _f.asString = \"function _f(value,inputRange,colors,options){const{toLinearSpace,interpolate,Extrapolate,rgbaColor,toGammaSpace}=jsThis._closure;{const{gamma=2.2}=options;let{r:outputR,g:outputG,b:outputB}=colors;if(gamma!==1){outputR=toLinearSpace(outputR,gamma);outputG=toLinearSpace(outputG,gamma);outputB=toLinearSpace(outputB,gamma);}const r=interpolate(value,inputRange,outputR,Extrapolate.CLAMP);const g=interpolate(value,inputRange,outputG,Extrapolate.CLAMP);const b=interpolate(value,inputRange,outputB,Extrapolate.CLAMP);const a=interpolate(value,inputRange,colors.a,Extrapolate.CLAMP);if(gamma===1){return rgbaColor(r,g,b,a);}return rgbaColor(toGammaSpace(r,gamma),toGammaSpace(g,gamma),toGammaSpace(b,gamma),a);}}\";\n  _f.__workletHash = 2815254997232;\n  _f.__location = \"/Users/Benjamin/Dev/hoohacks/mindcraft-front/node_modules/react-native-reanimated/lib/reanimated2/interpolateColor.js (59:29)\";\n  return _f;\n}();\n\nvar getInterpolateRGB = function () {\n  var _f = function _f(colors) {\n    var r = [];\n    var g = [];\n    var b = [];\n    var a = [];\n\n    for (var i = 0; i < colors.length; ++i) {\n      var color = colors[i];\n      var processedColor = processColor(color);\n\n      if (processedColor !== null && processedColor !== undefined) {\n        r.push(red(processedColor));\n        g.push(green(processedColor));\n        b.push(blue(processedColor));\n        a.push(opacity(processedColor));\n      }\n    }\n\n    return {\n      r: r,\n      g: g,\n      b: b,\n      a: a\n    };\n  };\n\n  _f._closure = {\n    processColor: processColor,\n    red: red,\n    green: green,\n    blue: blue,\n    opacity: opacity\n  };\n  _f.asString = \"function _f(colors){const{processColor,red,green,blue,opacity}=jsThis._closure;{const r=[];const g=[];const b=[];const a=[];for(let i=0;i<colors.length;++i){const color=colors[i];const processedColor=processColor(color);if(processedColor!==null&&processedColor!==undefined){r.push(red(processedColor));g.push(green(processedColor));b.push(blue(processedColor));a.push(opacity(processedColor));}}return{r:r,g:g,b:b,a:a};}}\";\n  _f.__workletHash = 3521870636649;\n  _f.__location = \"/Users/Benjamin/Dev/hoohacks/mindcraft-front/node_modules/react-native-reanimated/lib/reanimated2/interpolateColor.js (77:26)\";\n  return _f;\n}();\n\nvar getInterpolateHSV = function () {\n  var _f = function _f(colors) {\n    var h = [];\n    var s = [];\n    var v = [];\n    var a = [];\n\n    for (var i = 0; i < colors.length; ++i) {\n      var color = colors[i];\n      var processedColor = processColor(color);\n\n      if (typeof processedColor === 'number') {\n        var processedHSVColor = RGBtoHSV(red(processedColor), green(processedColor), blue(processedColor));\n        h.push(processedHSVColor.h);\n        s.push(processedHSVColor.s);\n        v.push(processedHSVColor.v);\n        a.push(opacity(processedColor));\n      }\n    }\n\n    return {\n      h: h,\n      s: s,\n      v: v,\n      a: a\n    };\n  };\n\n  _f._closure = {\n    processColor: processColor,\n    RGBtoHSV: RGBtoHSV,\n    red: red,\n    green: green,\n    blue: blue,\n    opacity: opacity\n  };\n  _f.asString = \"function _f(colors){const{processColor,RGBtoHSV,red,green,blue,opacity}=jsThis._closure;{const h=[];const s=[];const v=[];const a=[];for(let i=0;i<colors.length;++i){const color=colors[i];const processedColor=processColor(color);if(typeof processedColor==='number'){const processedHSVColor=RGBtoHSV(red(processedColor),green(processedColor),blue(processedColor));h.push(processedHSVColor.h);s.push(processedHSVColor.s);v.push(processedHSVColor.v);a.push(opacity(processedColor));}}return{h:h,s:s,v:v,a:a};}}\";\n  _f.__workletHash = 686412396573;\n  _f.__location = \"/Users/Benjamin/Dev/hoohacks/mindcraft-front/node_modules/react-native-reanimated/lib/reanimated2/interpolateColor.js (96:26)\";\n  return _f;\n}();\n\nexport var interpolateColor = function () {\n  var _f = function _f(value, inputRange, outputRange) {\n    var colorSpace = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 'RGB';\n    var options = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : {};\n\n    if (colorSpace === 'HSV') {\n      return interpolateColorsHSV(value, inputRange, getInterpolateHSV(outputRange), options);\n    } else if (colorSpace === 'RGB') {\n      return interpolateColorsRGB(value, inputRange, getInterpolateRGB(outputRange), options);\n    }\n\n    throw new Error(\"Invalid color space provided: \" + colorSpace + \". Supported values are: ['RGB', 'HSV']\");\n  };\n\n  _f._closure = {\n    interpolateColorsHSV: interpolateColorsHSV,\n    getInterpolateHSV: getInterpolateHSV,\n    interpolateColorsRGB: interpolateColorsRGB,\n    getInterpolateRGB: getInterpolateRGB\n  };\n  _f.asString = \"function _f(value,inputRange,outputRange,colorSpace='RGB',options={}){const{interpolateColorsHSV,getInterpolateHSV,interpolateColorsRGB,getInterpolateRGB}=jsThis._closure;{if(colorSpace==='HSV'){return interpolateColorsHSV(value,inputRange,getInterpolateHSV(outputRange),options);}else if(colorSpace==='RGB'){return interpolateColorsRGB(value,inputRange,getInterpolateRGB(outputRange),options);}throw new Error(\\\"Invalid color space provided: \\\"+colorSpace+\\\". Supported values are: ['RGB', 'HSV']\\\");}}\";\n  _f.__workletHash = 9681987669220;\n  _f.__location = \"/Users/Benjamin/Dev/hoohacks/mindcraft-front/node_modules/react-native-reanimated/lib/reanimated2/interpolateColor.js (115:32)\";\n  return _f;\n}();\nexport var ColorSpace;\n\n(function (ColorSpace) {\n  ColorSpace[ColorSpace[\"RGB\"] = 0] = \"RGB\";\n  ColorSpace[ColorSpace[\"HSV\"] = 1] = \"HSV\";\n})(ColorSpace || (ColorSpace = {}));\n\nexport function useInterpolateConfig(inputRange, outputRange) {\n  var colorSpace = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : ColorSpace.RGB;\n  var options = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};\n  return useSharedValue({\n    inputRange: inputRange,\n    outputRange: outputRange,\n    colorSpace: colorSpace,\n    cache: makeMutable(null),\n    options: options\n  });\n}\nexport var interpolateSharableColor = function () {\n  var _f = function _f(value, interpolateConfig) {\n    var colors = interpolateConfig.value.cache.value;\n\n    if (interpolateConfig.value.colorSpace === ColorSpace.RGB) {\n      if (!colors) {\n        colors = getInterpolateRGB(interpolateConfig.value.outputRange);\n        interpolateConfig.value.cache.value = colors;\n      }\n\n      return interpolateColorsRGB(value, interpolateConfig.value.inputRange, colors, interpolateConfig.value.options);\n    } else if (interpolateConfig.value.colorSpace === ColorSpace.HSV) {\n      if (!colors) {\n        colors = getInterpolateHSV(interpolateConfig.value.outputRange);\n        interpolateConfig.value.cache.value = colors;\n      }\n\n      return interpolateColorsHSV(value, interpolateConfig.value.inputRange, colors, interpolateConfig.value.options);\n    }\n\n    throw new Error(\"Invalid color space provided: \" + interpolateConfig.value.colorSpace + \". Supported values are: ['RGB', 'HSV']\");\n  };\n\n  _f._closure = {\n    ColorSpace: {\n      RGB: ColorSpace.RGB,\n      HSV: ColorSpace.HSV\n    },\n    getInterpolateRGB: getInterpolateRGB,\n    interpolateColorsRGB: interpolateColorsRGB,\n    getInterpolateHSV: getInterpolateHSV,\n    interpolateColorsHSV: interpolateColorsHSV\n  };\n  _f.asString = \"function _f(value,interpolateConfig){const{ColorSpace,getInterpolateRGB,interpolateColorsRGB,getInterpolateHSV,interpolateColorsHSV}=jsThis._closure;{let colors=interpolateConfig.value.cache.value;if(interpolateConfig.value.colorSpace===ColorSpace.RGB){if(!colors){colors=getInterpolateRGB(interpolateConfig.value.outputRange);interpolateConfig.value.cache.value=colors;}return interpolateColorsRGB(value,interpolateConfig.value.inputRange,colors,interpolateConfig.value.options);}else if(interpolateConfig.value.colorSpace===ColorSpace.HSV){if(!colors){colors=getInterpolateHSV(interpolateConfig.value.outputRange);interpolateConfig.value.cache.value=colors;}return interpolateColorsHSV(value,interpolateConfig.value.inputRange,colors,interpolateConfig.value.options);}throw new Error(\\\"Invalid color space provided: \\\"+interpolateConfig.value.colorSpace+\\\". Supported values are: ['RGB', 'HSV']\\\");}}\";\n  _f.__workletHash = 17520997050941;\n  _f.__location = \"/Users/Benjamin/Dev/hoohacks/mindcraft-front/node_modules/react-native-reanimated/lib/reanimated2/interpolateColor.js (139:40)\";\n  return _f;\n}();","map":{"version":3,"sources":["/Users/Benjamin/Dev/hoohacks/mindcraft-front/node_modules/react-native-reanimated/lib/reanimated2/interpolateColor.js"],"names":["hsvToColor","RGBtoHSV","rgbaColor","processColor","red","green","blue","opacity","makeMutable","interpolate","Extrapolate","useSharedValue","interpolateColorsHSV","value","inputRange","colors","options","h","useCorrectedHSVInterpolation","correctedInputRange","originalH","correctedH","i","length","d","push","CLAMP","s","v","a","toLinearSpace","x","gamma","map","Math","pow","toGammaSpace","round","interpolateColorsRGB","outputR","r","outputG","g","outputB","b","getInterpolateRGB","color","processedColor","undefined","getInterpolateHSV","processedHSVColor","interpolateColor","outputRange","colorSpace","Error","ColorSpace","useInterpolateConfig","RGB","cache","interpolateSharableColor","interpolateConfig","HSV"],"mappings":"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","sourcesContent":["import { hsvToColor, RGBtoHSV, rgbaColor, processColor, red, green, blue, opacity, } from './Colors';\nimport { makeMutable } from './core';\nimport { interpolate } from './interpolation';\n// @ts-ignore JS file\nimport { Extrapolate } from '../reanimated1/derived';\nimport { useSharedValue } from './hook/useSharedValue';\nconst interpolateColorsHSV = (value, inputRange, colors, options) => {\n    'worklet';\n    let h = 0;\n    const { useCorrectedHSVInterpolation = true } = options;\n    if (useCorrectedHSVInterpolation) {\n        // if the difference between hues in a range is > 180 deg\n        // then move the hue at the right end of the range +/- 360 deg\n        // and add the next point in the original place + 0.00001 with original hue\n        // to not break the next range\n        const correctedInputRange = [inputRange[0]];\n        const originalH = colors.h;\n        const correctedH = [originalH[0]];\n        for (let i = 1; i < originalH.length; ++i) {\n            const d = originalH[i] - originalH[i - 1];\n            if (originalH[i] > originalH[i - 1] && d > 0.5) {\n                correctedInputRange.push(inputRange[i]);\n                correctedInputRange.push(inputRange[i] + 0.00001);\n                correctedH.push(originalH[i] - 1);\n                correctedH.push(originalH[i]);\n            }\n            else if (originalH[i] < originalH[i - 1] && d < -0.5) {\n                correctedInputRange.push(inputRange[i]);\n                correctedInputRange.push(inputRange[i] + 0.00001);\n                correctedH.push(originalH[i] + 1);\n                correctedH.push(originalH[i]);\n            }\n            else {\n                correctedInputRange.push(inputRange[i]);\n                correctedH.push(originalH[i]);\n            }\n        }\n        h =\n            (interpolate(value, correctedInputRange, correctedH, Extrapolate.CLAMP) +\n                1) %\n                1;\n    }\n    else {\n        h = interpolate(value, inputRange, colors.h, Extrapolate.CLAMP);\n    }\n    const s = interpolate(value, inputRange, colors.s, Extrapolate.CLAMP);\n    const v = interpolate(value, inputRange, colors.v, Extrapolate.CLAMP);\n    const a = interpolate(value, inputRange, colors.a, Extrapolate.CLAMP);\n    return hsvToColor(h, s, v, a);\n};\nconst toLinearSpace = (x, gamma) => {\n    'worklet';\n    return x.map((v) => Math.pow(v / 255, gamma));\n};\nconst toGammaSpace = (x, gamma) => {\n    'worklet';\n    return Math.round(Math.pow(x, 1 / gamma) * 255);\n};\nconst interpolateColorsRGB = (value, inputRange, colors, options) => {\n    'worklet';\n    const { gamma = 2.2 } = options;\n    let { r: outputR, g: outputG, b: outputB } = colors;\n    if (gamma !== 1) {\n        outputR = toLinearSpace(outputR, gamma);\n        outputG = toLinearSpace(outputG, gamma);\n        outputB = toLinearSpace(outputB, gamma);\n    }\n    const r = interpolate(value, inputRange, outputR, Extrapolate.CLAMP);\n    const g = interpolate(value, inputRange, outputG, Extrapolate.CLAMP);\n    const b = interpolate(value, inputRange, outputB, Extrapolate.CLAMP);\n    const a = interpolate(value, inputRange, colors.a, Extrapolate.CLAMP);\n    if (gamma === 1) {\n        return rgbaColor(r, g, b, a);\n    }\n    return rgbaColor(toGammaSpace(r, gamma), toGammaSpace(g, gamma), toGammaSpace(b, gamma), a);\n};\nconst getInterpolateRGB = (colors) => {\n    'worklet';\n    const r = [];\n    const g = [];\n    const b = [];\n    const a = [];\n    for (let i = 0; i < colors.length; ++i) {\n        const color = colors[i];\n        const processedColor = processColor(color);\n        // explicit check in case if processedColor is 0\n        if (processedColor !== null && processedColor !== undefined) {\n            r.push(red(processedColor));\n            g.push(green(processedColor));\n            b.push(blue(processedColor));\n            a.push(opacity(processedColor));\n        }\n    }\n    return { r, g, b, a };\n};\nconst getInterpolateHSV = (colors) => {\n    'worklet';\n    const h = [];\n    const s = [];\n    const v = [];\n    const a = [];\n    for (let i = 0; i < colors.length; ++i) {\n        const color = colors[i];\n        const processedColor = processColor(color);\n        if (typeof processedColor === 'number') {\n            const processedHSVColor = RGBtoHSV(red(processedColor), green(processedColor), blue(processedColor));\n            h.push(processedHSVColor.h);\n            s.push(processedHSVColor.s);\n            v.push(processedHSVColor.v);\n            a.push(opacity(processedColor));\n        }\n    }\n    return { h, s, v, a };\n};\nexport const interpolateColor = (value, inputRange, outputRange, colorSpace = 'RGB', options = {}) => {\n    'worklet';\n    if (colorSpace === 'HSV') {\n        return interpolateColorsHSV(value, inputRange, getInterpolateHSV(outputRange), options);\n    }\n    else if (colorSpace === 'RGB') {\n        return interpolateColorsRGB(value, inputRange, getInterpolateRGB(outputRange), options);\n    }\n    throw new Error(`Invalid color space provided: ${colorSpace}. Supported values are: ['RGB', 'HSV']`);\n};\nexport var ColorSpace;\n(function (ColorSpace) {\n    ColorSpace[ColorSpace[\"RGB\"] = 0] = \"RGB\";\n    ColorSpace[ColorSpace[\"HSV\"] = 1] = \"HSV\";\n})(ColorSpace || (ColorSpace = {}));\nexport function useInterpolateConfig(inputRange, outputRange, colorSpace = ColorSpace.RGB, options = {}) {\n    return useSharedValue({\n        inputRange,\n        outputRange,\n        colorSpace,\n        cache: makeMutable(null),\n        options,\n    });\n}\nexport const interpolateSharableColor = (value, interpolateConfig) => {\n    'worklet';\n    let colors = interpolateConfig.value.cache.value;\n    if (interpolateConfig.value.colorSpace === ColorSpace.RGB) {\n        if (!colors) {\n            colors = getInterpolateRGB(interpolateConfig.value.outputRange);\n            interpolateConfig.value.cache.value = colors;\n        }\n        return interpolateColorsRGB(value, interpolateConfig.value.inputRange, colors, interpolateConfig.value.options);\n    }\n    else if (interpolateConfig.value.colorSpace === ColorSpace.HSV) {\n        if (!colors) {\n            colors = getInterpolateHSV(interpolateConfig.value.outputRange);\n            interpolateConfig.value.cache.value = colors;\n        }\n        return interpolateColorsHSV(value, interpolateConfig.value.inputRange, colors, interpolateConfig.value.options);\n    }\n    throw new Error(`Invalid color space provided: ${interpolateConfig.value.colorSpace}. Supported values are: ['RGB', 'HSV']`);\n};\n"]},"metadata":{},"sourceType":"module"}