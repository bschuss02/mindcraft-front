{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport { mergeProps as $7CUUz$mergeProps, filterDOMProps as $7CUUz$filterDOMProps } from \"@react-aria/utils\";\nimport { useFocusable as $7CUUz$useFocusable } from \"@react-aria/focus\";\nimport { usePress as $7CUUz$usePress } from \"@react-aria/interactions\";\n\nfunction $d2c8e2b0480f3f34$export$cbe85ee05b554577(props, state, ref) {\n  var _props$isDisabled = props.isDisabled,\n      isDisabled = _props$isDisabled === void 0 ? false : _props$isDisabled,\n      isRequired = props.isRequired,\n      isReadOnly = props.isReadOnly,\n      value = props.value,\n      name = props.name,\n      children = props.children,\n      ariaLabel = props[\"aria-label\"],\n      ariaLabelledby = props[\"aria-labelledby\"],\n      _props$validationStat = props.validationState,\n      validationState = _props$validationStat === void 0 ? \"valid\" : _props$validationStat;\n\n  var onChange = function onChange(e) {\n    e.stopPropagation();\n    state.setSelected(e.target.checked);\n  };\n\n  var hasChildren = children != null;\n  var hasAriaLabel = ariaLabel != null || ariaLabelledby != null;\n  if (!hasChildren && !hasAriaLabel) console.warn(\"If you do not provide children, you must specify an aria-label for accessibility\");\n\n  var _ref = (0, $7CUUz$usePress)({\n    isDisabled: isDisabled\n  }),\n      pressProps = _ref.pressProps;\n\n  var _ref2 = (0, $7CUUz$useFocusable)(props, ref),\n      focusableProps = _ref2.focusableProps;\n\n  var interactions = (0, $7CUUz$mergeProps)(pressProps, focusableProps);\n  var domProps = (0, $7CUUz$filterDOMProps)(props, {\n    labelable: true\n  });\n  return {\n    inputProps: (0, $7CUUz$mergeProps)(domProps, _objectSpread(_objectSpread({\n      \"aria-invalid\": validationState === \"invalid\" || undefined,\n      \"aria-errormessage\": props[\"aria-errormessage\"],\n      \"aria-controls\": props[\"aria-controls\"],\n      \"aria-readonly\": isReadOnly || undefined,\n      \"aria-required\": isRequired || undefined,\n      onChange: onChange,\n      disabled: isDisabled\n    }, value == null ? {} : {\n      value: value\n    }), {}, {\n      name: name,\n      type: \"checkbox\"\n    }, interactions))\n  };\n}\n\nexport { $d2c8e2b0480f3f34$export$cbe85ee05b554577 as useToggle };","map":{"version":3,"sources":["packages/@react-aria/toggle/src/useToggle.ts"],"names":[],"mappings":";;;;;;;;;;AA6BO,SAAS,yCAAT,CAAmB,KAAnB,EAA2C,KAA3C,EAA+D,GAA/D,EAA6G;AAClH,0BAUI,KAVJ,CAAI,UAAJ;AAAA,MACE,UADF,kCACe,KADf;AAAA,MAEE,UAFF,GAUI,KAVJ,CACoB,UADpB;AAAA,MAGE,UAHF,GAUI,KAVJ,CAEY,UAFZ;AAAA,MAIE,KAJF,GAUI,KAVJ,CAGY,KAHZ;AAAA,MAKE,IALF,GAUI,KAVJ,CAIO,IAJP;AAAA,MAME,QANF,GAUI,KAVJ,CAKM,QALN;AAAA,MAOgB,SAPhB,GAUI,KAVJ,CAOE,YAPF;AAAA,MAQqB,cARrB,GAUI,KAVJ,CAQE,iBARF;AAAA,8BAUI,KAVJ,CAQmC,eARnC;AAAA,MASE,eATF,sCASoB,OATpB;;AAYA,MAAI,QAAA,GAAW,SAAX,QAAW,CAAC,CAAD,EAAO;AAGpB,IAAA,CAAA,CAAE,eAAF;AACA,IAAA,KAAA,CAAM,WAAN,CAAkB,CAAA,CAAE,MAAF,CAAS,OAA3B;AACF,GALA;;AAOA,MAAI,WAAA,GAAc,QAAA,IAAY,IAA9B;AACA,MAAI,YAAA,GAAe,SAAA,IAAa,IAAb,IAAqB,cAAA,IAAkB,IAA1D;AACA,MAAI,CAAC,WAAD,IAAgB,CAAC,YAArB,EACE,OAAA,CAAQ,IAAR,CAAa,kFAAb;;AAIF,aAAmB,CAAA,GAAA,eAAA,EAAS;gBAC1B;AAD0B,GAAT,CAAnB;AAAA,MAAK,UAAL,QAAI,UAAJ;;AAIA,cAAuB,CAAA,GAAA,mBAAA,EAAa,KAAb,EAAoB,GAApB,CAAvB;AAAA,MAAK,cAAL,SAAI,cAAJ;;AACA,MAAI,YAAA,GAAe,CAAA,GAAA,iBAAA,EAAW,UAAX,EAAuB,cAAvB,CAAnB;AACA,MAAI,QAAA,GAAW,CAAA,GAAA,qBAAA,EAAe,KAAf,EAAsB;AAAC,IAAA,SAAA,EAAW;AAAZ,GAAtB,CAAf;AAEA,SAAO;AACL,IAAA,UAAA,EAAY,CAAA,GAAA,iBAAA,EAAW,QAAX;AACV,sBAAgB,eAAA,KAAoB,SAApB,IAAiC,SADvC;AAEV,2BAAqB,KAAK,CAAC,mBAAD,CAFhB;AAGV,uBAAiB,KAAK,CAAC,eAAD,CAHZ;AAIV,uBAAiB,UAAA,IAAc,SAJrB;AAKV,uBAAiB,UAAA,IAAc,SALrB;gBAMV,QANU;AAOV,MAAA,QAAA,EAAU;AAPA,OAQN,KAAA,IAAS,IAAT,GAAgB,EAAhB,GAAqB;aAAC;AAAD,KARf;YASV,IATU;AAUV,MAAA,IAAA,EAAM;AAVI,OAWP,YAXO;AADP,GAAP;AAeF","sourcesContent":["/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {AriaToggleProps} from '@react-types/checkbox';\nimport {filterDOMProps, mergeProps} from '@react-aria/utils';\nimport {InputHTMLAttributes, RefObject} from 'react';\nimport {ToggleState} from '@react-stately/toggle';\nimport {useFocusable} from '@react-aria/focus';\nimport {usePress} from '@react-aria/interactions';\n\nexport interface ToggleAria {\n  /**\n   * Props to be spread on the input element.\n   */\n  inputProps: InputHTMLAttributes<HTMLInputElement>\n}\n\n/**\n * Handles interactions for toggle elements, e.g. Checkboxes and Switches.\n */\nexport function useToggle(props: AriaToggleProps, state: ToggleState, ref: RefObject<HTMLInputElement>): ToggleAria {\n  let {\n    isDisabled = false,\n    isRequired,\n    isReadOnly,\n    value,\n    name,\n    children,\n    'aria-label': ariaLabel,\n    'aria-labelledby': ariaLabelledby,\n    validationState = 'valid'\n  } = props;\n\n  let onChange = (e) => {\n    // since we spread props on label, onChange will end up there as well as in here.\n    // so we have to stop propagation at the lowest level that we care about\n    e.stopPropagation();\n    state.setSelected(e.target.checked);\n  };\n\n  let hasChildren = children != null;\n  let hasAriaLabel = ariaLabel != null || ariaLabelledby != null;\n  if (!hasChildren && !hasAriaLabel) {\n    console.warn('If you do not provide children, you must specify an aria-label for accessibility');\n  }\n\n  // This handles focusing the input on pointer down, which Safari does not do by default.\n  let {pressProps} = usePress({\n    isDisabled\n  });\n\n  let {focusableProps} = useFocusable(props, ref);\n  let interactions = mergeProps(pressProps, focusableProps);\n  let domProps = filterDOMProps(props, {labelable: true});\n\n  return {\n    inputProps: mergeProps(domProps, {\n      'aria-invalid': validationState === 'invalid' || undefined,\n      'aria-errormessage': props['aria-errormessage'],\n      'aria-controls': props['aria-controls'],\n      'aria-readonly': isReadOnly || undefined,\n      'aria-required': isRequired || undefined,\n      onChange,\n      disabled: isDisabled,\n      ...(value == null ? {} : {value}),\n      name,\n      type: 'checkbox',\n      ...interactions\n    })\n  };\n}\n"]},"metadata":{},"sourceType":"module"}