{"ast":null,"code":"import ConvertNumberIntoHex from 'normalize-css-color';\n\nvar processColor = function processColor(color) {\n  if (color === undefined || color === null) {\n    return color;\n  }\n\n  var int32Color = ConvertNumberIntoHex(color);\n\n  if (int32Color === undefined || int32Color === null) {\n    return undefined;\n  }\n\n  int32Color = (int32Color << 24 | int32Color >>> 8) >>> 0;\n  return int32Color;\n};\n\nvar isWebColor = function isWebColor(color) {\n  return color === 'currentcolor' || color === 'currentColor' || color === 'inherit' || color.indexOf('var(') === 0;\n};\n\nvar normalizeColor = function normalizeColor(color) {\n  var opacity = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1;\n  if (color == null) return;\n\n  if (typeof color === 'string' && isWebColor(color)) {\n    return color;\n  }\n\n  var colorInt = processColor(color);\n\n  if (colorInt != null) {\n    var r = colorInt >> 16 & 255;\n    var g = colorInt >> 8 & 255;\n    var b = colorInt & 255;\n    var a = (colorInt >> 24 & 255) / 255;\n    var alpha = (a * opacity).toFixed(2);\n    return \"rgba(\".concat(r, \",\").concat(g, \",\").concat(b, \",\").concat(alpha, \")\");\n  }\n};\n\nexport default normalizeColor;","map":{"version":3,"sources":["normalizeColor.ts"],"names":["processColor","color","int32Color","ConvertNumberIntoHex","isWebColor","normalizeColor","opacity","colorInt","r","g","b","a","alpha"],"mappings":"AAIA,OAAA,oBAAA,MAAA,qBAAA;;AAEA,IAAMA,YAAY,GAAIC,SAAhBD,YAAgBC,CAAAA,KAAD,EAAsB;AACzC,MAAIA,KAAK,KAALA,SAAAA,IAAuBA,KAAK,KAAhC,IAAA,EAA2C;AACzC,WAAA,KAAA;AAFuC;;AAMzC,MAAIC,UAAU,GAAGC,oBAAoB,CAArC,KAAqC,CAArC;;AACA,MAAID,UAAU,KAAVA,SAAAA,IAA4BA,UAAU,KAA1C,IAAA,EAAqD;AACnD,WAAA,SAAA;AARuC;;AAWzCA,EAAAA,UAAU,GAAG,CAAEA,UAAU,IAAX,EAACA,GAAqBA,UAAU,KAAjC,CAAA,MAAbA,CAAAA;AAEA,SAAA,UAAA;AAbF,CAAA;;AAgBA,IAAME,UAAU,GAAIH,SAAdG,UAAcH,CAAAA,KAAD;AAAA,SACjBA,KAAK,KAALA,cAAAA,IACAA,KAAK,KADLA,cAAAA,IAEAA,KAAK,KAFLA,SAAAA,IAGAA,KAAK,CAALA,OAAAA,CAAAA,MAAAA,MAJF,CAAmB;AAAA,CAAnB;;AAMA,IAAMI,cAAc,GAAG,SAAjBA,cAAiB,CAAA,KAAA,EAGH;AAAA,MADlBC,OACkB,uEAHG,CAGH;AAClB,MAAIL,KAAK,IAAT,IAAA,EAAmB;;AAEnB,MAAI,OAAA,KAAA,KAAA,QAAA,IAA6BG,UAAU,CAA3C,KAA2C,CAA3C,EAAoD;AAClD,WAAA,KAAA;AACD;;AAED,MAAMG,QAAQ,GAAGP,YAAY,CAA7B,KAA6B,CAA7B;;AACA,MAAIO,QAAQ,IAAZ,IAAA,EAAsB;AACpB,QAAMC,CAAC,GAAID,QAAQ,IAAT,EAACA,GAAX,GAAA;AACA,QAAME,CAAC,GAAIF,QAAQ,IAAT,CAACA,GAAX,GAAA;AACA,QAAMG,CAAC,GAAGH,QAAQ,GAAlB,GAAA;AACA,QAAMI,CAAC,GAAG,CAAEJ,QAAQ,IAAT,EAACA,GAAF,GAAA,IAAV,GAAA;AACA,QAAMK,KAAK,GAAG,CAACD,CAAC,GAAF,OAAA,EAAA,OAAA,CAAd,CAAc,CAAd;AACA,WAAA,QAAA,MAAA,CAAA,CAAA,EAAA,GAAA,EAAA,MAAA,CAAA,CAAA,EAAA,GAAA,EAAA,MAAA,CAAA,CAAA,EAAA,GAAA,EAAA,MAAA,CAAA,KAAA,EAAA,GAAA,CAAA;AACD;AAlBH,CAAA;;AAqBA,eAAA,cAAA","sourcesContent":["/* eslint-disable */\n//@ts-nocheck\n// This functions is taken from react native web\n\nimport ConvertNumberIntoHex from 'normalize-css-color';\n\nconst processColor = (color?: any): any => {\n  if (color === undefined || color === null) {\n    return color;\n  }\n\n  // convert number and hex\n  let int32Color = ConvertNumberIntoHex(color);\n  if (int32Color === undefined || int32Color === null) {\n    return undefined;\n  }\n  //@ts-ignore\n  int32Color = ((int32Color << 24) | (int32Color >>> 8)) >>> 0;\n\n  return int32Color;\n};\n\nconst isWebColor = (color: string): boolean =>\n  color === 'currentcolor' ||\n  color === 'currentColor' ||\n  color === 'inherit' ||\n  color.indexOf('var(') === 0;\n\nconst normalizeColor = (\n  color?: number | string,\n  opacity: number = 1\n): void | string => {\n  if (color == null) return;\n\n  if (typeof color === 'string' && isWebColor(color)) {\n    return color;\n  }\n\n  const colorInt = processColor(color);\n  if (colorInt != null) {\n    const r = (colorInt >> 16) & 255;\n    const g = (colorInt >> 8) & 255;\n    const b = colorInt & 255;\n    const a = ((colorInt >> 24) & 255) / 255;\n    const alpha = (a * opacity).toFixed(2);\n    return `rgba(${r},${g},${b},${alpha})`;\n  }\n};\n\nexport default normalizeColor;\n"]},"metadata":{},"sourceType":"module"}