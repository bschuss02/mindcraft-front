{"ast":null,"code":"import { useEffect, useRef } from 'react';\nimport NativeReanimated from \"../NativeReanimated\";\nimport { makeMutable } from \"../core\";\nimport { KeyboardState } from \"../commonTypes\";\nexport function useAnimatedKeyboard() {\n  var ref = useRef(null);\n  var listenerId = useRef(-1);\n  var isSubscribed = useRef(false);\n\n  if (ref.current === null) {\n    var keyboardEventData = {\n      state: makeMutable(KeyboardState.UNKNOWN),\n      height: makeMutable(0)\n    };\n    listenerId.current = NativeReanimated.subscribeForKeyboardEvents(keyboardEventData);\n    ref.current = keyboardEventData;\n    isSubscribed.current = true;\n  }\n\n  useEffect(function () {\n    if (isSubscribed.current === false && ref.current !== null) {\n      listenerId.current = NativeReanimated.subscribeForKeyboardEvents(ref.current);\n      isSubscribed.current = true;\n    }\n\n    return function () {\n      NativeReanimated.unsubscribeFromKeyboardEvents(listenerId.current);\n      isSubscribed.current = false;\n    };\n  }, []);\n  return ref.current;\n}","map":{"version":3,"sources":["/Users/Benjamin/Dev/hoohacks/mindcraft-front/node_modules/react-native-reanimated/lib/reanimated2/hook/useAnimatedKeyboard.js"],"names":["useEffect","useRef","NativeReanimated","makeMutable","KeyboardState","useAnimatedKeyboard","ref","listenerId","isSubscribed","current","keyboardEventData","state","UNKNOWN","height","subscribeForKeyboardEvents","unsubscribeFromKeyboardEvents"],"mappings":"AAAA,SAASA,SAAT,EAAoBC,MAApB,QAAkC,OAAlC;AACA,OAAOC,gBAAP;AACA,SAASC,WAAT;AACA,SAASC,aAAT;AACA,OAAO,SAASC,mBAAT,GAA+B;AAClC,MAAMC,GAAG,GAAGL,MAAM,CAAC,IAAD,CAAlB;AACA,MAAMM,UAAU,GAAGN,MAAM,CAAC,CAAC,CAAF,CAAzB;AACA,MAAMO,YAAY,GAAGP,MAAM,CAAC,KAAD,CAA3B;;AACA,MAAIK,GAAG,CAACG,OAAJ,KAAgB,IAApB,EAA0B;AACtB,QAAMC,iBAAiB,GAAG;AACtBC,MAAAA,KAAK,EAAER,WAAW,CAACC,aAAa,CAACQ,OAAf,CADI;AAEtBC,MAAAA,MAAM,EAAEV,WAAW,CAAC,CAAD;AAFG,KAA1B;AAIAI,IAAAA,UAAU,CAACE,OAAX,GACIP,gBAAgB,CAACY,0BAAjB,CAA4CJ,iBAA5C,CADJ;AAEAJ,IAAAA,GAAG,CAACG,OAAJ,GAAcC,iBAAd;AACAF,IAAAA,YAAY,CAACC,OAAb,GAAuB,IAAvB;AACH;;AACDT,EAAAA,SAAS,CAAC,YAAM;AACZ,QAAIQ,YAAY,CAACC,OAAb,KAAyB,KAAzB,IAAkCH,GAAG,CAACG,OAAJ,KAAgB,IAAtD,EAA4D;AAExDF,MAAAA,UAAU,CAACE,OAAX,GAAqBP,gBAAgB,CAACY,0BAAjB,CAA4CR,GAAG,CAACG,OAAhD,CAArB;AACAD,MAAAA,YAAY,CAACC,OAAb,GAAuB,IAAvB;AACH;;AACD,WAAO,YAAM;AACTP,MAAAA,gBAAgB,CAACa,6BAAjB,CAA+CR,UAAU,CAACE,OAA1D;AACAD,MAAAA,YAAY,CAACC,OAAb,GAAuB,KAAvB;AACH,KAHD;AAIH,GAVQ,EAUN,EAVM,CAAT;AAWA,SAAOH,GAAG,CAACG,OAAX;AACH","sourcesContent":["import { useEffect, useRef } from 'react';\nimport NativeReanimated from '../NativeReanimated';\nimport { makeMutable } from '../core';\nimport { KeyboardState } from '../commonTypes';\nexport function useAnimatedKeyboard() {\n    const ref = useRef(null);\n    const listenerId = useRef(-1);\n    const isSubscribed = useRef(false);\n    if (ref.current === null) {\n        const keyboardEventData = {\n            state: makeMutable(KeyboardState.UNKNOWN),\n            height: makeMutable(0),\n        };\n        listenerId.current =\n            NativeReanimated.subscribeForKeyboardEvents(keyboardEventData);\n        ref.current = keyboardEventData;\n        isSubscribed.current = true;\n    }\n    useEffect(() => {\n        if (isSubscribed.current === false && ref.current !== null) {\n            // subscribe again after Fast Refresh\n            listenerId.current = NativeReanimated.subscribeForKeyboardEvents(ref.current);\n            isSubscribed.current = true;\n        }\n        return () => {\n            NativeReanimated.unsubscribeFromKeyboardEvents(listenerId.current);\n            isSubscribed.current = false;\n        };\n    }, []);\n    return ref.current;\n}\n"]},"metadata":{},"sourceType":"module"}