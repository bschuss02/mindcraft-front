{"ast":null,"code":"import * as React from 'react';\nimport View from \"react-native-web/dist/exports/View\";\nvar CSSTransitions = {\n  WebkitTransition: 'webkitTransitionEnd',\n  Transition: 'transitionEnd',\n  MozTransition: 'transitionend',\n  MSTransition: 'msTransitionEnd',\n  OTransition: 'oTransitionEnd'\n};\nexport function NativeSafeAreaProvider(_ref) {\n  var children = _ref.children,\n      style = _ref.style,\n      onInsetsChange = _ref.onInsetsChange;\n  React.useEffect(function () {\n    if (typeof document === 'undefined') {\n      return;\n    }\n\n    var element = createContextElement();\n    document.body.appendChild(element);\n\n    var onEnd = function onEnd() {\n      var _window$getComputedSt = window.getComputedStyle(element),\n          paddingTop = _window$getComputedSt.paddingTop,\n          paddingBottom = _window$getComputedSt.paddingBottom,\n          paddingLeft = _window$getComputedSt.paddingLeft,\n          paddingRight = _window$getComputedSt.paddingRight;\n\n      var insets = {\n        top: paddingTop ? parseInt(paddingTop, 10) : 0,\n        bottom: paddingBottom ? parseInt(paddingBottom, 10) : 0,\n        left: paddingLeft ? parseInt(paddingLeft, 10) : 0,\n        right: paddingRight ? parseInt(paddingRight, 10) : 0\n      };\n      var frame = {\n        x: 0,\n        y: 0,\n        width: document.documentElement.offsetWidth,\n        height: document.documentElement.offsetHeight\n      };\n      onInsetsChange({\n        nativeEvent: {\n          insets: insets,\n          frame: frame\n        }\n      });\n    };\n\n    element.addEventListener(getSupportedTransitionEvent(), onEnd);\n    onEnd();\n    return function () {\n      document.body.removeChild(element);\n      element.removeEventListener(getSupportedTransitionEvent(), onEnd);\n    };\n  }, [onInsetsChange]);\n  return React.createElement(View, {\n    style: style\n  }, children);\n}\nvar _supportedTransitionEvent = null;\n\nfunction getSupportedTransitionEvent() {\n  if (_supportedTransitionEvent != null) {\n    return _supportedTransitionEvent;\n  }\n\n  var element = document.createElement('invalidtype');\n  _supportedTransitionEvent = CSSTransitions.Transition;\n\n  for (var key in CSSTransitions) {\n    if (element.style[key] !== undefined) {\n      _supportedTransitionEvent = CSSTransitions[key];\n      break;\n    }\n  }\n\n  return _supportedTransitionEvent;\n}\n\nvar _supportedEnv = null;\n\nfunction getSupportedEnv() {\n  if (_supportedEnv !== null) {\n    return _supportedEnv;\n  }\n\n  var _window = window,\n      CSS = _window.CSS;\n\n  if (CSS && CSS.supports && CSS.supports('top: constant(safe-area-inset-top)')) {\n    _supportedEnv = 'constant';\n  } else {\n    _supportedEnv = 'env';\n  }\n\n  return _supportedEnv;\n}\n\nfunction getInset(side) {\n  return getSupportedEnv() + \"(safe-area-inset-\" + side + \")\";\n}\n\nfunction createContextElement() {\n  var element = document.createElement('div');\n  var style = element.style;\n  style.position = 'fixed';\n  style.left = '0';\n  style.top = '0';\n  style.width = '0';\n  style.height = '0';\n  style.zIndex = '-1';\n  style.overflow = 'hidden';\n  style.visibility = 'hidden';\n  style.transitionDuration = '0.05s';\n  style.transitionProperty = 'padding';\n  style.transitionDelay = '0s';\n  style.paddingTop = getInset('top');\n  style.paddingBottom = getInset('bottom');\n  style.paddingLeft = getInset('left');\n  style.paddingRight = getInset('right');\n  return element;\n}","map":{"version":3,"sources":["NativeSafeAreaProvider.web.tsx"],"names":["React","CSSTransitions","WebkitTransition","Transition","MozTransition","MSTransition","OTransition","NativeSafeAreaProvider","children","style","onInsetsChange","useEffect","document","element","createContextElement","body","appendChild","onEnd","paddingTop","paddingBottom","paddingLeft","paddingRight","window","getComputedStyle","insets","top","parseInt","bottom","left","right","frame","x","y","width","documentElement","offsetWidth","height","offsetHeight","nativeEvent","addEventListener","getSupportedTransitionEvent","removeChild","removeEventListener","_supportedTransitionEvent","createElement","key","undefined","_supportedEnv","getSupportedEnv","CSS","supports","getInset","side","position","zIndex","overflow","visibility","transitionDuration","transitionProperty","transitionDelay"],"mappings":"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","sourceRoot":"../../src","sourcesContent":["/* eslint-env browser */\n\nimport * as React from 'react';\nimport { View } from 'react-native';\n/**\n * TODO:\n * Currently insets and frame are based on the window and are not\n * relative to the provider view. This is inconsistent with iOS and Android.\n * However in most cases if the provider view covers the screen this is not\n * an issue.\n */\n\nconst CSSTransitions = {\n  WebkitTransition: 'webkitTransitionEnd',\n  Transition: 'transitionEnd',\n  MozTransition: 'transitionend',\n  MSTransition: 'msTransitionEnd',\n  OTransition: 'oTransitionEnd'\n};\nexport function NativeSafeAreaProvider(_ref) {\n  let {\n    children,\n    style,\n    onInsetsChange\n  } = _ref;\n  React.useEffect(() => {\n    // Skip for SSR.\n    if (typeof document === 'undefined') {\n      return;\n    }\n    const element = createContextElement();\n    document.body.appendChild(element);\n    const onEnd = () => {\n      const {\n        paddingTop,\n        paddingBottom,\n        paddingLeft,\n        paddingRight\n      } = window.getComputedStyle(element);\n      const insets = {\n        top: paddingTop ? parseInt(paddingTop, 10) : 0,\n        bottom: paddingBottom ? parseInt(paddingBottom, 10) : 0,\n        left: paddingLeft ? parseInt(paddingLeft, 10) : 0,\n        right: paddingRight ? parseInt(paddingRight, 10) : 0\n      };\n      const frame = {\n        x: 0,\n        y: 0,\n        width: document.documentElement.offsetWidth,\n        height: document.documentElement.offsetHeight\n      };\n      // @ts-ignore: missing properties\n      onInsetsChange({\n        nativeEvent: {\n          insets,\n          frame\n        }\n      });\n    };\n    element.addEventListener(getSupportedTransitionEvent(), onEnd);\n    onEnd();\n    return () => {\n      document.body.removeChild(element);\n      element.removeEventListener(getSupportedTransitionEvent(), onEnd);\n    };\n  }, [onInsetsChange]);\n  return /*#__PURE__*/React.createElement(View, {\n    style: style\n  }, children);\n}\nlet _supportedTransitionEvent = null;\nfunction getSupportedTransitionEvent() {\n  if (_supportedTransitionEvent != null) {\n    return _supportedTransitionEvent;\n  }\n  const element = document.createElement('invalidtype');\n  _supportedTransitionEvent = CSSTransitions.Transition;\n  for (const key in CSSTransitions) {\n    if (element.style[key] !== undefined) {\n      _supportedTransitionEvent = CSSTransitions[key];\n      break;\n    }\n  }\n  return _supportedTransitionEvent;\n}\nlet _supportedEnv = null;\nfunction getSupportedEnv() {\n  if (_supportedEnv !== null) {\n    return _supportedEnv;\n  }\n  const {\n    CSS\n  } = window;\n  if (CSS && CSS.supports && CSS.supports('top: constant(safe-area-inset-top)')) {\n    _supportedEnv = 'constant';\n  } else {\n    _supportedEnv = 'env';\n  }\n  return _supportedEnv;\n}\nfunction getInset(side) {\n  return `${getSupportedEnv()}(safe-area-inset-${side})`;\n}\nfunction createContextElement() {\n  const element = document.createElement('div');\n  const {\n    style\n  } = element;\n  style.position = 'fixed';\n  style.left = '0';\n  style.top = '0';\n  style.width = '0';\n  style.height = '0';\n  style.zIndex = '-1';\n  style.overflow = 'hidden';\n  style.visibility = 'hidden';\n  // Bacon: Anything faster than this and the callback will be invoked too early with the wrong insets\n  style.transitionDuration = '0.05s';\n  style.transitionProperty = 'padding';\n  style.transitionDelay = '0s';\n  style.paddingTop = getInset('top');\n  style.paddingBottom = getInset('bottom');\n  style.paddingLeft = getInset('left');\n  style.paddingRight = getInset('right');\n  return element;\n}\n//# sourceMappingURL=NativeSafeAreaProvider.web.js.map"]},"metadata":{},"sourceType":"module"}