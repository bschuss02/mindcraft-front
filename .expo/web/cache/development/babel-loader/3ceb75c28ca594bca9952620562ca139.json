{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport { getHeaderTitle, HeaderBackContext, HeaderHeightContext, HeaderShownContext } from '@react-navigation/elements';\nimport { useTheme } from '@react-navigation/native';\nimport * as React from 'react';\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport View from \"react-native-web/dist/exports/View\";\nimport ModalPresentationContext from \"../../utils/ModalPresentationContext\";\nimport useKeyboardManager from \"../../utils/useKeyboardManager\";\nimport Card from \"./Card\";\nvar EPSILON = 0.1;\n\nfunction CardContainer(_ref) {\n  var interpolationIndex = _ref.interpolationIndex,\n      index = _ref.index,\n      active = _ref.active,\n      closing = _ref.closing,\n      gesture = _ref.gesture,\n      focused = _ref.focused,\n      modal = _ref.modal,\n      getPreviousScene = _ref.getPreviousScene,\n      getFocusedRoute = _ref.getFocusedRoute,\n      headerDarkContent = _ref.headerDarkContent,\n      hasAbsoluteFloatHeader = _ref.hasAbsoluteFloatHeader,\n      headerHeight = _ref.headerHeight,\n      onHeaderHeightChange = _ref.onHeaderHeightChange,\n      isParentHeaderShown = _ref.isParentHeaderShown,\n      isNextScreenTransparent = _ref.isNextScreenTransparent,\n      detachCurrentScreen = _ref.detachCurrentScreen,\n      layout = _ref.layout,\n      onCloseRoute = _ref.onCloseRoute,\n      onOpenRoute = _ref.onOpenRoute,\n      onGestureCancel = _ref.onGestureCancel,\n      onGestureEnd = _ref.onGestureEnd,\n      onGestureStart = _ref.onGestureStart,\n      onTransitionEnd = _ref.onTransitionEnd,\n      onTransitionStart = _ref.onTransitionStart,\n      renderHeader = _ref.renderHeader,\n      renderScene = _ref.renderScene,\n      safeAreaInsetBottom = _ref.safeAreaInsetBottom,\n      safeAreaInsetLeft = _ref.safeAreaInsetLeft,\n      safeAreaInsetRight = _ref.safeAreaInsetRight,\n      safeAreaInsetTop = _ref.safeAreaInsetTop,\n      scene = _ref.scene;\n  var parentHeaderHeight = React.useContext(HeaderHeightContext);\n\n  var _useKeyboardManager = useKeyboardManager(React.useCallback(function () {\n    var _scene$descriptor = scene.descriptor,\n        options = _scene$descriptor.options,\n        navigation = _scene$descriptor.navigation;\n    return navigation.isFocused() && options.keyboardHandlingEnabled !== false;\n  }, [scene.descriptor])),\n      onPageChangeStart = _useKeyboardManager.onPageChangeStart,\n      onPageChangeCancel = _useKeyboardManager.onPageChangeCancel,\n      onPageChangeConfirm = _useKeyboardManager.onPageChangeConfirm;\n\n  var handleOpen = function handleOpen() {\n    var route = scene.descriptor.route;\n    onTransitionEnd({\n      route: route\n    }, false);\n    onOpenRoute({\n      route: route\n    });\n  };\n\n  var handleClose = function handleClose() {\n    var route = scene.descriptor.route;\n    onTransitionEnd({\n      route: route\n    }, true);\n    onCloseRoute({\n      route: route\n    });\n  };\n\n  var handleGestureBegin = function handleGestureBegin() {\n    var route = scene.descriptor.route;\n    onPageChangeStart();\n    onGestureStart({\n      route: route\n    });\n  };\n\n  var handleGestureCanceled = function handleGestureCanceled() {\n    var route = scene.descriptor.route;\n    onPageChangeCancel();\n    onGestureCancel({\n      route: route\n    });\n  };\n\n  var handleGestureEnd = function handleGestureEnd() {\n    var route = scene.descriptor.route;\n    onGestureEnd({\n      route: route\n    });\n  };\n\n  var handleTransition = function handleTransition(_ref2) {\n    var closing = _ref2.closing,\n        gesture = _ref2.gesture;\n    var route = scene.descriptor.route;\n\n    if (!gesture) {\n      onPageChangeConfirm === null || onPageChangeConfirm === void 0 ? void 0 : onPageChangeConfirm(true);\n    } else if (active && closing) {\n      onPageChangeConfirm === null || onPageChangeConfirm === void 0 ? void 0 : onPageChangeConfirm(false);\n    } else {\n      onPageChangeCancel === null || onPageChangeCancel === void 0 ? void 0 : onPageChangeCancel();\n    }\n\n    onTransitionStart === null || onTransitionStart === void 0 ? void 0 : onTransitionStart({\n      route: route\n    }, closing);\n  };\n\n  var insets = {\n    top: safeAreaInsetTop,\n    right: safeAreaInsetRight,\n    bottom: safeAreaInsetBottom,\n    left: safeAreaInsetLeft\n  };\n\n  var _useTheme = useTheme(),\n      colors = _useTheme.colors;\n\n  var _React$useState = React.useState('box-none'),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      pointerEvents = _React$useState2[0],\n      setPointerEvents = _React$useState2[1];\n\n  React.useEffect(function () {\n    var _scene$progress$next, _scene$progress$next$;\n\n    var listener = (_scene$progress$next = scene.progress.next) === null || _scene$progress$next === void 0 ? void 0 : (_scene$progress$next$ = _scene$progress$next.addListener) === null || _scene$progress$next$ === void 0 ? void 0 : _scene$progress$next$.call(_scene$progress$next, function (_ref3) {\n      var value = _ref3.value;\n      setPointerEvents(value <= EPSILON ? 'box-none' : 'none');\n    });\n    return function () {\n      if (listener) {\n        var _scene$progress$next2, _scene$progress$next3;\n\n        (_scene$progress$next2 = scene.progress.next) === null || _scene$progress$next2 === void 0 ? void 0 : (_scene$progress$next3 = _scene$progress$next2.removeListener) === null || _scene$progress$next3 === void 0 ? void 0 : _scene$progress$next3.call(_scene$progress$next2, listener);\n      }\n    };\n  }, [pointerEvents, scene.progress.next]);\n  var _scene$descriptor$opt = scene.descriptor.options,\n      presentation = _scene$descriptor$opt.presentation,\n      animationEnabled = _scene$descriptor$opt.animationEnabled,\n      cardOverlay = _scene$descriptor$opt.cardOverlay,\n      cardOverlayEnabled = _scene$descriptor$opt.cardOverlayEnabled,\n      cardShadowEnabled = _scene$descriptor$opt.cardShadowEnabled,\n      cardStyle = _scene$descriptor$opt.cardStyle,\n      cardStyleInterpolator = _scene$descriptor$opt.cardStyleInterpolator,\n      gestureDirection = _scene$descriptor$opt.gestureDirection,\n      gestureEnabled = _scene$descriptor$opt.gestureEnabled,\n      gestureResponseDistance = _scene$descriptor$opt.gestureResponseDistance,\n      gestureVelocityImpact = _scene$descriptor$opt.gestureVelocityImpact,\n      headerMode = _scene$descriptor$opt.headerMode,\n      headerShown = _scene$descriptor$opt.headerShown,\n      transitionSpec = _scene$descriptor$opt.transitionSpec;\n  var previousScene = getPreviousScene({\n    route: scene.descriptor.route\n  });\n  var backTitle;\n\n  if (previousScene) {\n    var _previousScene$descri = previousScene.descriptor,\n        options = _previousScene$descri.options,\n        route = _previousScene$descri.route;\n    backTitle = getHeaderTitle(options, route.name);\n  }\n\n  var headerBack = React.useMemo(function () {\n    return backTitle !== undefined ? {\n      title: backTitle\n    } : undefined;\n  }, [backTitle]);\n  return React.createElement(Card, {\n    interpolationIndex: interpolationIndex,\n    gestureDirection: gestureDirection,\n    layout: layout,\n    insets: insets,\n    gesture: gesture,\n    current: scene.progress.current,\n    next: scene.progress.next,\n    closing: closing,\n    onOpen: handleOpen,\n    onClose: handleClose,\n    overlay: cardOverlay,\n    overlayEnabled: cardOverlayEnabled,\n    shadowEnabled: cardShadowEnabled,\n    onTransition: handleTransition,\n    onGestureBegin: handleGestureBegin,\n    onGestureCanceled: handleGestureCanceled,\n    onGestureEnd: handleGestureEnd,\n    gestureEnabled: index === 0 ? false : gestureEnabled,\n    gestureResponseDistance: gestureResponseDistance,\n    gestureVelocityImpact: gestureVelocityImpact,\n    transitionSpec: transitionSpec,\n    styleInterpolator: cardStyleInterpolator,\n    accessibilityElementsHidden: !focused,\n    importantForAccessibility: focused ? 'auto' : 'no-hide-descendants',\n    pointerEvents: active ? 'box-none' : pointerEvents,\n    pageOverflowEnabled: headerMode !== 'float' && presentation !== 'modal',\n    headerDarkContent: headerDarkContent,\n    containerStyle: hasAbsoluteFloatHeader && headerMode !== 'screen' ? {\n      marginTop: headerHeight\n    } : null,\n    contentStyle: [{\n      backgroundColor: presentation === 'transparentModal' ? 'transparent' : colors.background\n    }, cardStyle],\n    style: [{\n      overflow: active ? undefined : 'hidden',\n      display: animationEnabled === false && isNextScreenTransparent === false && detachCurrentScreen !== false && !focused ? 'none' : 'flex'\n    }, StyleSheet.absoluteFill]\n  }, React.createElement(View, {\n    style: styles.container\n  }, React.createElement(ModalPresentationContext.Provider, {\n    value: modal\n  }, React.createElement(View, {\n    style: styles.scene\n  }, React.createElement(HeaderBackContext.Provider, {\n    value: headerBack\n  }, React.createElement(HeaderShownContext.Provider, {\n    value: isParentHeaderShown || headerShown !== false\n  }, React.createElement(HeaderHeightContext.Provider, {\n    value: headerShown ? headerHeight : parentHeaderHeight != null ? parentHeaderHeight : 0\n  }, renderScene({\n    route: scene.descriptor.route\n  }))))), headerMode !== 'float' ? renderHeader({\n    mode: 'screen',\n    layout: layout,\n    scenes: [previousScene, scene],\n    getPreviousScene: getPreviousScene,\n    getFocusedRoute: getFocusedRoute,\n    onContentHeightChange: onHeaderHeightChange\n  }) : null)));\n}\n\nexport default React.memo(CardContainer);\nvar styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    flexDirection: 'column-reverse'\n  },\n  scene: {\n    flex: 1\n  }\n});","map":{"version":3,"sources":["views/Stack/CardContainer.tsx"],"names":["getHeaderTitle","HeaderBackContext","HeaderHeightContext","HeaderShownContext","useTheme","React","ModalPresentationContext","useKeyboardManager","Card","EPSILON","CardContainer","interpolationIndex","index","active","closing","gesture","focused","modal","getPreviousScene","getFocusedRoute","headerDarkContent","hasAbsoluteFloatHeader","headerHeight","onHeaderHeightChange","isParentHeaderShown","isNextScreenTransparent","detachCurrentScreen","layout","onCloseRoute","onOpenRoute","onGestureCancel","onGestureEnd","onGestureStart","onTransitionEnd","onTransitionStart","renderHeader","renderScene","safeAreaInsetBottom","safeAreaInsetLeft","safeAreaInsetRight","safeAreaInsetTop","scene","parentHeaderHeight","useContext","onPageChangeStart","onPageChangeCancel","onPageChangeConfirm","useCallback","options","navigation","descriptor","isFocused","keyboardHandlingEnabled","handleOpen","route","handleClose","handleGestureBegin","handleGestureCanceled","handleGestureEnd","handleTransition","insets","top","right","bottom","left","colors","pointerEvents","setPointerEvents","useState","useEffect","listener","progress","next","addListener","value","removeListener","presentation","animationEnabled","cardOverlay","cardOverlayEnabled","cardShadowEnabled","cardStyle","cardStyleInterpolator","gestureDirection","gestureEnabled","gestureResponseDistance","gestureVelocityImpact","headerMode","headerShown","transitionSpec","previousScene","backTitle","name","headerBack","useMemo","undefined","title","current","marginTop","backgroundColor","background","overflow","display","StyleSheet","absoluteFill","styles","container","mode","scenes","onContentHeightChange","memo","create","flex","flexDirection"],"mappings":"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","sourceRoot":"../../../../src","sourcesContent":["import { getHeaderTitle, HeaderBackContext, HeaderHeightContext, HeaderShownContext } from '@react-navigation/elements';\nimport { useTheme } from '@react-navigation/native';\nimport * as React from 'react';\nimport { StyleSheet, View } from 'react-native';\nimport ModalPresentationContext from '../../utils/ModalPresentationContext';\nimport useKeyboardManager from '../../utils/useKeyboardManager';\nimport Card from './Card';\nconst EPSILON = 0.1;\nfunction CardContainer(_ref) {\n  let {\n    interpolationIndex,\n    index,\n    active,\n    closing,\n    gesture,\n    focused,\n    modal,\n    getPreviousScene,\n    getFocusedRoute,\n    headerDarkContent,\n    hasAbsoluteFloatHeader,\n    headerHeight,\n    onHeaderHeightChange,\n    isParentHeaderShown,\n    isNextScreenTransparent,\n    detachCurrentScreen,\n    layout,\n    onCloseRoute,\n    onOpenRoute,\n    onGestureCancel,\n    onGestureEnd,\n    onGestureStart,\n    onTransitionEnd,\n    onTransitionStart,\n    renderHeader,\n    renderScene,\n    safeAreaInsetBottom,\n    safeAreaInsetLeft,\n    safeAreaInsetRight,\n    safeAreaInsetTop,\n    scene\n  } = _ref;\n  const parentHeaderHeight = React.useContext(HeaderHeightContext);\n  const {\n    onPageChangeStart,\n    onPageChangeCancel,\n    onPageChangeConfirm\n  } = useKeyboardManager(React.useCallback(() => {\n    const {\n      options,\n      navigation\n    } = scene.descriptor;\n    return navigation.isFocused() && options.keyboardHandlingEnabled !== false;\n  }, [scene.descriptor]));\n  const handleOpen = () => {\n    const {\n      route\n    } = scene.descriptor;\n    onTransitionEnd({\n      route\n    }, false);\n    onOpenRoute({\n      route\n    });\n  };\n  const handleClose = () => {\n    const {\n      route\n    } = scene.descriptor;\n    onTransitionEnd({\n      route\n    }, true);\n    onCloseRoute({\n      route\n    });\n  };\n  const handleGestureBegin = () => {\n    const {\n      route\n    } = scene.descriptor;\n    onPageChangeStart();\n    onGestureStart({\n      route\n    });\n  };\n  const handleGestureCanceled = () => {\n    const {\n      route\n    } = scene.descriptor;\n    onPageChangeCancel();\n    onGestureCancel({\n      route\n    });\n  };\n  const handleGestureEnd = () => {\n    const {\n      route\n    } = scene.descriptor;\n    onGestureEnd({\n      route\n    });\n  };\n  const handleTransition = _ref2 => {\n    let {\n      closing,\n      gesture\n    } = _ref2;\n    const {\n      route\n    } = scene.descriptor;\n    if (!gesture) {\n      onPageChangeConfirm === null || onPageChangeConfirm === void 0 ? void 0 : onPageChangeConfirm(true);\n    } else if (active && closing) {\n      onPageChangeConfirm === null || onPageChangeConfirm === void 0 ? void 0 : onPageChangeConfirm(false);\n    } else {\n      onPageChangeCancel === null || onPageChangeCancel === void 0 ? void 0 : onPageChangeCancel();\n    }\n    onTransitionStart === null || onTransitionStart === void 0 ? void 0 : onTransitionStart({\n      route\n    }, closing);\n  };\n  const insets = {\n    top: safeAreaInsetTop,\n    right: safeAreaInsetRight,\n    bottom: safeAreaInsetBottom,\n    left: safeAreaInsetLeft\n  };\n  const {\n    colors\n  } = useTheme();\n  const [pointerEvents, setPointerEvents] = React.useState('box-none');\n  React.useEffect(() => {\n    var _scene$progress$next, _scene$progress$next$;\n    const listener = (_scene$progress$next = scene.progress.next) === null || _scene$progress$next === void 0 ? void 0 : (_scene$progress$next$ = _scene$progress$next.addListener) === null || _scene$progress$next$ === void 0 ? void 0 : _scene$progress$next$.call(_scene$progress$next, _ref3 => {\n      let {\n        value\n      } = _ref3;\n      setPointerEvents(value <= EPSILON ? 'box-none' : 'none');\n    });\n    return () => {\n      if (listener) {\n        var _scene$progress$next2, _scene$progress$next3;\n        (_scene$progress$next2 = scene.progress.next) === null || _scene$progress$next2 === void 0 ? void 0 : (_scene$progress$next3 = _scene$progress$next2.removeListener) === null || _scene$progress$next3 === void 0 ? void 0 : _scene$progress$next3.call(_scene$progress$next2, listener);\n      }\n    };\n  }, [pointerEvents, scene.progress.next]);\n  const {\n    presentation,\n    animationEnabled,\n    cardOverlay,\n    cardOverlayEnabled,\n    cardShadowEnabled,\n    cardStyle,\n    cardStyleInterpolator,\n    gestureDirection,\n    gestureEnabled,\n    gestureResponseDistance,\n    gestureVelocityImpact,\n    headerMode,\n    headerShown,\n    transitionSpec\n  } = scene.descriptor.options;\n  const previousScene = getPreviousScene({\n    route: scene.descriptor.route\n  });\n  let backTitle;\n  if (previousScene) {\n    const {\n      options,\n      route\n    } = previousScene.descriptor;\n    backTitle = getHeaderTitle(options, route.name);\n  }\n  const headerBack = React.useMemo(() => backTitle !== undefined ? {\n    title: backTitle\n  } : undefined, [backTitle]);\n  return /*#__PURE__*/React.createElement(Card, {\n    interpolationIndex: interpolationIndex,\n    gestureDirection: gestureDirection,\n    layout: layout,\n    insets: insets,\n    gesture: gesture,\n    current: scene.progress.current,\n    next: scene.progress.next,\n    closing: closing,\n    onOpen: handleOpen,\n    onClose: handleClose,\n    overlay: cardOverlay,\n    overlayEnabled: cardOverlayEnabled,\n    shadowEnabled: cardShadowEnabled,\n    onTransition: handleTransition,\n    onGestureBegin: handleGestureBegin,\n    onGestureCanceled: handleGestureCanceled,\n    onGestureEnd: handleGestureEnd,\n    gestureEnabled: index === 0 ? false : gestureEnabled,\n    gestureResponseDistance: gestureResponseDistance,\n    gestureVelocityImpact: gestureVelocityImpact,\n    transitionSpec: transitionSpec,\n    styleInterpolator: cardStyleInterpolator,\n    accessibilityElementsHidden: !focused,\n    importantForAccessibility: focused ? 'auto' : 'no-hide-descendants',\n    pointerEvents: active ? 'box-none' : pointerEvents,\n    pageOverflowEnabled: headerMode !== 'float' && presentation !== 'modal',\n    headerDarkContent: headerDarkContent,\n    containerStyle: hasAbsoluteFloatHeader && headerMode !== 'screen' ? {\n      marginTop: headerHeight\n    } : null,\n    contentStyle: [{\n      backgroundColor: presentation === 'transparentModal' ? 'transparent' : colors.background\n    }, cardStyle],\n    style: [{\n      // This is necessary to avoid unfocused larger pages increasing scroll area\n      // The issue can be seen on the web when a smaller screen is pushed over a larger one\n      overflow: active ? undefined : 'hidden',\n      display:\n      // Hide unfocused screens when animation isn't enabled\n      // This is also necessary for a11y on web\n      animationEnabled === false && isNextScreenTransparent === false && detachCurrentScreen !== false && !focused ? 'none' : 'flex'\n    }, StyleSheet.absoluteFill]\n  }, /*#__PURE__*/React.createElement(View, {\n    style: styles.container\n  }, /*#__PURE__*/React.createElement(ModalPresentationContext.Provider, {\n    value: modal\n  }, /*#__PURE__*/React.createElement(View, {\n    style: styles.scene\n  }, /*#__PURE__*/React.createElement(HeaderBackContext.Provider, {\n    value: headerBack\n  }, /*#__PURE__*/React.createElement(HeaderShownContext.Provider, {\n    value: isParentHeaderShown || headerShown !== false\n  }, /*#__PURE__*/React.createElement(HeaderHeightContext.Provider, {\n    value: headerShown ? headerHeight : parentHeaderHeight ?? 0\n  }, renderScene({\n    route: scene.descriptor.route\n  }))))), headerMode !== 'float' ? renderHeader({\n    mode: 'screen',\n    layout,\n    scenes: [previousScene, scene],\n    getPreviousScene,\n    getFocusedRoute,\n    onContentHeightChange: onHeaderHeightChange\n  }) : null)));\n}\nexport default /*#__PURE__*/React.memo(CardContainer);\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    flexDirection: 'column-reverse'\n  },\n  scene: {\n    flex: 1\n  }\n});\n//# sourceMappingURL=CardContainer.js.map"]},"metadata":{},"sourceType":"module"}