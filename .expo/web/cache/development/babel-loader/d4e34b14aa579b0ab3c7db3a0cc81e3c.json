{"ast":null,"code":"import _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nvar _excluded = [\"style\"];\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nimport React, { useEffect } from 'react';\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport View from \"react-native-web/dist/exports/View\";\nvar PortalContext = React.createContext(null);\nvar globalOverlayCounter = 0;\nexport function PortalProvider(props) {\n  var _React$useState = React.useState([]),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      items = _React$useState2[0],\n      setItems = _React$useState2[1];\n\n  var setOverlayItem = function setOverlayItem(element) {\n    var overlayId = ++globalOverlayCounter;\n    setItems(function (prev) {\n      return prev.concat([{\n        id: overlayId,\n        node: element\n      }]);\n    });\n    return overlayId;\n  };\n\n  var updateOverlayItem = function updateOverlayItem(id, node) {\n    setItems(function (prev) {\n      var overlayItem = prev.find(function (item) {\n        return item.id == id;\n      });\n\n      if (!overlayItem) {\n        return prev.concat([{\n          id: id,\n          node: node\n        }]);\n      } else {\n        return prev.map(function (item) {\n          if (item.id === id) {\n            return {\n              id: id,\n              node: node\n            };\n          }\n\n          return item;\n        });\n      }\n    });\n  };\n\n  var removeOverlayItem = function removeOverlayItem(id) {\n    setItems(function (prev) {\n      var newItems = prev.filter(function (item) {\n        return item.id !== id;\n      });\n      return newItems;\n    });\n  };\n\n  return React.createElement(PortalContext.Provider, {\n    value: {\n      items: items,\n      setOverlayItem: setOverlayItem,\n      removeOverlayItem: removeOverlayItem,\n      updateOverlayItem: updateOverlayItem,\n      isSSR: props === null || props === void 0 ? void 0 : props.isSSR\n    }\n  }, props.children, items.map(function (item) {\n    return React.createElement(React.Fragment, {\n      key: item.id\n    }, item.node);\n  }));\n}\n\nfunction OverlayView(_ref) {\n  var style = _ref.style,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return React.createElement(View, _extends({\n    pointerEvents: \"box-none\",\n    style: [StyleSheet.absoluteFill, style],\n    collapsable: false\n  }, props));\n}\n\nexport var OverlayProvider = PortalProvider;\nexport function OverlayContainer(props) {\n  var context = usePortalProvider();\n  var overlayId = React.useRef(undefined);\n  var element = React.createElement(OverlayView, props);\n  useEffect(function () {\n    if (overlayId.current === undefined) {\n      overlayId.current = context === null || context === void 0 ? void 0 : context.setOverlayItem(element);\n    } else {\n        if (overlayId.current) {\n          context === null || context === void 0 ? void 0 : context.updateOverlayItem(overlayId.current, element);\n        }\n      }\n  }, [props]);\n  useEffect(function () {\n    return function () {\n      if (overlayId.current) {\n        context === null || context === void 0 ? void 0 : context.removeOverlayItem(overlayId.current);\n      }\n    };\n  }, []);\n\n  if (context !== null && context !== void 0 && context.isSSR && !overlayId.current) {\n    return React.createElement(View, {\n      style: {\n        display: 'none'\n      }\n    }, element);\n  }\n\n  return null;\n}\n\nfunction usePortalProvider() {\n  var context = React.useContext(PortalContext);\n  return context;\n}","map":{"version":3,"sources":["Portal.tsx"],"names":["PortalContext","React","globalOverlayCounter","setOverlayItem","element","overlayId","setItems","prev","id","node","updateOverlayItem","overlayItem","item","removeOverlayItem","newItems","items","isSSR","props","StyleSheet","OverlayProvider","context","usePortalProvider","useEffect","display"],"mappings":"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","sourcesContent":["import React, { useEffect } from 'react';\nimport type { ReactNode } from 'react';\nimport { StyleSheet, View, ViewProps } from 'react-native';\n\ntype OverlayItem = {\n  id: number;\n  node: ReactNode;\n};\n\ninterface PortalContext {\n  items: Array<OverlayItem>;\n  setOverlayItem: (node: ReactNode) => number;\n  removeOverlayItem: (id: number) => void;\n  updateOverlayItem: (id: number, node: ReactNode) => void;\n  isSSR?: boolean;\n}\n\ninterface ModalProviderProps extends ViewProps {\n  children: ReactNode;\n  provider?: boolean;\n}\n\nconst PortalContext = React.createContext<PortalContext | null>(null);\n\nlet globalOverlayCounter = 0;\n\nexport function PortalProvider(props: {\n  children: ReactNode;\n  isSSR?: boolean;\n}) {\n  const [items, setItems] = React.useState<Array<OverlayItem>>([]);\n\n  const setOverlayItem = (element: ReactNode) => {\n    const overlayId = ++globalOverlayCounter;\n    setItems((prev) => prev.concat([{ id: overlayId, node: element }]));\n    return overlayId;\n  };\n\n  const updateOverlayItem = (id: number, node: ReactNode) => {\n    setItems((prev) => {\n      const overlayItem = prev.find((item) => item.id == id);\n      if (!overlayItem) {\n        return prev.concat([{ id: id, node }]);\n      } else {\n        return prev.map((item) => {\n          if (item.id === id) {\n            return { id, node };\n          }\n\n          return item;\n        });\n      }\n    });\n  };\n\n  const removeOverlayItem = (id: number) => {\n    setItems((prev) => {\n      const newItems = prev.filter((item) => item.id !== id);\n      return newItems;\n    });\n  };\n\n  return (\n    <PortalContext.Provider\n      value={{\n        items,\n        setOverlayItem,\n        removeOverlayItem,\n        updateOverlayItem,\n        isSSR: props?.isSSR,\n      }}\n    >\n      {props.children}\n\n      {/* Render Overlays */}\n      {items.map((item) => {\n        return <React.Fragment key={item.id}>{item.node}</React.Fragment>;\n      })}\n    </PortalContext.Provider>\n  );\n}\n\nfunction OverlayView({ style, ...props }: ModalProviderProps) {\n  return (\n    <View\n      pointerEvents=\"box-none\"\n      style={[StyleSheet.absoluteFill, style]}\n      collapsable={false}\n      {...props}\n    />\n  );\n}\n\nexport const OverlayProvider = PortalProvider;\n\nexport function OverlayContainer(props: ModalProviderProps) {\n  const context = usePortalProvider();\n  const overlayId = React.useRef<number | undefined>(undefined);\n  const element = <OverlayView {...props} />;\n\n  useEffect(\n    () => {\n      // Mount\n      if (overlayId.current === undefined) {\n        overlayId.current = context?.setOverlayItem(element);\n      }\n      // Update\n      else {\n        if (overlayId.current) {\n          context?.updateOverlayItem(overlayId.current, element);\n        }\n      }\n    },\n    // To re-render the child\n    [props]\n  );\n\n  // Unmount\n  useEffect(() => {\n    return () => {\n      if (overlayId.current) {\n        context?.removeOverlayItem(overlayId.current);\n      }\n    };\n  }, []);\n\n  // Rendering elements for SSR\n  if (context?.isSSR && !overlayId.current) {\n    return <View style={{ display: 'none' }}>{element}</View>;\n  }\n  return null;\n}\n\nfunction usePortalProvider() {\n  const context = React.useContext(PortalContext);\n  return context;\n}\n"]},"metadata":{},"sourceType":"module"}