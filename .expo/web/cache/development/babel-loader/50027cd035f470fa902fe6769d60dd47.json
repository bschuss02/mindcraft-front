{"ast":null,"code":"import * as React from 'react';\nimport NavigationContext from \"./NavigationContext\";\nexport default function useFocusEvents(_ref) {\n  var state = _ref.state,\n      emitter = _ref.emitter;\n  var navigation = React.useContext(NavigationContext);\n  var lastFocusedKeyRef = React.useRef();\n  var currentFocusedKey = state.routes[state.index].key;\n  React.useEffect(function () {\n    return navigation === null || navigation === void 0 ? void 0 : navigation.addListener('focus', function () {\n      lastFocusedKeyRef.current = currentFocusedKey;\n      emitter.emit({\n        type: 'focus',\n        target: currentFocusedKey\n      });\n    });\n  }, [currentFocusedKey, emitter, navigation]);\n  React.useEffect(function () {\n    return navigation === null || navigation === void 0 ? void 0 : navigation.addListener('blur', function () {\n      lastFocusedKeyRef.current = undefined;\n      emitter.emit({\n        type: 'blur',\n        target: currentFocusedKey\n      });\n    });\n  }, [currentFocusedKey, emitter, navigation]);\n  React.useEffect(function () {\n    var lastFocusedKey = lastFocusedKeyRef.current;\n    lastFocusedKeyRef.current = currentFocusedKey;\n\n    if (lastFocusedKey === undefined && !navigation) {\n      emitter.emit({\n        type: 'focus',\n        target: currentFocusedKey\n      });\n    }\n\n    if (lastFocusedKey === currentFocusedKey || !(navigation ? navigation.isFocused() : true)) {\n      return;\n    }\n\n    if (lastFocusedKey === undefined) {\n      return;\n    }\n\n    emitter.emit({\n      type: 'blur',\n      target: lastFocusedKey\n    });\n    emitter.emit({\n      type: 'focus',\n      target: currentFocusedKey\n    });\n  }, [currentFocusedKey, emitter, navigation]);\n}","map":{"version":3,"sources":["useFocusEvents.tsx"],"names":["React","NavigationContext","useFocusEvents","state","emitter","navigation","useContext","lastFocusedKeyRef","useRef","currentFocusedKey","routes","index","key","useEffect","addListener","current","emit","type","target","undefined","lastFocusedKey","isFocused"],"mappings":"AACA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AAEA,OAAOC,iBAAP;AAYA,eAAe,SAASC,cAAT,CAAuB,IAAvB,EAGI;AAHmD,MACpEC,KADoE,GAGrD,IAHqD,CACpEA,KADoE;AAAA,MAEpEC,OAFoE,GAGrD,IAHqD,CAEpEA,OAFoE;AAIpE,MAAMC,UAAU,GAAGL,KAAK,CAACM,UAANN,CAAiBC,iBAAjBD,CAAnB;AACA,MAAMO,iBAAiB,GAAGP,KAAK,CAACQ,MAANR,EAA1B;AAEA,MAAMS,iBAAiB,GAAGN,KAAK,CAACO,MAANP,CAAaA,KAAK,CAACQ,KAAnBR,EAA0BS,GAApD;AAIAZ,EAAAA,KAAK,CAACa,SAANb,CACE;AAAA,WACEK,UAAU,KAAA,IAAVA,IAAAA,UAAU,KAAA,KAAA,CAAVA,GAAU,KAAA,CAAVA,GAAAA,UAAU,CAAES,WAAZT,CAAwB,OAAxBA,EAAiC,YAAM;AACrCE,MAAAA,iBAAiB,CAACQ,OAAlBR,GAA4BE,iBAA5BF;AACAH,MAAAA,OAAO,CAACY,IAARZ,CAAa;AAAEa,QAAAA,IAAI,EAAE,OAAR;AAAiBC,QAAAA,MAAM,EAAET;AAAzB,OAAbL;AACD,KAHDC,CADF;AAAA,GADFL,EAME,CAACS,iBAAD,EAAoBL,OAApB,EAA6BC,UAA7B,CANFL;AASAA,EAAAA,KAAK,CAACa,SAANb,CACE;AAAA,WACEK,UAAU,KAAA,IAAVA,IAAAA,UAAU,KAAA,KAAA,CAAVA,GAAU,KAAA,CAAVA,GAAAA,UAAU,CAAES,WAAZT,CAAwB,MAAxBA,EAAgC,YAAM;AACpCE,MAAAA,iBAAiB,CAACQ,OAAlBR,GAA4BY,SAA5BZ;AACAH,MAAAA,OAAO,CAACY,IAARZ,CAAa;AAAEa,QAAAA,IAAI,EAAE,MAAR;AAAgBC,QAAAA,MAAM,EAAET;AAAxB,OAAbL;AACD,KAHDC,CADF;AAAA,GADFL,EAME,CAACS,iBAAD,EAAoBL,OAApB,EAA6BC,UAA7B,CANFL;AASAA,EAAAA,KAAK,CAACa,SAANb,CAAgB,YAAM;AACpB,QAAMoB,cAAc,GAAGb,iBAAiB,CAACQ,OAAzC;AAEAR,IAAAA,iBAAiB,CAACQ,OAAlBR,GAA4BE,iBAA5BF;;AAIA,QAAIa,cAAc,KAAKD,SAAnBC,IAAgC,CAACf,UAArC,EAAiD;AAC/CD,MAAAA,OAAO,CAACY,IAARZ,CAAa;AAAEa,QAAAA,IAAI,EAAE,OAAR;AAAiBC,QAAAA,MAAM,EAAET;AAAzB,OAAbL;AACF;;AAIA,QACEgB,cAAc,KAAKX,iBAAnBW,IACA,EAAEf,UAAU,GAAGA,UAAU,CAACgB,SAAXhB,EAAH,GAA4B,IAAxC,CAFF,EAGE;AACA;AACF;;AAEA,QAAIe,cAAc,KAAKD,SAAvB,EAAkC;AAEhC;AACF;;AAEAf,IAAAA,OAAO,CAACY,IAARZ,CAAa;AAAEa,MAAAA,IAAI,EAAE,MAAR;AAAgBC,MAAAA,MAAM,EAAEE;AAAxB,KAAbhB;AACAA,IAAAA,OAAO,CAACY,IAARZ,CAAa;AAAEa,MAAAA,IAAI,EAAE,OAAR;AAAiBC,MAAAA,MAAM,EAAET;AAAzB,KAAbL;AACD,GA3BDJ,EA2BG,CAACS,iBAAD,EAAoBL,OAApB,EAA6BC,UAA7B,CA3BHL;AA4BF","sourceRoot":"../../src","sourcesContent":["import * as React from 'react';\nimport NavigationContext from './NavigationContext';\n/**\n * Hook to take care of emitting `focus` and `blur` events.\n */\nexport default function useFocusEvents(_ref) {\n  let {\n    state,\n    emitter\n  } = _ref;\n  const navigation = React.useContext(NavigationContext);\n  const lastFocusedKeyRef = React.useRef();\n  const currentFocusedKey = state.routes[state.index].key;\n\n  // When the parent screen changes its focus state, we also need to change child's focus\n  // Coz the child screen can't be focused if the parent screen is out of focus\n  React.useEffect(() => navigation === null || navigation === void 0 ? void 0 : navigation.addListener('focus', () => {\n    lastFocusedKeyRef.current = currentFocusedKey;\n    emitter.emit({\n      type: 'focus',\n      target: currentFocusedKey\n    });\n  }), [currentFocusedKey, emitter, navigation]);\n  React.useEffect(() => navigation === null || navigation === void 0 ? void 0 : navigation.addListener('blur', () => {\n    lastFocusedKeyRef.current = undefined;\n    emitter.emit({\n      type: 'blur',\n      target: currentFocusedKey\n    });\n  }), [currentFocusedKey, emitter, navigation]);\n  React.useEffect(() => {\n    const lastFocusedKey = lastFocusedKeyRef.current;\n    lastFocusedKeyRef.current = currentFocusedKey;\n\n    // We wouldn't have `lastFocusedKey` on initial mount\n    // Fire focus event for the current route on mount if there's no parent navigator\n    if (lastFocusedKey === undefined && !navigation) {\n      emitter.emit({\n        type: 'focus',\n        target: currentFocusedKey\n      });\n    }\n\n    // We should only emit events when the focused key changed and navigator is focused\n    // When navigator is not focused, screens inside shouldn't receive focused status either\n    if (lastFocusedKey === currentFocusedKey || !(navigation ? navigation.isFocused() : true)) {\n      return;\n    }\n    if (lastFocusedKey === undefined) {\n      // Only fire events after initial mount\n      return;\n    }\n    emitter.emit({\n      type: 'blur',\n      target: lastFocusedKey\n    });\n    emitter.emit({\n      type: 'focus',\n      target: currentFocusedKey\n    });\n  }, [currentFocusedKey, emitter, navigation]);\n}\n//# sourceMappingURL=useFocusEvents.js.map"]},"metadata":{},"sourceType":"module"}