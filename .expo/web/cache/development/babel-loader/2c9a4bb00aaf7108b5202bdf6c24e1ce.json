{"ast":null,"code":"import * as React from 'react';\nimport NavigationBuilderContext from \"./NavigationBuilderContext\";\nimport useOnPreventRemove, { shouldPreventRemove } from \"./useOnPreventRemove\";\nexport default function useOnAction(_ref) {\n  var router = _ref.router,\n      getState = _ref.getState,\n      setState = _ref.setState,\n      key = _ref.key,\n      actionListeners = _ref.actionListeners,\n      beforeRemoveListeners = _ref.beforeRemoveListeners,\n      routerConfigOptions = _ref.routerConfigOptions,\n      emitter = _ref.emitter;\n\n  var _React$useContext = React.useContext(NavigationBuilderContext),\n      onActionParent = _React$useContext.onAction,\n      onRouteFocusParent = _React$useContext.onRouteFocus,\n      addListenerParent = _React$useContext.addListener,\n      onDispatchAction = _React$useContext.onDispatchAction;\n\n  var routerConfigOptionsRef = React.useRef(routerConfigOptions);\n  React.useEffect(function () {\n    routerConfigOptionsRef.current = routerConfigOptions;\n  });\n  var onAction = React.useCallback(function (action) {\n    var visitedNavigators = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : new Set();\n    var state = getState();\n\n    if (visitedNavigators.has(state.key)) {\n      return false;\n    }\n\n    visitedNavigators.add(state.key);\n\n    if (typeof action.target !== 'string' || action.target === state.key) {\n      var result = router.getStateForAction(state, action, routerConfigOptionsRef.current);\n      result = result === null && action.target === state.key ? state : result;\n\n      if (result !== null) {\n        onDispatchAction(action, state === result);\n\n        if (state !== result) {\n          var isPrevented = shouldPreventRemove(emitter, beforeRemoveListeners, state.routes, result.routes, action);\n\n          if (isPrevented) {\n            return true;\n          }\n\n          setState(result);\n        }\n\n        if (onRouteFocusParent !== undefined) {\n          var shouldFocus = router.shouldActionChangeFocus(action);\n\n          if (shouldFocus && key !== undefined) {\n            onRouteFocusParent(key);\n          }\n        }\n\n        return true;\n      }\n    }\n\n    if (onActionParent !== undefined) {\n      if (onActionParent(action, visitedNavigators)) {\n        return true;\n      }\n    }\n\n    for (var i = actionListeners.length - 1; i >= 0; i--) {\n      var listener = actionListeners[i];\n\n      if (listener(action, visitedNavigators)) {\n        return true;\n      }\n    }\n\n    return false;\n  }, [actionListeners, beforeRemoveListeners, emitter, getState, key, onActionParent, onDispatchAction, onRouteFocusParent, router, setState]);\n  useOnPreventRemove({\n    getState: getState,\n    emitter: emitter,\n    beforeRemoveListeners: beforeRemoveListeners\n  });\n  React.useEffect(function () {\n    return addListenerParent === null || addListenerParent === void 0 ? void 0 : addListenerParent('action', onAction);\n  }, [addListenerParent, onAction]);\n  return onAction;\n}","map":{"version":3,"sources":["useOnAction.tsx"],"names":["React","NavigationBuilderContext","useOnPreventRemove","shouldPreventRemove","useOnAction","router","getState","setState","key","actionListeners","beforeRemoveListeners","routerConfigOptions","emitter","onAction","onActionParent","onRouteFocus","onRouteFocusParent","addListener","addListenerParent","onDispatchAction","useContext","routerConfigOptionsRef","useRef","useEffect","current","useCallback","action","visitedNavigators","Set","state","has","add","target","result","getStateForAction","isPrevented","routes","undefined","shouldFocus","shouldActionChangeFocus","i","length","listener"],"mappings":"AAOA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AAEA,OAAOC,wBAAP;AAMA,OAAOC,kBAAP,IAA6BC,mBAA7B;AAsBA,eAAe,SAASC,WAAT,CAAoB,IAApB,EASH;AATwB,MAClCC,MADkC,GAS1B,IAT0B,CAClCA,MADkC;AAAA,MAElCC,QAFkC,GAS1B,IAT0B,CAElCA,QAFkC;AAAA,MAGlCC,QAHkC,GAS1B,IAT0B,CAGlCA,QAHkC;AAAA,MAIlCC,GAJkC,GAS1B,IAT0B,CAIlCA,GAJkC;AAAA,MAKlCC,eALkC,GAS1B,IAT0B,CAKlCA,eALkC;AAAA,MAMlCC,qBANkC,GAS1B,IAT0B,CAMlCA,qBANkC;AAAA,MAOlCC,mBAPkC,GAS1B,IAT0B,CAOlCA,mBAPkC;AAAA,MAQlCC,OARkC,GAS1B,IAT0B,CAQlCA,OARkC;;AAUlC,0BAKIZ,KAAK,CAACoB,UAANpB,CAAiBC,wBAAjBD,CALJ;AAAA,MACYc,cADZ,qBACED,QADF;AAAA,MAEgBG,kBAFhB,qBAEED,YAFF;AAAA,MAGeG,iBAHf,qBAGED,WAHF;AAAA,MAIEE,gBAJF,qBAIEA,gBAJF;;AAOA,MAAME,sBAAsB,GAC1BrB,KAAK,CAACsB,MAANtB,CAAkCW,mBAAlCX,CADF;AAGAA,EAAAA,KAAK,CAACuB,SAANvB,CAAgB,YAAM;AACpBqB,IAAAA,sBAAsB,CAACG,OAAvBH,GAAiCV,mBAAjCU;AACD,GAFDrB;AAIA,MAAMa,QAAQ,GAAGb,KAAK,CAACyB,WAANzB,CACf,UACE0B,MADF,EAGK;AAAA,QADHC,iBAA8B,GAAA,SAAA,CAAA,MAAA,GAAA,CAAA,IAAA,SAAA,CAAA,CAAA,CAAA,KAAA,SAAA,GAAA,SAAA,CAAA,CAAA,CAAA,GAAG,IAAIC,GAAJ,EAC9B;AACH,QAAMC,KAAK,GAAGvB,QAAQ,EAAtB;;AAIA,QAAIqB,iBAAiB,CAACG,GAAlBH,CAAsBE,KAAK,CAACrB,GAA5BmB,CAAJ,EAAsC;AACpC,aAAO,KAAP;AACF;;AAEAA,IAAAA,iBAAiB,CAACI,GAAlBJ,CAAsBE,KAAK,CAACrB,GAA5BmB;;AAEA,QAAI,OAAOD,MAAM,CAACM,MAAd,KAAyB,QAAzB,IAAqCN,MAAM,CAACM,MAAPN,KAAkBG,KAAK,CAACrB,GAAjE,EAAsE;AACpE,UAAIyB,MAAM,GAAG5B,MAAM,CAAC6B,iBAAP7B,CACXwB,KADWxB,EAEXqB,MAFWrB,EAGXgB,sBAAsB,CAACG,OAHZnB,CAAb;AAQA4B,MAAAA,MAAM,GACJA,MAAM,KAAK,IAAXA,IAAmBP,MAAM,CAACM,MAAPN,KAAkBG,KAAK,CAACrB,GAA3CyB,GAAiDJ,KAAjDI,GAAyDA,MAD3DA;;AAGA,UAAIA,MAAM,KAAK,IAAf,EAAqB;AACnBd,QAAAA,gBAAgB,CAACO,MAAD,EAASG,KAAK,KAAKI,MAAnB,CAAhBd;;AAEA,YAAIU,KAAK,KAAKI,MAAd,EAAsB;AACpB,cAAME,WAAW,GAAGhC,mBAAmB,CACrCS,OADqC,EAErCF,qBAFqC,EAGrCmB,KAAK,CAACO,MAH+B,EAIrCH,MAAM,CAACG,MAJ8B,EAKrCV,MALqC,CAAvC;;AAQA,cAAIS,WAAJ,EAAiB;AACf,mBAAO,IAAP;AACF;;AAEA5B,UAAAA,QAAQ,CAAC0B,MAAD,CAAR1B;AACF;;AAEA,YAAIS,kBAAkB,KAAKqB,SAA3B,EAAsC;AAGpC,cAAMC,WAAW,GAAGjC,MAAM,CAACkC,uBAAPlC,CAA+BqB,MAA/BrB,CAApB;;AAEA,cAAIiC,WAAW,IAAI9B,GAAG,KAAK6B,SAA3B,EAAsC;AACpCrB,YAAAA,kBAAkB,CAACR,GAAD,CAAlBQ;AACF;AACF;;AAEA,eAAO,IAAP;AACF;AACF;;AAEA,QAAIF,cAAc,KAAKuB,SAAvB,EAAkC;AAEhC,UAAIvB,cAAc,CAACY,MAAD,EAASC,iBAAT,CAAlB,EAA+C;AAC7C,eAAO,IAAP;AACF;AACF;;AAGA,SAAK,IAAIa,CAAC,GAAG/B,eAAe,CAACgC,MAAhBhC,GAAyB,CAAtC,EAAyC+B,CAAC,IAAI,CAA9C,EAAiDA,CAAC,EAAlD,EAAsD;AACpD,UAAME,QAAQ,GAAGjC,eAAe,CAAC+B,CAAD,CAAhC;;AAEA,UAAIE,QAAQ,CAAChB,MAAD,EAASC,iBAAT,CAAZ,EAAyC;AACvC,eAAO,IAAP;AACF;AACF;;AAEA,WAAO,KAAP;AACD,GA7Ec3B,EA8Ef,CACES,eADF,EAEEC,qBAFF,EAGEE,OAHF,EAIEN,QAJF,EAKEE,GALF,EAMEM,cANF,EAOEK,gBAPF,EAQEH,kBARF,EASEX,MATF,EAUEE,QAVF,CA9EeP,CAAjB;AA4FAE,EAAAA,kBAAkB,CAAC;AACjBI,IAAAA,QAAQ,EAARA,QADiB;AAEjBM,IAAAA,OAAO,EAAPA,OAFiB;AAGjBF,IAAAA,qBAAAA,EAAAA;AAHiB,GAAD,CAAlBR;AAMAF,EAAAA,KAAK,CAACuB,SAANvB,CACE;AAAA,WAAMkB,iBAAiB,KAAA,IAAjBA,IAAAA,iBAAiB,KAAA,KAAA,CAAjBA,GAAiB,KAAA,CAAjBA,GAAAA,iBAAiB,CAAG,QAAH,EAAaL,QAAb,CAAvB;AAAA,GADFb,EAEE,CAACkB,iBAAD,EAAoBL,QAApB,CAFFb;AAKA,SAAOa,QAAP;AACF","sourceRoot":"../../src","sourcesContent":["import * as React from 'react';\nimport NavigationBuilderContext from './NavigationBuilderContext';\nimport useOnPreventRemove, { shouldPreventRemove } from './useOnPreventRemove';\n/**\n * Hook to handle actions for a navigator, including state updates and bubbling.\n *\n * Bubbling an action is achieved in 2 ways:\n * 1. To bubble action to parent, we expose the action handler in context and then access the parent context\n * 2. To bubble action to child, child adds event listeners subscribing to actions from parent\n *\n * When the action handler handles as action, it returns `true`, otherwise `false`.\n */\nexport default function useOnAction(_ref) {\n  let {\n    router,\n    getState,\n    setState,\n    key,\n    actionListeners,\n    beforeRemoveListeners,\n    routerConfigOptions,\n    emitter\n  } = _ref;\n  const {\n    onAction: onActionParent,\n    onRouteFocus: onRouteFocusParent,\n    addListener: addListenerParent,\n    onDispatchAction\n  } = React.useContext(NavigationBuilderContext);\n  const routerConfigOptionsRef = React.useRef(routerConfigOptions);\n  React.useEffect(() => {\n    routerConfigOptionsRef.current = routerConfigOptions;\n  });\n  const onAction = React.useCallback(function (action) {\n    let visitedNavigators = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : new Set();\n    const state = getState();\n\n    // Since actions can bubble both up and down, they could come to the same navigator again\n    // We keep track of navigators which have already tried to handle the action and return if it's already visited\n    if (visitedNavigators.has(state.key)) {\n      return false;\n    }\n    visitedNavigators.add(state.key);\n    if (typeof action.target !== 'string' || action.target === state.key) {\n      let result = router.getStateForAction(state, action, routerConfigOptionsRef.current);\n\n      // If a target is specified and set to current navigator, the action shouldn't bubble\n      // So instead of `null`, we use the state object for such cases to signal that action was handled\n      result = result === null && action.target === state.key ? state : result;\n      if (result !== null) {\n        onDispatchAction(action, state === result);\n        if (state !== result) {\n          const isPrevented = shouldPreventRemove(emitter, beforeRemoveListeners, state.routes, result.routes, action);\n          if (isPrevented) {\n            return true;\n          }\n          setState(result);\n        }\n        if (onRouteFocusParent !== undefined) {\n          // Some actions such as `NAVIGATE` also want to bring the navigated route to focus in the whole tree\n          // This means we need to focus all of the parent navigators of this navigator as well\n          const shouldFocus = router.shouldActionChangeFocus(action);\n          if (shouldFocus && key !== undefined) {\n            onRouteFocusParent(key);\n          }\n        }\n        return true;\n      }\n    }\n    if (onActionParent !== undefined) {\n      // Bubble action to the parent if the current navigator didn't handle it\n      if (onActionParent(action, visitedNavigators)) {\n        return true;\n      }\n    }\n\n    // If the action wasn't handled by current navigator or a parent navigator, let children handle it\n    for (let i = actionListeners.length - 1; i >= 0; i--) {\n      const listener = actionListeners[i];\n      if (listener(action, visitedNavigators)) {\n        return true;\n      }\n    }\n    return false;\n  }, [actionListeners, beforeRemoveListeners, emitter, getState, key, onActionParent, onDispatchAction, onRouteFocusParent, router, setState]);\n  useOnPreventRemove({\n    getState,\n    emitter,\n    beforeRemoveListeners\n  });\n  React.useEffect(() => addListenerParent === null || addListenerParent === void 0 ? void 0 : addListenerParent('action', onAction), [addListenerParent, onAction]);\n  return onAction;\n}\n//# sourceMappingURL=useOnAction.js.map"]},"metadata":{},"sourceType":"module"}