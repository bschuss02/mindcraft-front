{"ast":null,"code":"import _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport React from 'react';\nimport AccessibilityInfo from \"react-native-web/dist/exports/AccessibilityInfo\";\nexport function useScreenReaderEnabled() {\n  var _React$useState = React.useState(false),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      enabled = _React$useState2[0],\n      setEnabled = _React$useState2[1];\n\n  var mountedRef = React.useRef(false);\n\n  var handleSetEnabled = function handleSetEnabled(value) {\n    if (mountedRef.current) {\n      setEnabled(value);\n    }\n  };\n\n  React.useEffect(function () {\n    mountedRef.current = true;\n\n    function setInitialValue() {\n      return _setInitialValue.apply(this, arguments);\n    }\n\n    function _setInitialValue() {\n      _setInitialValue = _asyncToGenerator(function* () {\n        var res = yield AccessibilityInfo.isScreenReaderEnabled();\n        handleSetEnabled(res);\n      });\n      return _setInitialValue.apply(this, arguments);\n    }\n\n    var handler = AccessibilityInfo.addEventListener('screenReaderChanged', function (event) {\n      handleSetEnabled(event);\n    });\n    setInitialValue();\n    return function () {\n      mountedRef.current = false;\n      AccessibilityInfo.removeEventListener('screenReaderChanged', handler);\n    };\n  });\n  return enabled;\n}","map":{"version":3,"sources":["useScreenReaderEnabled.ts"],"names":["React","mountedRef","handleSetEnabled","value","setEnabled","res","AccessibilityInfo","handler","event","setInitialValue"],"mappings":";;AAAA,OAAA,KAAA,MAAA,OAAA;;AAGA,OAAO,SAAA,sBAAA,GAAkC;AACvC,wBAA8BA,KAAK,CAALA,QAAAA,CAA9B,KAA8BA,CAA9B;AAAA;AAAA,MAAM,OAAN;AAAA,MAAM,UAAN;;AACA,MAAMC,UAAU,GAAGD,KAAK,CAALA,MAAAA,CAAnB,KAAmBA,CAAnB;;AAEA,MAAME,gBAAgB,GAAIC,SAApBD,gBAAoBC,CAAAA,KAAD,EAAoB;AAC3C,QAAIF,UAAU,CAAd,OAAA,EAAwB;AACtBG,MAAAA,UAAU,CAAVA,KAAU,CAAVA;AACD;AAHH,GAAA;;AAMAJ,EAAAA,KAAK,CAALA,SAAAA,CAAgB,YAAM;AACpBC,IAAAA,UAAU,CAAVA,OAAAA,GAAAA,IAAAA;;AADoB,aAEpB,eAFoB;AAAA;AAAA;;AAAA;AAAA,2CAEpB,aAAiC;AAC/B,YAAMI,GAAG,SAASC,iBAAiB,CAAnC,qBAAkBA,EAAlB;AACAJ,QAAAA,gBAAgB,CAAhBA,GAAgB,CAAhBA;AACD,OALmB;AAAA;AAAA;;AAOpB,QAAIK,OAAY,GAAG,iBAAiB,CAAjB,gBAAA,CAAA,qBAAA,EAEhBC,UAAAA,KAAD,EAAgB;AACdN,MAAAA,gBAAgB,CAAhBA,KAAgB,CAAhBA;AAHJ,KAAmB,CAAnB;AAOAO,IAAAA,eAAe;AACf,WAAO,YAAM;AACXR,MAAAA,UAAU,CAAVA,OAAAA,GAAAA,KAAAA;AACAK,MAAAA,iBAAiB,CAAjBA,mBAAAA,CAAAA,qBAAAA,EAAAA,OAAAA;AAFF,KAAA;AAfFN,GAAAA;AAqBA,SAAA,OAAA;AACD","sourcesContent":["import React from 'react';\nimport { AccessibilityInfo } from 'react-native';\n\nexport function useScreenReaderEnabled() {\n  const [enabled, setEnabled] = React.useState(false);\n  const mountedRef = React.useRef(false);\n\n  const handleSetEnabled = (value: boolean) => {\n    if (mountedRef.current) {\n      setEnabled(value);\n    }\n  };\n\n  React.useEffect(() => {\n    mountedRef.current = true;\n    async function setInitialValue() {\n      const res = await AccessibilityInfo.isScreenReaderEnabled();\n      handleSetEnabled(res);\n    }\n\n    let handler: any = AccessibilityInfo.addEventListener(\n      'screenReaderChanged',\n      (event: any) => {\n        handleSetEnabled(event);\n      }\n    );\n\n    setInitialValue();\n    return () => {\n      mountedRef.current = false;\n      AccessibilityInfo.removeEventListener('screenReaderChanged', handler);\n    };\n  });\n\n  return enabled;\n}\n"]},"metadata":{},"sourceType":"module"}