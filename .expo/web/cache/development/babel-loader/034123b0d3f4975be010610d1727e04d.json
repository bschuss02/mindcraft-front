{"ast":null,"code":"import _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nimport { Platform } from 'expo-modules-core';\nimport invariant from 'invariant';\nvar EventTypes = ['url'];\nvar listeners = [];\nexport default {\n  addEventListener: function addEventListener(type, listener) {\n    var _this = this;\n\n    if (!Platform.isDOMAvailable) {\n      return {\n        remove: function remove() {}\n      };\n    }\n\n    invariant(EventTypes.indexOf(type) !== -1, \"Linking.addEventListener(): \" + type + \" is not a valid event\");\n\n    var nativeListener = function nativeListener(nativeEvent) {\n      return listener({\n        url: window.location.href,\n        nativeEvent: nativeEvent\n      });\n    };\n\n    listeners.push({\n      listener: listener,\n      nativeListener: nativeListener\n    });\n    window.addEventListener('message', nativeListener, false);\n    return {\n      remove: function remove() {\n        _this.removeEventListener(type, listener);\n      }\n    };\n  },\n  removeEventListener: function removeEventListener(type, listener) {\n    if (!Platform.isDOMAvailable) {\n      return;\n    }\n\n    invariant(EventTypes.indexOf(type) !== -1, \"Linking.removeEventListener(): \" + type + \" is not a valid event.\");\n    var listenerIndex = listeners.findIndex(function (pair) {\n      return pair.listener === listener;\n    });\n    invariant(listenerIndex !== -1, 'Linking.removeEventListener(): cannot remove an unregistered event listener.');\n    var nativeListener = listeners[listenerIndex].nativeListener;\n    window.removeEventListener('message', nativeListener, false);\n    listeners.splice(listenerIndex, 1);\n  },\n  canOpenURL: function () {\n    var _canOpenURL = _asyncToGenerator(function* (url) {\n      return true;\n    });\n\n    function canOpenURL(_x) {\n      return _canOpenURL.apply(this, arguments);\n    }\n\n    return canOpenURL;\n  }(),\n  getInitialURL: function () {\n    var _getInitialURL = _asyncToGenerator(function* () {\n      if (!Platform.isDOMAvailable) return '';\n      return window.location.href;\n    });\n\n    function getInitialURL() {\n      return _getInitialURL.apply(this, arguments);\n    }\n\n    return getInitialURL;\n  }(),\n  openURL: function () {\n    var _openURL = _asyncToGenerator(function* (url) {\n      if (Platform.isDOMAvailable) {\n        window.location = new URL(url, window.location).toString();\n      }\n    });\n\n    function openURL(_x2) {\n      return _openURL.apply(this, arguments);\n    }\n\n    return openURL;\n  }()\n};","map":{"version":3,"sources":["../src/ExpoLinking.web.ts"],"names":[],"mappings":";AAAA,SAAS,QAAT,QAAyB,mBAAzB;AACA,OAAO,SAAP,MAAsB,WAAtB;AAIA,IAAM,UAAU,GAAG,CAAC,KAAD,CAAnB;AAEA,IAAM,SAAS,GAAmE,EAAlF;AAEA,eAAe;AACb,EAAA,gBADa,4BACI,IADJ,EACiB,QADjB,EACsC;AAAA;;AAEjD,QAAI,CAAC,QAAQ,CAAC,cAAd,EAA8B;AAC5B,aAAO;AAAE,QAAA,MAAF,oBAAQ,CAAK;AAAb,OAAP;AACD;;AAED,IAAA,SAAS,CACP,UAAU,CAAC,OAAX,CAAmB,IAAnB,MAA6B,CAAC,CADvB,mCAEwB,IAFxB,2BAAT;;AAIA,QAAM,cAAc,GAAsB,SAApC,cAAoC,CAAC,WAAD;AAAA,aACxC,QAAQ,CAAC;AAAE,QAAA,GAAG,EAAE,MAAM,CAAC,QAAP,CAAgB,IAAvB;AAA6B,QAAA,WAAW,EAAX;AAA7B,OAAD,CADgC;AAAA,KAA1C;;AAEA,IAAA,SAAS,CAAC,IAAV,CAAe;AAAE,MAAA,QAAQ,EAAR,QAAF;AAAY,MAAA,cAAc,EAAd;AAAZ,KAAf;AACA,IAAA,MAAM,CAAC,gBAAP,CAAwB,SAAxB,EAAmC,cAAnC,EAAmD,KAAnD;AACA,WAAO;AACL,MAAA,MAAM,EAAE,kBAAK;AACX,QAAA,KAAI,CAAC,mBAAL,CAAyB,IAAzB,EAA+B,QAA/B;AACD;AAHI,KAAP;AAKD,GApBY;AAsBb,EAAA,mBAtBa,+BAsBO,IAtBP,EAsBoB,QAtBpB,EAsByC;AAEpD,QAAI,CAAC,QAAQ,CAAC,cAAd,EAA8B;AAC5B;AACD;;AACD,IAAA,SAAS,CACP,UAAU,CAAC,OAAX,CAAmB,IAAnB,MAA6B,CAAC,CADvB,sCAE2B,IAF3B,4BAAT;AAIA,QAAM,aAAa,GAAG,SAAS,CAAC,SAAV,CAAoB,UAAC,IAAD;AAAA,aAAU,IAAI,CAAC,QAAL,KAAkB,QAA5B;AAAA,KAApB,CAAtB;AACA,IAAA,SAAS,CACP,aAAa,KAAK,CAAC,CADZ,EAEP,8EAFO,CAAT;AAIA,QAAM,cAAc,GAAG,SAAS,CAAC,aAAD,CAAT,CAAyB,cAAhD;AACA,IAAA,MAAM,CAAC,mBAAP,CAA2B,SAA3B,EAAsC,cAAtC,EAAsD,KAAtD;AACA,IAAA,SAAS,CAAC,MAAV,CAAiB,aAAjB,EAAgC,CAAhC;AACD,GAvCY;AAyCP,EAAA,UAzCO;AAAA,mDAyCI,GAzCJ,EAyCe;AAE1B,aAAO,IAAP;AACD,KA5CY;;AAAA;AAAA;AAAA;;AAAA;AAAA;AA8CP,EAAA,aA9CO;AAAA,wDA8CM;AACjB,UAAI,CAAC,QAAQ,CAAC,cAAd,EAA8B,OAAO,EAAP;AAC9B,aAAO,MAAM,CAAC,QAAP,CAAgB,IAAvB;AACD,KAjDY;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAmDP,EAAA,OAnDO;AAAA,gDAmDC,GAnDD,EAmDY;AACvB,UAAI,QAAQ,CAAC,cAAb,EAA6B;AAE3B,QAAA,MAAM,CAAC,QAAP,GAAkB,IAAI,GAAJ,CAAQ,GAAR,EAAa,MAAM,CAAC,QAApB,EAA8B,QAA9B,EAAlB;AACD;AACF,KAxDY;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA,CAAf","sourcesContent":["import { Platform } from 'expo-modules-core';\nimport invariant from 'invariant';\n\nimport { NativeURLListener, URLListener } from './Linking.types';\n\nconst EventTypes = ['url'];\n\nconst listeners: { listener: URLListener; nativeListener: NativeURLListener }[] = [];\n\nexport default {\n  addEventListener(type: 'url', listener: URLListener): { remove(): void } {\n    // Do nothing in Node.js environments\n    if (!Platform.isDOMAvailable) {\n      return { remove() {} };\n    }\n\n    invariant(\n      EventTypes.indexOf(type) !== -1,\n      `Linking.addEventListener(): ${type} is not a valid event`\n    );\n    const nativeListener: NativeURLListener = (nativeEvent) =>\n      listener({ url: window.location.href, nativeEvent });\n    listeners.push({ listener, nativeListener });\n    window.addEventListener('message', nativeListener, false);\n    return {\n      remove: () => {\n        this.removeEventListener(type, listener);\n      },\n    };\n  },\n\n  removeEventListener(type: 'url', listener: URLListener): void {\n    // Do nothing in Node.js environments\n    if (!Platform.isDOMAvailable) {\n      return;\n    }\n    invariant(\n      EventTypes.indexOf(type) !== -1,\n      `Linking.removeEventListener(): ${type} is not a valid event.`\n    );\n    const listenerIndex = listeners.findIndex((pair) => pair.listener === listener);\n    invariant(\n      listenerIndex !== -1,\n      'Linking.removeEventListener(): cannot remove an unregistered event listener.'\n    );\n    const nativeListener = listeners[listenerIndex].nativeListener;\n    window.removeEventListener('message', nativeListener, false);\n    listeners.splice(listenerIndex, 1);\n  },\n\n  async canOpenURL(url: string): Promise<boolean> {\n    // In reality this should be able to return false for links like `chrome://` on chrome.\n    return true;\n  },\n\n  async getInitialURL(): Promise<string> {\n    if (!Platform.isDOMAvailable) return '';\n    return window.location.href;\n  },\n\n  async openURL(url: string): Promise<void> {\n    if (Platform.isDOMAvailable) {\n      // @ts-ignore\n      window.location = new URL(url, window.location).toString();\n    }\n  },\n};\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}