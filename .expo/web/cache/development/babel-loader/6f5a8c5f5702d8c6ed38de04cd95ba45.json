{"ast":null,"code":"import _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _toConsumableArray from \"@babel/runtime/helpers/toConsumableArray\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\n\nfunction _toPropertyKey(arg) { var key = _toPrimitive(arg, \"string\"); return typeof key === \"symbol\" ? key : String(key); }\n\nfunction _toPrimitive(input, hint) { if (typeof input !== \"object\" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || \"default\"); if (typeof res !== \"object\") return res; throw new TypeError(\"@@toPrimitive must return a primitive value.\"); } return (hint === \"string\" ? String : Number)(input); }\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport * as React from 'react';\nimport NavigationBuilderContext from \"./NavigationBuilderContext\";\nimport NavigationContext from \"./NavigationContext\";\nimport NavigationRouteContext from \"./NavigationRouteContext\";\nimport SceneView from \"./SceneView\";\nimport useNavigationCache from \"./useNavigationCache\";\nimport useRouteCache from \"./useRouteCache\";\nexport default function useDescriptors(_ref) {\n  var state = _ref.state,\n      screens = _ref.screens,\n      navigation = _ref.navigation,\n      screenOptions = _ref.screenOptions,\n      defaultScreenOptions = _ref.defaultScreenOptions,\n      onAction = _ref.onAction,\n      getState = _ref.getState,\n      setState = _ref.setState,\n      addListener = _ref.addListener,\n      addKeyedListener = _ref.addKeyedListener,\n      onRouteFocus = _ref.onRouteFocus,\n      router = _ref.router,\n      emitter = _ref.emitter;\n\n  var _React$useState = React.useState({}),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      options = _React$useState2[0],\n      setOptions = _React$useState2[1];\n\n  var _React$useContext = React.useContext(NavigationBuilderContext),\n      onDispatchAction = _React$useContext.onDispatchAction,\n      onOptionsChange = _React$useContext.onOptionsChange,\n      stackRef = _React$useContext.stackRef;\n\n  var context = React.useMemo(function () {\n    return {\n      navigation: navigation,\n      onAction: onAction,\n      addListener: addListener,\n      addKeyedListener: addKeyedListener,\n      onRouteFocus: onRouteFocus,\n      onDispatchAction: onDispatchAction,\n      onOptionsChange: onOptionsChange,\n      stackRef: stackRef\n    };\n  }, [navigation, onAction, addListener, addKeyedListener, onRouteFocus, onDispatchAction, onOptionsChange, stackRef]);\n  var navigations = useNavigationCache({\n    state: state,\n    getState: getState,\n    navigation: navigation,\n    setOptions: setOptions,\n    router: router,\n    emitter: emitter\n  });\n  var routes = useRouteCache(state.routes);\n  return routes.reduce(function (acc, route, i) {\n    var config = screens[route.name];\n    var screen = config.props;\n    var navigation = navigations[route.key];\n    var optionsList = [screenOptions].concat(_toConsumableArray(config.options ? config.options.filter(Boolean) : []), [screen.options, options[route.key]]);\n    var customOptions = optionsList.reduce(function (acc, curr) {\n      return Object.assign(acc, typeof curr !== 'function' ? curr : curr({\n        route: route,\n        navigation: navigation\n      }));\n    }, {});\n\n    var mergedOptions = _objectSpread(_objectSpread({}, typeof defaultScreenOptions === 'function' ? defaultScreenOptions({\n      route: route,\n      navigation: navigation,\n      options: customOptions\n    }) : defaultScreenOptions), customOptions);\n\n    var clearOptions = function clearOptions() {\n      return setOptions(function (o) {\n        if (route.key in o) {\n          var _route$key = route.key,\n              _ = o[_route$key],\n              rest = _objectWithoutProperties(o, [_route$key].map(_toPropertyKey));\n\n          return rest;\n        }\n\n        return o;\n      });\n    };\n\n    acc[route.key] = {\n      route: route,\n      navigation: navigation,\n      render: function render() {\n        return React.createElement(NavigationBuilderContext.Provider, {\n          key: route.key,\n          value: context\n        }, React.createElement(NavigationContext.Provider, {\n          value: navigation\n        }, React.createElement(NavigationRouteContext.Provider, {\n          value: route\n        }, React.createElement(SceneView, {\n          navigation: navigation,\n          route: route,\n          screen: screen,\n          routeState: state.routes[i].state,\n          getState: getState,\n          setState: setState,\n          options: mergedOptions,\n          clearOptions: clearOptions\n        }))));\n      },\n      options: mergedOptions\n    };\n    return acc;\n  }, {});\n}","map":{"version":3,"sources":["useDescriptors.tsx"],"names":["React","NavigationBuilderContext","NavigationContext","NavigationRouteContext","SceneView","useNavigationCache","useRouteCache","useDescriptors","state","screens","navigation","screenOptions","defaultScreenOptions","onAction","getState","setState","addListener","addKeyedListener","onRouteFocus","router","emitter","options","setOptions","useState","onDispatchAction","onOptionsChange","stackRef","useContext","context","useMemo","navigations","routes","reduce","acc","route","i","config","name","screen","props","key","optionsList","filter","Boolean","customOptions","curr","Object","assign","mergedOptions","clearOptions","o","_","rest","render"],"mappings":"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","sourceRoot":"../../src","sourcesContent":["import * as React from 'react';\nimport NavigationBuilderContext from './NavigationBuilderContext';\nimport NavigationContext from './NavigationContext';\nimport NavigationRouteContext from './NavigationRouteContext';\nimport SceneView from './SceneView';\nimport useNavigationCache from './useNavigationCache';\nimport useRouteCache from './useRouteCache';\n/**\n * Hook to create descriptor objects for the child routes.\n *\n * A descriptor object provides 3 things:\n * - Helper method to render a screen\n * - Options specified by the screen for the navigator\n * - Navigation object intended for the route\n */\nexport default function useDescriptors(_ref) {\n  let {\n    state,\n    screens,\n    navigation,\n    screenOptions,\n    defaultScreenOptions,\n    onAction,\n    getState,\n    setState,\n    addListener,\n    addKeyedListener,\n    onRouteFocus,\n    router,\n    emitter\n  } = _ref;\n  const [options, setOptions] = React.useState({});\n  const {\n    onDispatchAction,\n    onOptionsChange,\n    stackRef\n  } = React.useContext(NavigationBuilderContext);\n  const context = React.useMemo(() => ({\n    navigation,\n    onAction,\n    addListener,\n    addKeyedListener,\n    onRouteFocus,\n    onDispatchAction,\n    onOptionsChange,\n    stackRef\n  }), [navigation, onAction, addListener, addKeyedListener, onRouteFocus, onDispatchAction, onOptionsChange, stackRef]);\n  const navigations = useNavigationCache({\n    state,\n    getState,\n    navigation,\n    setOptions,\n    router,\n    emitter\n  });\n  const routes = useRouteCache(state.routes);\n  return routes.reduce((acc, route, i) => {\n    const config = screens[route.name];\n    const screen = config.props;\n    const navigation = navigations[route.key];\n    const optionsList = [\n    // The default `screenOptions` passed to the navigator\n    screenOptions,\n    // The `screenOptions` props passed to `Group` elements\n    ...(config.options ? config.options.filter(Boolean) : []),\n    // The `options` prop passed to `Screen` elements,\n    screen.options,\n    // The options set via `navigation.setOptions`\n    options[route.key]];\n    const customOptions = optionsList.reduce((acc, curr) => Object.assign(acc, typeof curr !== 'function' ? curr : curr({\n      route,\n      navigation\n    })), {});\n    const mergedOptions = {\n      ...(typeof defaultScreenOptions === 'function' ?\n      // @ts-expect-error: ts gives incorrect error here\n      defaultScreenOptions({\n        route,\n        navigation,\n        options: customOptions\n      }) : defaultScreenOptions),\n      ...customOptions\n    };\n    const clearOptions = () => setOptions(o => {\n      if (route.key in o) {\n        // eslint-disable-next-line @typescript-eslint/no-unused-vars\n        const {\n          [route.key]: _,\n          ...rest\n        } = o;\n        return rest;\n      }\n      return o;\n    });\n    acc[route.key] = {\n      route,\n      // @ts-expect-error: it's missing action helpers, fix later\n      navigation,\n      render() {\n        return /*#__PURE__*/React.createElement(NavigationBuilderContext.Provider, {\n          key: route.key,\n          value: context\n        }, /*#__PURE__*/React.createElement(NavigationContext.Provider, {\n          value: navigation\n        }, /*#__PURE__*/React.createElement(NavigationRouteContext.Provider, {\n          value: route\n        }, /*#__PURE__*/React.createElement(SceneView, {\n          navigation: navigation,\n          route: route,\n          screen: screen,\n          routeState: state.routes[i].state,\n          getState: getState,\n          setState: setState,\n          options: mergedOptions,\n          clearOptions: clearOptions\n        }))));\n      },\n      options: mergedOptions\n    };\n    return acc;\n  }, {});\n}\n//# sourceMappingURL=useDescriptors.js.map"]},"metadata":{},"sourceType":"module"}