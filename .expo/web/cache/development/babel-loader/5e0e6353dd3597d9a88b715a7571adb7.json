{"ast":null,"code":"import _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nvar _excluded = [\"children\", \"style\", \"onPress\", \"onLongPress\", \"onPressIn\", \"onPressOut\", \"to\", \"accessibilityRole\"],\n    _excluded2 = [\"icon\", \"label\", \"labelStyle\", \"to\", \"focused\", \"allowFontScaling\", \"activeTintColor\", \"inactiveTintColor\", \"activeBackgroundColor\", \"inactiveBackgroundColor\", \"style\", \"onPress\", \"pressColor\", \"pressOpacity\", \"testID\", \"accessibilityLabel\"];\n\nfunction _extends() {\n  _extends = Object.assign ? Object.assign.bind() : function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n  return _extends.apply(this, arguments);\n}\n\nimport { PlatformPressable } from '@react-navigation/elements';\nimport { Link, useTheme } from '@react-navigation/native';\nimport Color from 'color';\nimport * as React from 'react';\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport View from \"react-native-web/dist/exports/View\";\n\nvar LinkPressable = function LinkPressable(_ref) {\n  var children = _ref.children,\n      style = _ref.style,\n      _onPress = _ref.onPress,\n      onLongPress = _ref.onLongPress,\n      onPressIn = _ref.onPressIn,\n      onPressOut = _ref.onPressOut,\n      to = _ref.to,\n      accessibilityRole = _ref.accessibilityRole,\n      rest = _objectWithoutProperties(_ref, _excluded);\n\n  if (Platform.OS === 'web' && to) {\n    return React.createElement(Link, _extends({}, rest, {\n      to: to,\n      style: [styles.button, style],\n      onPress: function onPress(e) {\n        if (!(e.metaKey || e.altKey || e.ctrlKey || e.shiftKey) && (e.button == null || e.button === 0)) {\n            e.preventDefault();\n            _onPress === null || _onPress === void 0 ? void 0 : _onPress(e);\n          }\n      },\n      onLongPress: onLongPress != null ? onLongPress : undefined,\n      onPressIn: onPressIn != null ? onPressIn : undefined,\n      onPressOut: onPressOut != null ? onPressOut : undefined\n    }), children);\n  } else {\n    return React.createElement(PlatformPressable, _extends({}, rest, {\n      accessibilityRole: accessibilityRole,\n      onPress: _onPress\n    }), React.createElement(View, {\n      style: style\n    }, children));\n  }\n};\n\nexport default function DrawerItem(props) {\n  var _useTheme = useTheme(),\n      colors = _useTheme.colors;\n\n  var icon = props.icon,\n      label = props.label,\n      labelStyle = props.labelStyle,\n      to = props.to,\n      _props$focused = props.focused,\n      focused = _props$focused === void 0 ? false : _props$focused,\n      allowFontScaling = props.allowFontScaling,\n      _props$activeTintColo = props.activeTintColor,\n      activeTintColor = _props$activeTintColo === void 0 ? colors.primary : _props$activeTintColo,\n      _props$inactiveTintCo = props.inactiveTintColor,\n      inactiveTintColor = _props$inactiveTintCo === void 0 ? Color(colors.text).alpha(0.68).rgb().string() : _props$inactiveTintCo,\n      _props$activeBackgrou = props.activeBackgroundColor,\n      activeBackgroundColor = _props$activeBackgrou === void 0 ? Color(activeTintColor).alpha(0.12).rgb().string() : _props$activeBackgrou,\n      _props$inactiveBackgr = props.inactiveBackgroundColor,\n      inactiveBackgroundColor = _props$inactiveBackgr === void 0 ? 'transparent' : _props$inactiveBackgr,\n      style = props.style,\n      onPress = props.onPress,\n      pressColor = props.pressColor,\n      pressOpacity = props.pressOpacity,\n      testID = props.testID,\n      accessibilityLabel = props.accessibilityLabel,\n      rest = _objectWithoutProperties(props, _excluded2);\n\n  var _StyleSheet$flatten = StyleSheet.flatten(style || {}),\n      _StyleSheet$flatten$b = _StyleSheet$flatten.borderRadius,\n      borderRadius = _StyleSheet$flatten$b === void 0 ? 4 : _StyleSheet$flatten$b;\n\n  var color = focused ? activeTintColor : inactiveTintColor;\n  var backgroundColor = focused ? activeBackgroundColor : inactiveBackgroundColor;\n  var iconNode = icon ? icon({\n    size: 24,\n    focused: focused,\n    color: color\n  }) : null;\n  return React.createElement(View, _extends({\n    collapsable: false\n  }, rest, {\n    style: [styles.container, {\n      borderRadius: borderRadius,\n      backgroundColor: backgroundColor\n    }, style]\n  }), React.createElement(LinkPressable, {\n    testID: testID,\n    onPress: onPress,\n    style: [styles.wrapper, {\n      borderRadius: borderRadius\n    }],\n    accessibilityLabel: accessibilityLabel,\n    accessibilityRole: \"button\",\n    accessibilityState: {\n      selected: focused\n    },\n    pressColor: pressColor,\n    pressOpacity: pressOpacity,\n    to: to\n  }, React.createElement(React.Fragment, null, iconNode, React.createElement(View, {\n    style: [styles.label, {\n      marginLeft: iconNode ? 32 : 0,\n      marginVertical: 5\n    }]\n  }, typeof label === 'string' ? React.createElement(Text, {\n    numberOfLines: 1,\n    allowFontScaling: allowFontScaling,\n    style: [{\n      color: color,\n      fontWeight: '500'\n    }, labelStyle]\n  }, label) : label({\n    color: color,\n    focused: focused\n  })))));\n}\nvar styles = StyleSheet.create({\n  container: {\n    marginHorizontal: 10,\n    marginVertical: 4,\n    overflow: 'hidden'\n  },\n  wrapper: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    padding: 8\n  },\n  label: {\n    marginRight: 32,\n    flex: 1\n  },\n  button: {\n    display: 'flex'\n  }\n});","map":{"version":3,"sources":["views/DrawerItem.tsx"],"names":["PlatformPressable","Link","useTheme","Color","React","LinkPressable","children","style","onPress","onLongPress","onPressIn","onPressOut","to","accessibilityRole","rest","Platform","OS","styles","button","e","metaKey","altKey","ctrlKey","shiftKey","preventDefault","undefined","DrawerItem","props","colors","icon","label","labelStyle","focused","allowFontScaling","activeTintColor","primary","inactiveTintColor","text","alpha","rgb","string","activeBackgroundColor","inactiveBackgroundColor","pressColor","pressOpacity","testID","accessibilityLabel","borderRadius","StyleSheet","flatten","color","backgroundColor","iconNode","size","container","wrapper","selected","marginLeft","marginVertical","fontWeight","create","marginHorizontal","overflow","flexDirection","alignItems","padding","marginRight","flex","display"],"mappings":"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","sourceRoot":"../../../src","sourcesContent":["function _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\nimport { PlatformPressable } from '@react-navigation/elements';\nimport { Link, useTheme } from '@react-navigation/native';\nimport Color from 'color';\nimport * as React from 'react';\nimport { Platform, StyleSheet, Text, View } from 'react-native';\nconst LinkPressable = _ref => {\n  let {\n    children,\n    style,\n    onPress,\n    onLongPress,\n    onPressIn,\n    onPressOut,\n    to,\n    accessibilityRole,\n    ...rest\n  } = _ref;\n  if (Platform.OS === 'web' && to) {\n    // React Native Web doesn't forward `onClick` if we use `TouchableWithoutFeedback`.\n    // We need to use `onClick` to be able to prevent default browser handling of links.\n    return /*#__PURE__*/React.createElement(Link, _extends({}, rest, {\n      to: to,\n      style: [styles.button, style],\n      onPress: e => {\n        if (!(e.metaKey || e.altKey || e.ctrlKey || e.shiftKey) && (\n        // ignore clicks with modifier keys\n        e.button == null || e.button === 0) // ignore everything but left clicks\n        ) {\n          e.preventDefault();\n          onPress === null || onPress === void 0 ? void 0 : onPress(e);\n        }\n      }\n      // types for PressableProps and TextProps are incompatible with each other by `null` so we\n      // can't use {...rest} for these 3 props\n      ,\n      onLongPress: onLongPress ?? undefined,\n      onPressIn: onPressIn ?? undefined,\n      onPressOut: onPressOut ?? undefined\n    }), children);\n  } else {\n    return /*#__PURE__*/React.createElement(PlatformPressable, _extends({}, rest, {\n      accessibilityRole: accessibilityRole,\n      onPress: onPress\n    }), /*#__PURE__*/React.createElement(View, {\n      style: style\n    }, children));\n  }\n};\n\n/**\n * A component used to show an action item with an icon and a label in a navigation drawer.\n */\nexport default function DrawerItem(props) {\n  const {\n    colors\n  } = useTheme();\n  const {\n    icon,\n    label,\n    labelStyle,\n    to,\n    focused = false,\n    allowFontScaling,\n    activeTintColor = colors.primary,\n    inactiveTintColor = Color(colors.text).alpha(0.68).rgb().string(),\n    activeBackgroundColor = Color(activeTintColor).alpha(0.12).rgb().string(),\n    inactiveBackgroundColor = 'transparent',\n    style,\n    onPress,\n    pressColor,\n    pressOpacity,\n    testID,\n    accessibilityLabel,\n    ...rest\n  } = props;\n  const {\n    borderRadius = 4\n  } = StyleSheet.flatten(style || {});\n  const color = focused ? activeTintColor : inactiveTintColor;\n  const backgroundColor = focused ? activeBackgroundColor : inactiveBackgroundColor;\n  const iconNode = icon ? icon({\n    size: 24,\n    focused,\n    color\n  }) : null;\n  return /*#__PURE__*/React.createElement(View, _extends({\n    collapsable: false\n  }, rest, {\n    style: [styles.container, {\n      borderRadius,\n      backgroundColor\n    }, style]\n  }), /*#__PURE__*/React.createElement(LinkPressable, {\n    testID: testID,\n    onPress: onPress,\n    style: [styles.wrapper, {\n      borderRadius\n    }],\n    accessibilityLabel: accessibilityLabel,\n    accessibilityRole: \"button\",\n    accessibilityState: {\n      selected: focused\n    },\n    pressColor: pressColor,\n    pressOpacity: pressOpacity,\n    to: to\n  }, /*#__PURE__*/React.createElement(React.Fragment, null, iconNode, /*#__PURE__*/React.createElement(View, {\n    style: [styles.label, {\n      marginLeft: iconNode ? 32 : 0,\n      marginVertical: 5\n    }]\n  }, typeof label === 'string' ? /*#__PURE__*/React.createElement(Text, {\n    numberOfLines: 1,\n    allowFontScaling: allowFontScaling,\n    style: [{\n      color,\n      fontWeight: '500'\n    }, labelStyle]\n  }, label) : label({\n    color,\n    focused\n  })))));\n}\nconst styles = StyleSheet.create({\n  container: {\n    marginHorizontal: 10,\n    marginVertical: 4,\n    overflow: 'hidden'\n  },\n  wrapper: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    padding: 8\n  },\n  label: {\n    marginRight: 32,\n    flex: 1\n  },\n  button: {\n    display: 'flex'\n  }\n});\n//# sourceMappingURL=DrawerItem.js.map"]},"metadata":{},"sourceType":"module"}