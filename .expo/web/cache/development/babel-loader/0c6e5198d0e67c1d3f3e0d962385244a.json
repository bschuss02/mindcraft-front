{"ast":null,"code":"import { getHeaderTitle, HeaderBackContext } from '@react-navigation/elements';\nimport { NavigationContext, NavigationRouteContext } from '@react-navigation/native';\nimport * as React from 'react';\nimport Animated from \"react-native-web/dist/exports/Animated\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport View from \"react-native-web/dist/exports/View\";\nimport { forNoAnimation, forSlideLeft, forSlideRight, forSlideUp } from \"../../TransitionConfigs/HeaderStyleInterpolators\";\nimport Header from \"./Header\";\nexport default function HeaderContainer(_ref) {\n  var mode = _ref.mode,\n      scenes = _ref.scenes,\n      layout = _ref.layout,\n      getPreviousScene = _ref.getPreviousScene,\n      getFocusedRoute = _ref.getFocusedRoute,\n      onContentHeightChange = _ref.onContentHeightChange,\n      style = _ref.style;\n  var focusedRoute = getFocusedRoute();\n  var parentHeaderBack = React.useContext(HeaderBackContext);\n  return React.createElement(Animated.View, {\n    pointerEvents: \"box-none\",\n    style: style\n  }, scenes.slice(-3).map(function (scene, i, self) {\n    var _self, _self2;\n\n    if (mode === 'screen' && i !== self.length - 1 || !scene) {\n      return null;\n    }\n\n    var _scene$descriptor$opt = scene.descriptor.options,\n        header = _scene$descriptor$opt.header,\n        headerMode = _scene$descriptor$opt.headerMode,\n        _scene$descriptor$opt2 = _scene$descriptor$opt.headerShown,\n        headerShown = _scene$descriptor$opt2 === void 0 ? true : _scene$descriptor$opt2,\n        headerTransparent = _scene$descriptor$opt.headerTransparent,\n        headerStyleInterpolator = _scene$descriptor$opt.headerStyleInterpolator;\n\n    if (headerMode !== mode || !headerShown) {\n      return null;\n    }\n\n    var isFocused = focusedRoute.key === scene.descriptor.route.key;\n    var previousScene = getPreviousScene({\n      route: scene.descriptor.route\n    });\n    var headerBack = parentHeaderBack;\n\n    if (previousScene) {\n      var _previousScene$descri = previousScene.descriptor,\n          options = _previousScene$descri.options,\n          route = _previousScene$descri.route;\n      headerBack = previousScene ? {\n        title: getHeaderTitle(options, route.name)\n      } : parentHeaderBack;\n    }\n\n    var previousDescriptor = (_self = self[i - 1]) === null || _self === void 0 ? void 0 : _self.descriptor;\n    var nextDescriptor = (_self2 = self[i + 1]) === null || _self2 === void 0 ? void 0 : _self2.descriptor;\n\n    var _ref2 = (previousDescriptor === null || previousDescriptor === void 0 ? void 0 : previousDescriptor.options) || {},\n        _ref2$headerShown = _ref2.headerShown,\n        previousHeaderShown = _ref2$headerShown === void 0 ? true : _ref2$headerShown,\n        previousHeaderMode = _ref2.headerMode;\n\n    var nextHeaderlessScene = self.slice(i + 1).find(function (scene) {\n      var _ref3 = (scene === null || scene === void 0 ? void 0 : scene.descriptor.options) || {},\n          _ref3$headerShown = _ref3.headerShown,\n          currentHeaderShown = _ref3$headerShown === void 0 ? true : _ref3$headerShown,\n          currentHeaderMode = _ref3.headerMode;\n\n      return currentHeaderShown === false || currentHeaderMode === 'screen';\n    });\n\n    var _ref4 = (nextHeaderlessScene === null || nextHeaderlessScene === void 0 ? void 0 : nextHeaderlessScene.descriptor.options) || {},\n        nextHeaderlessGestureDirection = _ref4.gestureDirection;\n\n    var isHeaderStatic = (previousHeaderShown === false || previousHeaderMode === 'screen') && !nextDescriptor || nextHeaderlessScene;\n    var props = {\n      layout: layout,\n      back: headerBack,\n      progress: scene.progress,\n      options: scene.descriptor.options,\n      route: scene.descriptor.route,\n      navigation: scene.descriptor.navigation,\n      styleInterpolator: mode === 'float' ? isHeaderStatic ? nextHeaderlessGestureDirection === 'vertical' || nextHeaderlessGestureDirection === 'vertical-inverted' ? forSlideUp : nextHeaderlessGestureDirection === 'horizontal-inverted' ? forSlideRight : forSlideLeft : headerStyleInterpolator : forNoAnimation\n    };\n    return React.createElement(NavigationContext.Provider, {\n      key: scene.descriptor.route.key,\n      value: scene.descriptor.navigation\n    }, React.createElement(NavigationRouteContext.Provider, {\n      value: scene.descriptor.route\n    }, React.createElement(View, {\n      onLayout: onContentHeightChange ? function (e) {\n        var height = e.nativeEvent.layout.height;\n        onContentHeightChange({\n          route: scene.descriptor.route,\n          height: height\n        });\n      } : undefined,\n      pointerEvents: isFocused ? 'box-none' : 'none',\n      accessibilityElementsHidden: !isFocused,\n      importantForAccessibility: isFocused ? 'auto' : 'no-hide-descendants',\n      style: mode === 'float' && !isFocused || headerTransparent ? styles.header : null\n    }, header !== undefined ? header(props) : React.createElement(Header, props))));\n  }));\n}\nvar styles = StyleSheet.create({\n  header: {\n    position: 'absolute',\n    top: 0,\n    left: 0,\n    right: 0\n  }\n});","map":{"version":3,"sources":["views/Header/HeaderContainer.tsx"],"names":["getHeaderTitle","HeaderBackContext","NavigationContext","NavigationRouteContext","React","forNoAnimation","forSlideLeft","forSlideRight","forSlideUp","Header","HeaderContainer","mode","scenes","layout","getPreviousScene","getFocusedRoute","onContentHeightChange","style","focusedRoute","parentHeaderBack","useContext","slice","map","scene","i","self","length","header","headerMode","headerShown","headerTransparent","headerStyleInterpolator","descriptor","options","isFocused","key","route","previousScene","headerBack","title","name","previousDescriptor","nextDescriptor","previousHeaderShown","previousHeaderMode","nextHeaderlessScene","find","currentHeaderShown","currentHeaderMode","gestureDirection","nextHeaderlessGestureDirection","isHeaderStatic","props","back","progress","navigation","styleInterpolator","e","height","nativeEvent","undefined","styles","StyleSheet","create","position","top","left","right"],"mappings":"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","sourceRoot":"../../../../src","sourcesContent":["import { getHeaderTitle, HeaderBackContext } from '@react-navigation/elements';\nimport { NavigationContext, NavigationRouteContext } from '@react-navigation/native';\nimport * as React from 'react';\nimport { Animated, StyleSheet, View } from 'react-native';\nimport { forNoAnimation, forSlideLeft, forSlideRight, forSlideUp } from '../../TransitionConfigs/HeaderStyleInterpolators';\nimport Header from './Header';\nexport default function HeaderContainer(_ref) {\n  let {\n    mode,\n    scenes,\n    layout,\n    getPreviousScene,\n    getFocusedRoute,\n    onContentHeightChange,\n    style\n  } = _ref;\n  const focusedRoute = getFocusedRoute();\n  const parentHeaderBack = React.useContext(HeaderBackContext);\n  return /*#__PURE__*/React.createElement(Animated.View, {\n    pointerEvents: \"box-none\",\n    style: style\n  }, scenes.slice(-3).map((scene, i, self) => {\n    var _self, _self2;\n    if (mode === 'screen' && i !== self.length - 1 || !scene) {\n      return null;\n    }\n    const {\n      header,\n      headerMode,\n      headerShown = true,\n      headerTransparent,\n      headerStyleInterpolator\n    } = scene.descriptor.options;\n    if (headerMode !== mode || !headerShown) {\n      return null;\n    }\n    const isFocused = focusedRoute.key === scene.descriptor.route.key;\n    const previousScene = getPreviousScene({\n      route: scene.descriptor.route\n    });\n    let headerBack = parentHeaderBack;\n    if (previousScene) {\n      const {\n        options,\n        route\n      } = previousScene.descriptor;\n      headerBack = previousScene ? {\n        title: getHeaderTitle(options, route.name)\n      } : parentHeaderBack;\n    }\n\n    // If the screen is next to a headerless screen, we need to make the header appear static\n    // This makes the header look like it's moving with the screen\n    const previousDescriptor = (_self = self[i - 1]) === null || _self === void 0 ? void 0 : _self.descriptor;\n    const nextDescriptor = (_self2 = self[i + 1]) === null || _self2 === void 0 ? void 0 : _self2.descriptor;\n    const {\n      headerShown: previousHeaderShown = true,\n      headerMode: previousHeaderMode\n    } = (previousDescriptor === null || previousDescriptor === void 0 ? void 0 : previousDescriptor.options) || {};\n\n    // If any of the next screens don't have a header or header is part of the screen\n    // Then we need to move this header offscreen so that it doesn't cover it\n    const nextHeaderlessScene = self.slice(i + 1).find(scene => {\n      const {\n        headerShown: currentHeaderShown = true,\n        headerMode: currentHeaderMode\n      } = (scene === null || scene === void 0 ? void 0 : scene.descriptor.options) || {};\n      return currentHeaderShown === false || currentHeaderMode === 'screen';\n    });\n    const {\n      gestureDirection: nextHeaderlessGestureDirection\n    } = (nextHeaderlessScene === null || nextHeaderlessScene === void 0 ? void 0 : nextHeaderlessScene.descriptor.options) || {};\n    const isHeaderStatic = (previousHeaderShown === false || previousHeaderMode === 'screen') &&\n    // We still need to animate when coming back from next scene\n    // A hacky way to check this is if the next scene exists\n    !nextDescriptor || nextHeaderlessScene;\n    const props = {\n      layout,\n      back: headerBack,\n      progress: scene.progress,\n      options: scene.descriptor.options,\n      route: scene.descriptor.route,\n      navigation: scene.descriptor.navigation,\n      styleInterpolator: mode === 'float' ? isHeaderStatic ? nextHeaderlessGestureDirection === 'vertical' || nextHeaderlessGestureDirection === 'vertical-inverted' ? forSlideUp : nextHeaderlessGestureDirection === 'horizontal-inverted' ? forSlideRight : forSlideLeft : headerStyleInterpolator : forNoAnimation\n    };\n    return /*#__PURE__*/React.createElement(NavigationContext.Provider, {\n      key: scene.descriptor.route.key,\n      value: scene.descriptor.navigation\n    }, /*#__PURE__*/React.createElement(NavigationRouteContext.Provider, {\n      value: scene.descriptor.route\n    }, /*#__PURE__*/React.createElement(View, {\n      onLayout: onContentHeightChange ? e => {\n        const {\n          height\n        } = e.nativeEvent.layout;\n        onContentHeightChange({\n          route: scene.descriptor.route,\n          height\n        });\n      } : undefined,\n      pointerEvents: isFocused ? 'box-none' : 'none',\n      accessibilityElementsHidden: !isFocused,\n      importantForAccessibility: isFocused ? 'auto' : 'no-hide-descendants',\n      style:\n      // Avoid positioning the focused header absolutely\n      // Otherwise accessibility tools don't seem to be able to find it\n      mode === 'float' && !isFocused || headerTransparent ? styles.header : null\n    }, header !== undefined ? header(props) : /*#__PURE__*/React.createElement(Header, props))));\n  }));\n}\nconst styles = StyleSheet.create({\n  header: {\n    position: 'absolute',\n    top: 0,\n    left: 0,\n    right: 0\n  }\n});\n//# sourceMappingURL=HeaderContainer.js.map"]},"metadata":{},"sourceType":"module"}