{"ast":null,"code":"import _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nvar _excluded = [\"children\"];\nimport React from 'react';\nimport { useTheme } from 'native-base';\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport { useColorMode } from \"../../../core/color-mode/hooks\";\nexport var HiddenSSR = React.memo(function (_ref) {\n  var children = _ref.children,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  var theme = useTheme();\n  var breakPoints = Object.keys(theme.breakpoints);\n  var currentColorMode = useColorMode();\n  var from = props.from,\n      till = props.till,\n      only = props.only,\n      colorMode = props.colorMode,\n      platform = props.platform;\n  if (children === null) return null;\n\n  if (!from && !till && !only && !colorMode && !platform) {\n    return null;\n  } else if (Array.isArray(platform) && platform.includes(Platform.OS) || platform === Platform.OS) {\n    return null;\n  } else if (colorMode === currentColorMode.colorMode) {\n    return null;\n  }\n\n  var display = {};\n\n  if (till) {\n    var flag = false;\n\n    for (var i in breakPoints) {\n      if (breakPoints[i] === till) {\n        display[breakPoints[i]] = 'flex';\n        flag = true;\n      } else {\n        display[breakPoints[i]] = flag ? 'flex' : 'none';\n      }\n    }\n  }\n\n  if (from) {\n    var _flag = false;\n\n    for (var _i2 in breakPoints) {\n      if (breakPoints[_i2] === from || _flag) {\n        display[breakPoints[_i2]] = 'none';\n        _flag = true;\n      } else {\n        display[breakPoints[_i2]] = 'flex';\n      }\n    }\n  }\n\n  if (only) {\n    if (Array.isArray(only)) {\n      for (var _i4 in breakPoints) {\n        if (only.includes(breakPoints[_i4])) {\n          display[breakPoints[_i4]] = 'none';\n        } else {\n          display[breakPoints[_i4]] = 'flex';\n        }\n      }\n    } else {\n      display[only] = 'none';\n    }\n  }\n\n  return React.cloneElement(children, {\n    display: display\n  });\n});","map":{"version":3,"sources":["HiddenSSR.tsx"],"names":["HiddenSSR","props","theme","useTheme","breakPoints","Object","currentColorMode","useColorMode","platform","children","Array","Platform","colorMode","display","flag","only"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { useTheme } from 'native-base';\nimport { Platform } from 'react-native';\nimport type { IHiddenProps } from './types';\nimport { useColorMode } from '../../../core/color-mode/hooks';\n\nexport const HiddenSSR = React.memo(({ children, ...props }: IHiddenProps) => {\n  const theme = useTheme();\n  const breakPoints = Object.keys(theme.breakpoints);\n  const currentColorMode = useColorMode();\n\n  const { from, till, only, colorMode, platform } = props;\n\n  if (children === null) return null;\n  if (!from && !till && !only && !colorMode && !platform) {\n    return null;\n  } else if (\n    (Array.isArray(platform) && platform.includes(Platform.OS)) ||\n    platform === Platform.OS\n  ) {\n    return null;\n  } else if (colorMode === currentColorMode.colorMode) {\n    return null;\n  }\n  const display: any = {};\n\n  if (till) {\n    let flag = false;\n    for (const i in breakPoints) {\n      if (breakPoints[i] === till) {\n        display[breakPoints[i]] = 'flex';\n        flag = true;\n      } else {\n        display[breakPoints[i]] = flag ? 'flex' : 'none';\n      }\n    }\n  }\n\n  if (from) {\n    let flag = false;\n    for (const i in breakPoints) {\n      if (breakPoints[i] === from || flag) {\n        display[breakPoints[i]] = 'none';\n        flag = true;\n      } else {\n        display[breakPoints[i]] = 'flex';\n      }\n    }\n  }\n  if (only) {\n    if (Array.isArray(only)) {\n      for (const i in breakPoints) {\n        if (only.includes(breakPoints[i])) {\n          display[breakPoints[i]] = 'none';\n        } else {\n          display[breakPoints[i]] = 'flex';\n        }\n      }\n    } else {\n      display[only] = 'none';\n    }\n  }\n\n  return React.cloneElement(children, {\n    display: display,\n  });\n});\n"]},"metadata":{},"sourceType":"module"}