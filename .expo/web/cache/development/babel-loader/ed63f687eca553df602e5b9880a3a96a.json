{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport get from 'lodash.get';\nimport { convertStringNumberToNumber } from \"./convertStringNumberToNumber\";\nimport { resolveValueWithBreakpoint } from \"../hooks/useThemeProps/utils\";\nexport var getRNKeyAndStyleValue = function getRNKeyAndStyleValue(_ref) {\n  var config = _ref.config,\n      value = _ref.value,\n      key = _ref.key,\n      theme = _ref.theme,\n      styledSystemProps = _ref.styledSystemProps,\n      currentBreakpoint = _ref.currentBreakpoint;\n  var style = {};\n\n  if (config === true) {\n    style = _objectSpread(_objectSpread({}, style), {}, _defineProperty({}, key, convertStringNumberToNumber(key, value)));\n  } else if (config) {\n    var property = config.property,\n        scale = config.scale,\n        properties = config.properties,\n        transformer = config.transformer;\n    var val = value;\n\n    if (transformer) {\n      val = transformer(val, theme[scale], theme, styledSystemProps.fontSize);\n    } else {\n      val = get(theme[scale], value, value);\n    }\n\n    if (typeof val === 'string') {\n      if (val.endsWith('px')) {\n        val = parseFloat(val);\n      } else if (val.endsWith('em') && Platform.OS !== 'web') {\n        var fontSize = resolveValueWithBreakpoint(styledSystemProps.fontSize, theme.breakpoints, currentBreakpoint, key);\n        val = parseFloat(val) * parseFloat(get(theme.fontSizes, fontSize, fontSize));\n      }\n    }\n\n    val = convertStringNumberToNumber(key, val);\n\n    if (properties) {\n      properties.forEach(function (property) {\n        style = _objectSpread(_objectSpread({}, style), {}, _defineProperty({}, property, val));\n      });\n    } else if (property) {\n      style = _objectSpread(_objectSpread({}, style), {}, _defineProperty({}, property, val));\n    } else {\n      style = _objectSpread(_objectSpread({}, style), val);\n    }\n  }\n\n  return style;\n};","map":{"version":3,"sources":["getRNKeyAndStyleValue.ts"],"names":["getRNKeyAndStyleValue","currentBreakpoint","style","config","convertStringNumberToNumber","transformer","val","theme","styledSystemProps","get","parseFloat","Platform","fontSize","resolveValueWithBreakpoint","properties","property"],"mappings":";;;;;;;AACA,OAAA,GAAA,MAAA,YAAA;AACA,SAAA,2BAAA;AACA,SAAA,0BAAA;AAKA,OAAO,IAAMA,qBAAqB,GAAG,SAAxBA,qBAAwB,OAO1B;AAAA,MAP2B,MAO3B,QAP2B,MAO3B;AAAA,MAP2B,KAO3B,QAP2B,KAO3B;AAAA,MAP2B,GAO3B,QAP2B,GAO3B;AAAA,MAP2B,KAO3B,QAP2B,KAO3B;AAAA,MAP2B,iBAO3B,QAP2B,iBAO3B;AAAA,MADTC,iBACS,QADTA,iBACS;AACT,MAAIC,KAAU,GAAd,EAAA;;AACA,MAAIC,MAAM,KAAV,IAAA,EAAqB;AACnBD,IAAAA,KAAK,mCAAG,KAAH,2BAEH,GAFG,EAEIE,2BAA2B,CAAA,GAAA,EAAA,KAAA,CAF/B,EAALF;AADF,GAAA,MAKO,IAAA,MAAA,EAAY;AAEjB,QAAM,QAAN,GAAA,MAAA,CAAM,QAAN;AAAA,QAAM,KAAN,GAAA,MAAA,CAAM,KAAN;AAAA,QAAM,UAAN,GAAA,MAAA,CAAM,UAAN;AAAA,QAAqCG,WAArC,GAAA,MAAA,CAAqCA,WAArC;AACA,QAAIC,GAAG,GAAP,KAAA;;AAEA,QAAA,WAAA,EAAiB;AACfA,MAAAA,GAAG,GAAGD,WAAW,CAAA,GAAA,EAAME,KAAK,CAAX,KAAW,CAAX,EAAA,KAAA,EAA2BC,iBAAiB,CAA7DF,QAAiB,CAAjBA;AADF,KAAA,MAEO;AAELA,MAAAA,GAAG,GAAGG,GAAG,CAACF,KAAK,CAAN,KAAM,CAAN,EAAA,KAAA,EAATD,KAAS,CAATA;AACD;;AAED,QAAI,OAAA,GAAA,KAAJ,QAAA,EAA6B;AAC3B,UAAIA,GAAG,CAAHA,QAAAA,CAAJ,IAAIA,CAAJ,EAAwB;AACtBA,QAAAA,GAAG,GAAGI,UAAU,CAAhBJ,GAAgB,CAAhBA;AADF,OAAA,MAEO,IAAIA,GAAG,CAAHA,QAAAA,CAAAA,IAAAA,KAAsBK,QAAQ,CAARA,EAAAA,KAA1B,KAAA,EAAiD;AACtD,YAAMC,QAAQ,GAAGC,0BAA0B,CACzCL,iBAAiB,CADwB,QAAA,EAEzCD,KAAK,CAFoC,WAAA,EAAA,iBAAA,EAA3C,GAA2C,CAA3C;AAMAD,QAAAA,GAAG,GACDI,UAAU,CAAVA,GAAU,CAAVA,GACAA,UAAU,CAACD,GAAG,CAACF,KAAK,CAAN,SAAA,EAAA,QAAA,EAFhBD,QAEgB,CAAJ,CAFZA;AAGD;AACF;;AAEDA,IAAAA,GAAG,GAAGF,2BAA2B,CAAA,GAAA,EAAjCE,GAAiC,CAAjCA;;AAEA,QAAA,UAAA,EAAgB;AAEdQ,MAAAA,UAAU,CAAVA,OAAAA,CAAoBC,UAAAA,QAAD,EAAc;AAC/Bb,QAAAA,KAAK,mCAAG,KAAH,2BAEH,QAFG,EAESI,GAFT,EAALJ;AADFY,OAAAA;AAFF,KAAA,MAQO,IAAA,QAAA,EAAc;AACnBZ,MAAAA,KAAK,mCAAG,KAAH,2BAEH,QAFG,EAESI,GAFT,EAALJ;AADK,KAAA,MAKA;AACLA,MAAAA,KAAK,mCAAG,KAAH,GAEAI,GAFA,CAALJ;AAID;AACF;;AAED,SAAA,KAAA;AAjEK,CAAA","sourcesContent":["import { Platform } from 'react-native';\nimport get from 'lodash.get';\nimport { convertStringNumberToNumber } from './convertStringNumberToNumber';\nimport { resolveValueWithBreakpoint } from '../hooks/useThemeProps/utils';\n\n/**\n * Common Logic Sharing between useSx and useStyledSytem\n */\nexport const getRNKeyAndStyleValue = ({\n  config,\n  value,\n  key,\n  theme,\n  styledSystemProps,\n  currentBreakpoint,\n}: any) => {\n  let style: any = {};\n  if (config === true) {\n    style = {\n      ...style,\n      [key]: convertStringNumberToNumber(key, value),\n    };\n  } else if (config) {\n    //@ts-ignore\n    const { property, scale, properties, transformer } = config;\n    let val = value;\n\n    if (transformer) {\n      val = transformer(val, theme[scale], theme, styledSystemProps.fontSize);\n    } else {\n      // If a token is not found in the theme\n      val = get(theme[scale], value, value);\n    }\n\n    if (typeof val === 'string') {\n      if (val.endsWith('px')) {\n        val = parseFloat(val);\n      } else if (val.endsWith('em') && Platform.OS !== 'web') {\n        const fontSize = resolveValueWithBreakpoint(\n          styledSystemProps.fontSize,\n          theme.breakpoints,\n          currentBreakpoint,\n          key\n        );\n        val =\n          parseFloat(val) *\n          parseFloat(get(theme.fontSizes, fontSize, fontSize));\n      }\n    }\n\n    val = convertStringNumberToNumber(key, val);\n\n    if (properties) {\n      //@ts-ignore\n      properties.forEach((property) => {\n        style = {\n          ...style,\n          [property]: val,\n        };\n      });\n    } else if (property) {\n      style = {\n        ...style,\n        [property]: val,\n      };\n    } else {\n      style = {\n        ...style,\n        ...val,\n      };\n    }\n  }\n\n  return style;\n};\n"]},"metadata":{},"sourceType":"module"}