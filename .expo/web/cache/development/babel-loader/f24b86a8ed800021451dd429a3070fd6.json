{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime/helpers/toConsumableArray\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nvar _excluded = [\"isHovered\", \"isFocused\", \"onKeyPress\", \"InputLeftElement\", \"InputRightElement\", \"leftElement\", \"rightElement\"],\n    _excluded2 = [\"ariaLabel\", \"accessibilityLabel\", \"type\", \"isFullWidth\", \"isDisabled\", \"isReadOnly\", \"fontFamily\", \"fontWeight\", \"fontStyle\", \"placeholderTextColor\", \"selectionColor\", \"underlineColorAndroid\", \"onFocus\", \"onBlur\", \"wrapperRef\", \"_stack\", \"_input\"];\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nimport React, { memo, forwardRef } from 'react';\nimport TextInput from \"react-native-web/dist/exports/TextInput\";\nimport { useToken } from \"../../../hooks\";\nimport { useFormControl } from \"../../composites/FormControl\";\nimport { useHasResponsiveProps } from \"../../../hooks/useHasResponsiveProps\";\nimport { useHover } from '@react-native-aria/interactions';\nimport { extractInObject, stylingProps } from \"../../../theme/tools/utils\";\nimport { usePropsResolution } from \"../../../hooks/useThemeProps\";\nimport { mergeRefs, resolveStackStyleInput } from \"../../../utils\";\nimport { Stack } from \"../Stack\";\nimport { makeStyledComponent } from \"../../../utils/styled\";\nimport { useResolvedFontFamily } from \"../../../hooks/useResolvedFontFamily\";\nvar StyledInput = makeStyledComponent(TextInput);\n\nvar Input = function Input(_ref2, ref) {\n  var isHoveredProp = _ref2.isHovered,\n      isFocusedProp = _ref2.isFocused,\n      _onKeyPress = _ref2.onKeyPress,\n      InputLeftElement = _ref2.InputLeftElement,\n      InputRightElement = _ref2.InputRightElement,\n      leftElement = _ref2.leftElement,\n      rightElement = _ref2.rightElement,\n      props = _objectWithoutProperties(_ref2, _excluded);\n\n  var inputProps = useFormControl({\n    isDisabled: props.isDisabled,\n    isInvalid: props.isInvalid,\n    isReadOnly: props.isReadOnly,\n    isRequired: props.isRequired,\n    nativeID: props.nativeID\n  });\n\n  var _React$useState = React.useState(false),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      isFocused = _React$useState2[0],\n      setIsFocused = _React$useState2[1];\n\n  var handleFocus = function handleFocus(focusState, callback) {\n    setIsFocused(focusState);\n    callback();\n  };\n\n  var _ref = React.useRef(null);\n\n  var _useHover = useHover({}, _ref),\n      isHovered = _useHover.isHovered;\n\n  var inputThemeProps = {\n    isDisabled: inputProps.disabled,\n    isInvalid: inputProps.accessibilityInvalid,\n    isReadOnly: inputProps.accessibilityReadOnly,\n    isRequired: inputProps.required\n  };\n\n  var _usePropsResolution = usePropsResolution('Input', _objectSpread(_objectSpread({}, inputThemeProps), props), {\n    isDisabled: inputThemeProps.isDisabled,\n    isHovered: isHoveredProp || isHovered,\n    isFocused: isFocusedProp || isFocused,\n    isInvalid: inputThemeProps.isInvalid,\n    isReadOnly: inputThemeProps.isReadOnly\n  }),\n      ariaLabel = _usePropsResolution.ariaLabel,\n      accessibilityLabel = _usePropsResolution.accessibilityLabel,\n      type = _usePropsResolution.type,\n      isFullWidth = _usePropsResolution.isFullWidth,\n      isDisabled = _usePropsResolution.isDisabled,\n      isReadOnly = _usePropsResolution.isReadOnly,\n      fontFamily = _usePropsResolution.fontFamily,\n      fontWeight = _usePropsResolution.fontWeight,\n      fontStyle = _usePropsResolution.fontStyle,\n      placeholderTextColor = _usePropsResolution.placeholderTextColor,\n      selectionColor = _usePropsResolution.selectionColor,\n      underlineColorAndroid = _usePropsResolution.underlineColorAndroid,\n      _onFocus = _usePropsResolution.onFocus,\n      _onBlur = _usePropsResolution.onBlur,\n      wrapperRef = _usePropsResolution.wrapperRef,\n      _stack = _usePropsResolution._stack,\n      _input = _usePropsResolution._input,\n      resolvedProps = _objectWithoutProperties(_usePropsResolution, _excluded2);\n\n  var _extractInObject = extractInObject(resolvedProps, [].concat(_toConsumableArray(stylingProps.margin), _toConsumableArray(stylingProps.border), _toConsumableArray(stylingProps.layout), _toConsumableArray(stylingProps.flexbox), _toConsumableArray(stylingProps.position), _toConsumableArray(stylingProps.background), ['shadow', 'opacity'])),\n      _extractInObject2 = _slicedToArray(_extractInObject, 2),\n      layoutProps = _extractInObject2[0],\n      nonLayoutProps = _extractInObject2[1];\n\n  var resolvedFontFamily = useResolvedFontFamily({\n    fontFamily: fontFamily,\n    fontWeight: fontWeight !== null && fontWeight !== void 0 ? fontWeight : 400,\n    fontStyle: fontStyle !== null && fontStyle !== void 0 ? fontStyle : 'normal'\n  });\n  var resolvedPlaceholderTextColor = useToken('colors', placeholderTextColor);\n  var resolvedSelectionColor = useToken('colors', selectionColor);\n  var resolvedUnderlineColorAndroid = useToken('colors', underlineColorAndroid);\n  resolvedProps.focusOutlineColor = useToken('colors', resolvedProps.focusOutlineColor);\n  resolvedProps.invalidOutlineColor = useToken('colors', resolvedProps.invalidOutlineColor);\n\n  if (useHasResponsiveProps(props)) {\n    return null;\n  }\n\n  if (resolvedProps.focusOutlineColor && isFocused) {\n    layoutProps.borderColor = resolvedProps.focusOutlineColor;\n    _stack.style = resolveStackStyleInput(props.variant, resolvedProps.focusOutlineColor);\n  }\n\n  if (resolvedProps.invalidOutlineColor && props.isInvalid) {\n    layoutProps.borderColor = resolvedProps.invalidOutlineColor;\n    _stack.style = resolveStackStyleInput(props.variant, resolvedProps.invalidOutlineColor);\n  }\n\n  return React.createElement(Stack, _extends({}, _stack, layoutProps, {\n    ref: mergeRefs([_ref, wrapperRef]),\n    isFocused: isFocused\n  }), InputLeftElement || leftElement ? InputLeftElement || leftElement : null, React.createElement(StyledInput, _extends({}, inputProps, {\n    secureTextEntry: type === 'password',\n    accessible: true,\n    accessibilityLabel: ariaLabel || accessibilityLabel,\n    editable: isDisabled || isReadOnly ? false : true,\n    w: isFullWidth ? '100%' : undefined\n  }, nonLayoutProps, resolvedFontFamily, {\n    placeholderTextColor: resolvedPlaceholderTextColor,\n    selectionColor: resolvedSelectionColor,\n    underlineColorAndroid: resolvedUnderlineColorAndroid,\n    onKeyPress: function onKeyPress(e) {\n      e.persist();\n      _onKeyPress && _onKeyPress(e);\n    },\n    onFocus: function onFocus(e) {\n      handleFocus(true, _onFocus ? function () {\n        return _onFocus(e);\n      } : function () {});\n    },\n    onBlur: function onBlur(e) {\n      handleFocus(false, _onBlur ? function () {\n        return _onBlur(e);\n      } : function () {});\n    }\n  }, _input, {\n    ref: mergeRefs([ref, _ref, wrapperRef])\n  })), InputRightElement || rightElement ? InputRightElement || rightElement : null);\n};\n\nexport default memo(forwardRef(Input));","map":{"version":3,"sources":["Input.tsx"],"names":["StyledInput","makeStyledComponent","Input","isHovered","isFocused","props","inputProps","useFormControl","isDisabled","isInvalid","isReadOnly","isRequired","nativeID","React","handleFocus","setIsFocused","callback","_ref","useHover","inputThemeProps","required","resolvedProps","usePropsResolution","isHoveredProp","isFocusedProp","extractInObject","stylingProps","resolvedFontFamily","useResolvedFontFamily","fontFamily","fontWeight","fontStyle","resolvedPlaceholderTextColor","useToken","resolvedSelectionColor","resolvedUnderlineColorAndroid","useHasResponsiveProps","layoutProps","_stack","resolveStackStyleInput","mergeRefs","InputLeftElement","type","ariaLabel","isFullWidth","undefined","e","onKeyPress","onFocus","onBlur","InputRightElement","memo","forwardRef"],"mappings":"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","sourcesContent":["import React, { memo, forwardRef } from 'react';\nimport type { IInputProps } from './types';\nimport { TextInput } from 'react-native';\nimport { useToken } from '../../../hooks';\nimport { useFormControl } from '../../composites/FormControl';\nimport { useHasResponsiveProps } from '../../../hooks/useHasResponsiveProps';\nimport { useHover } from '@react-native-aria/interactions';\nimport { extractInObject, stylingProps } from '../../../theme/tools/utils';\nimport { usePropsResolution } from '../../../hooks/useThemeProps';\nimport { mergeRefs, resolveStackStyleInput } from '../../../utils';\nimport { Stack } from '../Stack';\nimport { makeStyledComponent } from '../../../utils/styled';\nimport { useResolvedFontFamily } from '../../../hooks/useResolvedFontFamily';\n\nconst StyledInput = makeStyledComponent(TextInput);\n\nconst Input = (\n  {\n    isHovered: isHoveredProp,\n    isFocused: isFocusedProp,\n    onKeyPress,\n    InputLeftElement,\n    InputRightElement,\n    leftElement,\n    rightElement,\n    ...props\n  }: IInputProps,\n  ref: any\n) => {\n  const inputProps = useFormControl({\n    isDisabled: props.isDisabled,\n    isInvalid: props.isInvalid,\n    isReadOnly: props.isReadOnly,\n    isRequired: props.isRequired,\n    nativeID: props.nativeID,\n  });\n  const [isFocused, setIsFocused] = React.useState(false);\n  const handleFocus = (focusState: boolean, callback: any) => {\n    setIsFocused(focusState);\n    callback();\n  };\n\n  const _ref = React.useRef(null);\n  const { isHovered } = useHover({}, _ref);\n\n  const inputThemeProps = {\n    isDisabled: inputProps.disabled,\n    isInvalid: inputProps.accessibilityInvalid,\n    isReadOnly: inputProps.accessibilityReadOnly,\n    isRequired: inputProps.required,\n  };\n\n  const {\n    ariaLabel,\n    accessibilityLabel,\n    type,\n    isFullWidth,\n    isDisabled,\n    isReadOnly,\n    fontFamily,\n    fontWeight,\n    fontStyle,\n    placeholderTextColor,\n    selectionColor,\n    underlineColorAndroid,\n    onFocus,\n    onBlur,\n    wrapperRef,\n    _stack,\n    _input,\n\n    ...resolvedProps\n  } = usePropsResolution(\n    'Input',\n    {\n      ...inputThemeProps,\n      ...props,\n    },\n    {\n      isDisabled: inputThemeProps.isDisabled,\n      isHovered: isHoveredProp || isHovered,\n      isFocused: isFocusedProp || isFocused,\n      isInvalid: inputThemeProps.isInvalid,\n      isReadOnly: inputThemeProps.isReadOnly,\n    }\n  );\n\n  const [layoutProps, nonLayoutProps] = extractInObject(resolvedProps, [\n    ...stylingProps.margin,\n    ...stylingProps.border,\n    ...stylingProps.layout,\n    ...stylingProps.flexbox,\n    ...stylingProps.position,\n    ...stylingProps.background,\n    'shadow',\n    'opacity',\n  ]);\n\n  const resolvedFontFamily = useResolvedFontFamily({\n    fontFamily,\n    fontWeight: fontWeight ?? 400,\n    fontStyle: fontStyle ?? 'normal',\n  });\n  const resolvedPlaceholderTextColor = useToken('colors', placeholderTextColor);\n  const resolvedSelectionColor = useToken('colors', selectionColor);\n  const resolvedUnderlineColorAndroid = useToken(\n    'colors',\n    underlineColorAndroid\n  );\n\n  /**Converting into Hash Color Code */\n  //@ts-ignore\n  resolvedProps.focusOutlineColor = useToken(\n    'colors',\n    resolvedProps.focusOutlineColor\n  );\n  //@ts-ignore\n  resolvedProps.invalidOutlineColor = useToken(\n    'colors',\n    resolvedProps.invalidOutlineColor\n  );\n  //TODO: refactor for responsive prop\n  if (useHasResponsiveProps(props)) {\n    return null;\n  }\n\n  if (resolvedProps.focusOutlineColor && isFocused) {\n    layoutProps.borderColor = resolvedProps.focusOutlineColor;\n    _stack.style = resolveStackStyleInput(\n      props.variant,\n      resolvedProps.focusOutlineColor\n    );\n  }\n\n  if (resolvedProps.invalidOutlineColor && props.isInvalid) {\n    layoutProps.borderColor = resolvedProps.invalidOutlineColor;\n    _stack.style = resolveStackStyleInput(\n      props.variant,\n      resolvedProps.invalidOutlineColor\n    );\n  }\n\n  return (\n    <Stack\n      {..._stack}\n      {...layoutProps}\n      ref={mergeRefs([_ref, wrapperRef])}\n      isFocused={isFocused}\n    >\n      {InputLeftElement || leftElement ? InputLeftElement || leftElement : null}\n      <StyledInput\n        {...inputProps}\n        secureTextEntry={type === 'password'}\n        accessible\n        accessibilityLabel={ariaLabel || accessibilityLabel}\n        editable={isDisabled || isReadOnly ? false : true}\n        w={isFullWidth ? '100%' : undefined}\n        {...nonLayoutProps}\n        {...resolvedFontFamily}\n        placeholderTextColor={resolvedPlaceholderTextColor}\n        selectionColor={resolvedSelectionColor}\n        underlineColorAndroid={resolvedUnderlineColorAndroid}\n        onKeyPress={(e: any) => {\n          e.persist();\n          onKeyPress && onKeyPress(e);\n        }}\n        onFocus={(e: any) => {\n          handleFocus(true, onFocus ? () => onFocus(e) : () => {});\n        }}\n        onBlur={(e: any) => {\n          handleFocus(false, onBlur ? () => onBlur(e) : () => {});\n        }}\n        {..._input}\n        ref={mergeRefs([ref, _ref, wrapperRef])}\n      />\n      {InputRightElement || rightElement\n        ? InputRightElement || rightElement\n        : null}\n    </Stack>\n  );\n};\n\nexport default memo(forwardRef(Input));\n"]},"metadata":{},"sourceType":"module"}