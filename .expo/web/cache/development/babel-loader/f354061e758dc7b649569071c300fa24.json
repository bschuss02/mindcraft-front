{"ast":null,"code":"import React from 'react';\nimport { isExperimentalWebImplementationEnabled } from \"./EnableExperimentalWebImplementation\";\nimport InteractionManager from \"./web/tools/InteractionManager\";\nimport NodeManager from \"./web/tools/NodeManager\";\nimport PanGestureHandler from \"./web/handlers/PanGestureHandler\";\nimport TapGestureHandler from \"./web/handlers/TapGestureHandler\";\nimport LongPressGestureHandler from \"./web/handlers/LongPressGestureHandler\";\nimport PinchGestureHandler from \"./web/handlers/PinchGestureHandler\";\nimport RotationGestureHandler from \"./web/handlers/RotationGestureHandler\";\nimport FlingGestureHandler from \"./web/handlers/FlingGestureHandler\";\nimport NativeViewGestureHandler from \"./web/handlers/NativeViewGestureHandler\";\nimport ManualGestureHandler from \"./web/handlers/ManualGestureHandler\";\nimport * as HammerNodeManager from \"./web_hammer/NodeManager\";\nimport HammerNativeViewGestureHandler from \"./web_hammer/NativeViewGestureHandler\";\nimport HammerPanGestureHandler from \"./web_hammer/PanGestureHandler\";\nimport HammerTapGestureHandler from \"./web_hammer/TapGestureHandler\";\nimport HammerLongPressGestureHandler from \"./web_hammer/LongPressGestureHandler\";\nimport HammerPinchGestureHandler from \"./web_hammer/PinchGestureHandler\";\nimport HammerRotationGestureHandler from \"./web_hammer/RotationGestureHandler\";\nimport HammerFlingGestureHandler from \"./web_hammer/FlingGestureHandler\";\nexport var Gestures = {\n  NativeViewGestureHandler: NativeViewGestureHandler,\n  PanGestureHandler: PanGestureHandler,\n  TapGestureHandler: TapGestureHandler,\n  LongPressGestureHandler: LongPressGestureHandler,\n  PinchGestureHandler: PinchGestureHandler,\n  RotationGestureHandler: RotationGestureHandler,\n  FlingGestureHandler: FlingGestureHandler,\n  ManualGestureHandler: ManualGestureHandler\n};\nexport var HammerGestures = {\n  NativeViewGestureHandler: HammerNativeViewGestureHandler,\n  PanGestureHandler: HammerPanGestureHandler,\n  TapGestureHandler: HammerTapGestureHandler,\n  LongPressGestureHandler: HammerLongPressGestureHandler,\n  PinchGestureHandler: HammerPinchGestureHandler,\n  RotationGestureHandler: HammerRotationGestureHandler,\n  FlingGestureHandler: HammerFlingGestureHandler\n};\nexport default {\n  handleSetJSResponder: function handleSetJSResponder(tag, blockNativeResponder) {\n    console.warn('handleSetJSResponder: ', tag, blockNativeResponder);\n  },\n  handleClearJSResponder: function handleClearJSResponder() {\n    console.warn('handleClearJSResponder: ');\n  },\n  createGestureHandler: function createGestureHandler(handlerName, handlerTag, config) {\n    if (isExperimentalWebImplementationEnabled()) {\n      if (!(handlerName in Gestures)) {\n        throw new Error(\"react-native-gesture-handler: \" + handlerName + \" is not supported on web.\");\n      }\n\n      var GestureClass = Gestures[handlerName];\n      NodeManager.createGestureHandler(handlerTag, new GestureClass());\n      InteractionManager.getInstance().configureInteractions(NodeManager.getHandler(handlerTag), config);\n    } else {\n      if (!(handlerName in HammerGestures)) {\n        throw new Error(\"react-native-gesture-handler: \" + handlerName + \" is not supported on web.\");\n      }\n\n      var _GestureClass = HammerGestures[handlerName];\n      HammerNodeManager.createGestureHandler(handlerTag, new _GestureClass());\n    }\n\n    this.updateGestureHandler(handlerTag, config);\n  },\n  attachGestureHandler: function attachGestureHandler(handlerTag, newView, _actionType, propsRef) {\n    if (!(newView instanceof HTMLElement || newView instanceof React.Component)) {\n      return;\n    }\n\n    if (isExperimentalWebImplementationEnabled()) {\n      NodeManager.getHandler(handlerTag).init(newView, propsRef);\n    } else {\n      HammerNodeManager.getHandler(handlerTag).setView(newView, propsRef);\n    }\n  },\n  updateGestureHandler: function updateGestureHandler(handlerTag, newConfig) {\n    if (isExperimentalWebImplementationEnabled()) {\n      NodeManager.getHandler(handlerTag).updateGestureConfig(newConfig);\n      InteractionManager.getInstance().configureInteractions(NodeManager.getHandler(handlerTag), newConfig);\n    } else {\n      HammerNodeManager.getHandler(handlerTag).updateGestureConfig(newConfig);\n    }\n  },\n  getGestureHandlerNode: function getGestureHandlerNode(handlerTag) {\n    if (isExperimentalWebImplementationEnabled()) {\n      return NodeManager.getHandler(handlerTag);\n    } else {\n      return HammerNodeManager.getHandler(handlerTag);\n    }\n  },\n  dropGestureHandler: function dropGestureHandler(handlerTag) {\n    if (isExperimentalWebImplementationEnabled()) {\n      NodeManager.dropGestureHandler(handlerTag);\n    } else {\n      HammerNodeManager.dropGestureHandler(handlerTag);\n    }\n  },\n  flushOperations: function flushOperations() {}\n};","map":{"version":3,"sources":["RNGestureHandlerModule.web.ts"],"names":["Gestures","NativeViewGestureHandler","PanGestureHandler","TapGestureHandler","LongPressGestureHandler","PinchGestureHandler","RotationGestureHandler","FlingGestureHandler","ManualGestureHandler","HammerGestures","HammerFlingGestureHandler","handleSetJSResponder","console","handleClearJSResponder","createGestureHandler","isExperimentalWebImplementationEnabled","handlerName","GestureClass","NodeManager","InteractionManager","HammerNodeManager","attachGestureHandler","newView","React","updateGestureHandler","getGestureHandlerNode","dropGestureHandler","flushOperations"],"mappings":"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","sourcesContent":["import React from 'react';\n\nimport { ActionType } from './ActionType';\nimport { isExperimentalWebImplementationEnabled } from './EnableExperimentalWebImplementation';\n\n//GestureHandlers\nimport InteractionManager from './web/tools/InteractionManager';\nimport NodeManager from './web/tools/NodeManager';\nimport PanGestureHandler from './web/handlers/PanGestureHandler';\nimport TapGestureHandler from './web/handlers/TapGestureHandler';\nimport LongPressGestureHandler from './web/handlers/LongPressGestureHandler';\nimport PinchGestureHandler from './web/handlers/PinchGestureHandler';\nimport RotationGestureHandler from './web/handlers/RotationGestureHandler';\nimport FlingGestureHandler from './web/handlers/FlingGestureHandler';\nimport NativeViewGestureHandler from './web/handlers/NativeViewGestureHandler';\nimport ManualGestureHandler from './web/handlers/ManualGestureHandler';\n\n//Hammer Handlers\nimport * as HammerNodeManager from './web_hammer/NodeManager';\nimport HammerNativeViewGestureHandler from './web_hammer/NativeViewGestureHandler';\nimport HammerPanGestureHandler from './web_hammer/PanGestureHandler';\nimport HammerTapGestureHandler from './web_hammer/TapGestureHandler';\nimport HammerLongPressGestureHandler from './web_hammer/LongPressGestureHandler';\nimport HammerPinchGestureHandler from './web_hammer/PinchGestureHandler';\nimport HammerRotationGestureHandler from './web_hammer/RotationGestureHandler';\nimport HammerFlingGestureHandler from './web_hammer/FlingGestureHandler';\nimport { Config } from './web/interfaces';\n\nexport const Gestures = {\n  NativeViewGestureHandler,\n  PanGestureHandler,\n  TapGestureHandler,\n  LongPressGestureHandler,\n  PinchGestureHandler,\n  RotationGestureHandler,\n  FlingGestureHandler,\n  ManualGestureHandler,\n};\n\nexport const HammerGestures = {\n  NativeViewGestureHandler: HammerNativeViewGestureHandler,\n  PanGestureHandler: HammerPanGestureHandler,\n  TapGestureHandler: HammerTapGestureHandler,\n  LongPressGestureHandler: HammerLongPressGestureHandler,\n  PinchGestureHandler: HammerPinchGestureHandler,\n  RotationGestureHandler: HammerRotationGestureHandler,\n  FlingGestureHandler: HammerFlingGestureHandler,\n};\n\nexport default {\n  handleSetJSResponder(tag: number, blockNativeResponder: boolean) {\n    console.warn('handleSetJSResponder: ', tag, blockNativeResponder);\n  },\n  handleClearJSResponder() {\n    console.warn('handleClearJSResponder: ');\n  },\n  createGestureHandler<T>(\n    handlerName: keyof typeof Gestures,\n    handlerTag: number,\n    config: T\n  ) {\n    if (isExperimentalWebImplementationEnabled()) {\n      if (!(handlerName in Gestures)) {\n        throw new Error(\n          `react-native-gesture-handler: ${handlerName} is not supported on web.`\n        );\n      }\n\n      const GestureClass = Gestures[handlerName];\n      NodeManager.createGestureHandler(handlerTag, new GestureClass());\n      InteractionManager.getInstance().configureInteractions(\n        NodeManager.getHandler(handlerTag),\n        config as unknown as Config\n      );\n    } else {\n      if (!(handlerName in HammerGestures)) {\n        throw new Error(\n          `react-native-gesture-handler: ${handlerName} is not supported on web.`\n        );\n      }\n\n      // @ts-ignore If it doesn't exist, the error is thrown\n      // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\n      const GestureClass = HammerGestures[handlerName];\n      // eslint-disable-next-line @typescript-eslint/no-unsafe-call\n      HammerNodeManager.createGestureHandler(handlerTag, new GestureClass());\n    }\n\n    this.updateGestureHandler(handlerTag, config as unknown as Config);\n  },\n  attachGestureHandler(\n    handlerTag: number,\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    newView: any,\n    _actionType: ActionType,\n    propsRef: React.RefObject<unknown>\n  ) {\n    if (\n      !(newView instanceof HTMLElement || newView instanceof React.Component)\n    ) {\n      return;\n    }\n\n    if (isExperimentalWebImplementationEnabled()) {\n      //@ts-ignore Types should be HTMLElement or React.Component\n      NodeManager.getHandler(handlerTag).init(newView, propsRef);\n    } else {\n      //@ts-ignore Types should be HTMLElement or React.Component\n      HammerNodeManager.getHandler(handlerTag).setView(newView, propsRef);\n    }\n  },\n  updateGestureHandler(handlerTag: number, newConfig: Config) {\n    if (isExperimentalWebImplementationEnabled()) {\n      NodeManager.getHandler(handlerTag).updateGestureConfig(newConfig);\n\n      InteractionManager.getInstance().configureInteractions(\n        NodeManager.getHandler(handlerTag),\n        newConfig\n      );\n    } else {\n      HammerNodeManager.getHandler(handlerTag).updateGestureConfig(newConfig);\n    }\n  },\n  getGestureHandlerNode(handlerTag: number) {\n    if (isExperimentalWebImplementationEnabled()) {\n      return NodeManager.getHandler(handlerTag);\n    } else {\n      return HammerNodeManager.getHandler(handlerTag);\n    }\n  },\n  dropGestureHandler(handlerTag: number) {\n    if (isExperimentalWebImplementationEnabled()) {\n      NodeManager.dropGestureHandler(handlerTag);\n    } else {\n      HammerNodeManager.dropGestureHandler(handlerTag);\n    }\n  },\n  // eslint-disable-next-line @typescript-eslint/no-empty-function\n  flushOperations() {},\n};\n"]},"metadata":{},"sourceType":"module"}