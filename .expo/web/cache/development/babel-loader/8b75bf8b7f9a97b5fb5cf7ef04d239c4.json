{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport { useState, useEffect, useContext, createContext } from \"react\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport { Box, Text, Button, HStack, VStack, Icon } from \"native-base\";\nimport { useNavigation } from \"@react-navigation/native\";\nimport { Ionicons, MaterialCommunityIcons } from \"@expo/vector-icons\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nvar DisplayContext = createContext();\n\nfunction DisplayContextProvider(_ref) {\n  var children = _ref.children;\n\n  var _useState = useState(false),\n      _useState2 = _slicedToArray(_useState, 2),\n      isStartupLoading = _useState2[0],\n      setIsStartupLoading = _useState2[1];\n\n  var _useState3 = useState(\"\"),\n      _useState4 = _slicedToArray(_useState3, 2),\n      message = _useState4[0],\n      setMessage = _useState4[1];\n\n  var stateVars = {\n    message: message,\n    isStartupLoading: isStartupLoading\n  };\n  var stateSetters = {\n    setMessage: setMessage,\n    setIsStartupLoading: setIsStartupLoading\n  };\n  return _jsx(DisplayContext.Provider, {\n    value: _objectSpread(_objectSpread({}, stateVars), stateSetters),\n    children: children\n  });\n}\n\nexport { DisplayContextProvider, DisplayContext };","map":{"version":3,"sources":["/Users/Benjamin/Dev/hoohacks/mindcraft-front/src/context/DisplayContext.js"],"names":["useState","useEffect","useContext","createContext","Box","Text","Button","HStack","VStack","Icon","useNavigation","Ionicons","MaterialCommunityIcons","DisplayContext","DisplayContextProvider","children","isStartupLoading","setIsStartupLoading","message","setMessage","stateVars","stateSetters"],"mappings":";;;;;;;AAAA,SAASA,QAAT,EAAmBC,SAAnB,EAA8BC,UAA9B,EAA0CC,aAA1C,QAA+D,OAA/D;;AAEA,SAASC,GAAT,EAAcC,IAAd,EAAoBC,MAApB,EAA4BC,MAA5B,EAAoCC,MAApC,EAA4CC,IAA5C,QAAwD,aAAxD;AACA,SAASC,aAAT,QAA8B,0BAA9B;AACA,SAASC,QAAT,EAAmBC,sBAAnB,QAAiD,oBAAjD;;AAEA,IAAMC,cAAc,GAAGV,aAAa,EAApC;;AAEA,SAASW,sBAAT,OAA8C;AAAA,MAAZC,QAAY,QAAZA,QAAY;;AAC7C,kBAAgDf,QAAQ,CAAC,KAAD,CAAxD;AAAA;AAAA,MAAOgB,gBAAP;AAAA,MAAyBC,mBAAzB;;AACA,mBAA8BjB,QAAQ,CAAC,EAAD,CAAtC;AAAA;AAAA,MAAOkB,OAAP;AAAA,MAAgBC,UAAhB;;AAEA,MAAMC,SAAS,GAAG;AACjBF,IAAAA,OAAO,EAAPA,OADiB;AAEjBF,IAAAA,gBAAgB,EAAhBA;AAFiB,GAAlB;AAIA,MAAMK,YAAY,GAAG;AACpBF,IAAAA,UAAU,EAAVA,UADoB;AAEpBF,IAAAA,mBAAmB,EAAnBA;AAFoB,GAArB;AAIA,SACC,KAAC,cAAD,CAAgB,QAAhB;AAAyB,IAAA,KAAK,kCAAOG,SAAP,GAAqBC,YAArB,CAA9B;AAAA,cACEN;AADF,IADD;AAKA;;AAED,SAASD,sBAAT,EAAiCD,cAAjC","sourcesContent":["import { useState, useEffect, useContext, createContext } from \"react\"\nimport { TouchableOpacity } from \"react-native\"\nimport { Box, Text, Button, HStack, VStack, Icon } from \"native-base\"\nimport { useNavigation } from \"@react-navigation/native\"\nimport { Ionicons, MaterialCommunityIcons } from \"@expo/vector-icons\"\n\nconst DisplayContext = createContext()\n\nfunction DisplayContextProvider({ children }) {\n\tconst [isStartupLoading, setIsStartupLoading] = useState(false)\n\tconst [message, setMessage] = useState(\"\")\n\n\tconst stateVars = {\n\t\tmessage,\n\t\tisStartupLoading,\n\t}\n\tconst stateSetters = {\n\t\tsetMessage,\n\t\tsetIsStartupLoading,\n\t}\n\treturn (\n\t\t<DisplayContext.Provider value={{ ...stateVars, ...stateSetters }}>\n\t\t\t{children}\n\t\t</DisplayContext.Provider>\n\t)\n}\n\nexport { DisplayContextProvider, DisplayContext }\n"]},"metadata":{},"sourceType":"module"}