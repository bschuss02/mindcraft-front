{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport { CommonActions, DrawerActions, useLinkBuilder } from '@react-navigation/native';\nimport * as React from 'react';\nimport DrawerItem from \"./DrawerItem\";\nexport default function DrawerItemList(_ref) {\n  var state = _ref.state,\n      navigation = _ref.navigation,\n      descriptors = _ref.descriptors;\n  var buildLink = useLinkBuilder();\n  var focusedRoute = state.routes[state.index];\n  var focusedDescriptor = descriptors[focusedRoute.key];\n  var focusedOptions = focusedDescriptor.options;\n  var drawerActiveTintColor = focusedOptions.drawerActiveTintColor,\n      drawerInactiveTintColor = focusedOptions.drawerInactiveTintColor,\n      drawerActiveBackgroundColor = focusedOptions.drawerActiveBackgroundColor,\n      drawerInactiveBackgroundColor = focusedOptions.drawerInactiveBackgroundColor;\n  return state.routes.map(function (route, i) {\n    var focused = i === state.index;\n\n    var onPress = function onPress() {\n      var event = navigation.emit({\n        type: 'drawerItemPress',\n        target: route.key,\n        canPreventDefault: true\n      });\n\n      if (!event.defaultPrevented) {\n        navigation.dispatch(_objectSpread(_objectSpread({}, focused ? DrawerActions.closeDrawer() : CommonActions.navigate({\n          name: route.name,\n          merge: true\n        })), {}, {\n          target: state.key\n        }));\n      }\n    };\n\n    var _descriptors$route$ke = descriptors[route.key].options,\n        title = _descriptors$route$ke.title,\n        drawerLabel = _descriptors$route$ke.drawerLabel,\n        drawerIcon = _descriptors$route$ke.drawerIcon,\n        drawerLabelStyle = _descriptors$route$ke.drawerLabelStyle,\n        drawerItemStyle = _descriptors$route$ke.drawerItemStyle,\n        drawerAllowFontScaling = _descriptors$route$ke.drawerAllowFontScaling;\n    return React.createElement(DrawerItem, {\n      key: route.key,\n      label: drawerLabel !== undefined ? drawerLabel : title !== undefined ? title : route.name,\n      icon: drawerIcon,\n      focused: focused,\n      activeTintColor: drawerActiveTintColor,\n      inactiveTintColor: drawerInactiveTintColor,\n      activeBackgroundColor: drawerActiveBackgroundColor,\n      inactiveBackgroundColor: drawerInactiveBackgroundColor,\n      allowFontScaling: drawerAllowFontScaling,\n      labelStyle: drawerLabelStyle,\n      style: drawerItemStyle,\n      to: buildLink(route.name, route.params),\n      onPress: onPress\n    });\n  });\n}","map":{"version":3,"sources":["views/DrawerItemList.tsx"],"names":["CommonActions","DrawerActions","useLinkBuilder","React","DrawerItem","DrawerItemList","state","navigation","descriptors","buildLink","focusedRoute","routes","index","focusedDescriptor","key","focusedOptions","options","drawerActiveTintColor","drawerInactiveTintColor","drawerActiveBackgroundColor","drawerInactiveBackgroundColor","map","route","i","focused","onPress","event","emit","type","target","canPreventDefault","defaultPrevented","dispatch","closeDrawer","navigate","name","merge","title","drawerLabel","drawerIcon","drawerLabelStyle","drawerItemStyle","drawerAllowFontScaling","undefined","params"],"mappings":"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","sourceRoot":"../../../src","sourcesContent":["import { CommonActions, DrawerActions, useLinkBuilder } from '@react-navigation/native';\nimport * as React from 'react';\nimport DrawerItem from './DrawerItem';\n/**\n * Component that renders the navigation list in the drawer.\n */\nexport default function DrawerItemList(_ref) {\n  let {\n    state,\n    navigation,\n    descriptors\n  } = _ref;\n  const buildLink = useLinkBuilder();\n  const focusedRoute = state.routes[state.index];\n  const focusedDescriptor = descriptors[focusedRoute.key];\n  const focusedOptions = focusedDescriptor.options;\n  const {\n    drawerActiveTintColor,\n    drawerInactiveTintColor,\n    drawerActiveBackgroundColor,\n    drawerInactiveBackgroundColor\n  } = focusedOptions;\n  return state.routes.map((route, i) => {\n    const focused = i === state.index;\n    const onPress = () => {\n      const event = navigation.emit({\n        type: 'drawerItemPress',\n        target: route.key,\n        canPreventDefault: true\n      });\n      if (!event.defaultPrevented) {\n        navigation.dispatch({\n          ...(focused ? DrawerActions.closeDrawer() : CommonActions.navigate({\n            name: route.name,\n            merge: true\n          })),\n          target: state.key\n        });\n      }\n    };\n    const {\n      title,\n      drawerLabel,\n      drawerIcon,\n      drawerLabelStyle,\n      drawerItemStyle,\n      drawerAllowFontScaling\n    } = descriptors[route.key].options;\n    return /*#__PURE__*/React.createElement(DrawerItem, {\n      key: route.key,\n      label: drawerLabel !== undefined ? drawerLabel : title !== undefined ? title : route.name,\n      icon: drawerIcon,\n      focused: focused,\n      activeTintColor: drawerActiveTintColor,\n      inactiveTintColor: drawerInactiveTintColor,\n      activeBackgroundColor: drawerActiveBackgroundColor,\n      inactiveBackgroundColor: drawerInactiveBackgroundColor,\n      allowFontScaling: drawerAllowFontScaling,\n      labelStyle: drawerLabelStyle,\n      style: drawerItemStyle,\n      to: buildLink(route.name, route.params),\n      onPress: onPress\n    });\n  });\n}\n//# sourceMappingURL=DrawerItemList.js.map"]},"metadata":{},"sourceType":"module"}