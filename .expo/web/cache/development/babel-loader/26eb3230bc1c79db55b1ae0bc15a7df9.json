{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nvar _excluded = [\"key\", \"routeNames\"];\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport { CommonActions } from '@react-navigation/routers';\nimport * as React from 'react';\nimport checkDuplicateRouteNames from \"./checkDuplicateRouteNames\";\nimport checkSerializable from \"./checkSerializable\";\nimport { NOT_INITIALIZED_ERROR } from \"./createNavigationContainerRef\";\nimport EnsureSingleNavigator from \"./EnsureSingleNavigator\";\nimport findFocusedRoute from \"./findFocusedRoute\";\nimport NavigationBuilderContext from \"./NavigationBuilderContext\";\nimport NavigationContainerRefContext from \"./NavigationContainerRefContext\";\nimport NavigationContext from \"./NavigationContext\";\nimport NavigationRouteContext from \"./NavigationRouteContext\";\nimport NavigationStateContext from \"./NavigationStateContext\";\nimport UnhandledActionContext from \"./UnhandledActionContext\";\nimport useChildListeners from \"./useChildListeners\";\nimport useEventEmitter from \"./useEventEmitter\";\nimport useKeyedChildListeners from \"./useKeyedChildListeners\";\nimport useOptionsGetters from \"./useOptionsGetters\";\nimport { ScheduleUpdateContext } from \"./useScheduleUpdate\";\nimport useSyncState from \"./useSyncState\";\nvar serializableWarnings = [];\nvar duplicateNameWarnings = [];\n\nvar getPartialState = function getPartialState(state) {\n  if (state === undefined) {\n    return;\n  }\n\n  var key = state.key,\n      routeNames = state.routeNames,\n      partialState = _objectWithoutProperties(state, _excluded);\n\n  return _objectSpread(_objectSpread({}, partialState), {}, {\n    stale: true,\n    routes: state.routes.map(function (route) {\n      if (route.state === undefined) {\n        return route;\n      }\n\n      return _objectSpread(_objectSpread({}, route), {}, {\n        state: getPartialState(route.state)\n      });\n    })\n  });\n};\n\nvar BaseNavigationContainer = React.forwardRef(function BaseNavigationContainer(_ref, ref) {\n  var initialState = _ref.initialState,\n      onStateChange = _ref.onStateChange,\n      onUnhandledAction = _ref.onUnhandledAction,\n      independent = _ref.independent,\n      children = _ref.children;\n  var parent = React.useContext(NavigationStateContext);\n\n  if (!parent.isDefault && !independent) {\n    throw new Error(\"Looks like you have nested a 'NavigationContainer' inside another. Normally you need only one container at the root of the app, so this was probably an error. If this was intentional, pass 'independent={true}' explicitly. Note that this will make the child navigators disconnected from the parent and you won't be able to navigate between them.\");\n  }\n\n  var _useSyncState = useSyncState(function () {\n    return getPartialState(initialState == null ? undefined : initialState);\n  }),\n      _useSyncState2 = _slicedToArray(_useSyncState, 5),\n      state = _useSyncState2[0],\n      getState = _useSyncState2[1],\n      setState = _useSyncState2[2],\n      scheduleUpdate = _useSyncState2[3],\n      flushUpdates = _useSyncState2[4];\n\n  var isFirstMountRef = React.useRef(true);\n  var navigatorKeyRef = React.useRef();\n  var getKey = React.useCallback(function () {\n    return navigatorKeyRef.current;\n  }, []);\n  var setKey = React.useCallback(function (key) {\n    navigatorKeyRef.current = key;\n  }, []);\n\n  var _useChildListeners = useChildListeners(),\n      listeners = _useChildListeners.listeners,\n      addListener = _useChildListeners.addListener;\n\n  var _useKeyedChildListene = useKeyedChildListeners(),\n      keyedListeners = _useKeyedChildListene.keyedListeners,\n      addKeyedListener = _useKeyedChildListene.addKeyedListener;\n\n  var dispatch = React.useCallback(function (action) {\n    if (listeners.focus[0] == null) {\n      console.error(NOT_INITIALIZED_ERROR);\n    } else {\n      listeners.focus[0](function (navigation) {\n        return navigation.dispatch(action);\n      });\n    }\n  }, [listeners.focus]);\n  var canGoBack = React.useCallback(function () {\n    if (listeners.focus[0] == null) {\n      return false;\n    }\n\n    var _listeners$focus$ = listeners.focus[0](function (navigation) {\n      return navigation.canGoBack();\n    }),\n        result = _listeners$focus$.result,\n        handled = _listeners$focus$.handled;\n\n    if (handled) {\n      return result;\n    } else {\n      return false;\n    }\n  }, [listeners.focus]);\n  var resetRoot = React.useCallback(function (state) {\n    var _ref2;\n\n    var _keyedListeners$getSt, _keyedListeners$getSt2;\n\n    var target = (_ref2 = state === null || state === void 0 ? void 0 : state.key) != null ? _ref2 : (_keyedListeners$getSt = (_keyedListeners$getSt2 = keyedListeners.getState).root) === null || _keyedListeners$getSt === void 0 ? void 0 : _keyedListeners$getSt.call(_keyedListeners$getSt2).key;\n\n    if (target == null) {\n      console.error(NOT_INITIALIZED_ERROR);\n    } else {\n      listeners.focus[0](function (navigation) {\n        return navigation.dispatch(_objectSpread(_objectSpread({}, CommonActions.reset(state)), {}, {\n          target: target\n        }));\n      });\n    }\n  }, [keyedListeners.getState, listeners.focus]);\n  var getRootState = React.useCallback(function () {\n    var _keyedListeners$getSt3, _keyedListeners$getSt4;\n\n    return (_keyedListeners$getSt3 = (_keyedListeners$getSt4 = keyedListeners.getState).root) === null || _keyedListeners$getSt3 === void 0 ? void 0 : _keyedListeners$getSt3.call(_keyedListeners$getSt4);\n  }, [keyedListeners.getState]);\n  var getCurrentRoute = React.useCallback(function () {\n    var state = getRootState();\n\n    if (state == null) {\n      return undefined;\n    }\n\n    var route = findFocusedRoute(state);\n    return route;\n  }, [getRootState]);\n  var emitter = useEventEmitter();\n\n  var _useOptionsGetters = useOptionsGetters({}),\n      addOptionsGetter = _useOptionsGetters.addOptionsGetter,\n      getCurrentOptions = _useOptionsGetters.getCurrentOptions;\n\n  var navigation = React.useMemo(function () {\n    return _objectSpread(_objectSpread(_objectSpread({}, Object.keys(CommonActions).reduce(function (acc, name) {\n      acc[name] = function () {\n        return dispatch(CommonActions[name].apply(CommonActions, arguments));\n      };\n\n      return acc;\n    }, {})), emitter.create('root')), {}, {\n      dispatch: dispatch,\n      resetRoot: resetRoot,\n      isFocused: function isFocused() {\n        return true;\n      },\n      canGoBack: canGoBack,\n      getParent: function getParent() {\n        return undefined;\n      },\n      getState: function getState() {\n        return stateRef.current;\n      },\n      getRootState: getRootState,\n      getCurrentRoute: getCurrentRoute,\n      getCurrentOptions: getCurrentOptions,\n      isReady: function isReady() {\n        return listeners.focus[0] != null;\n      }\n    });\n  }, [canGoBack, dispatch, emitter, getCurrentOptions, getCurrentRoute, getRootState, listeners.focus, resetRoot]);\n  React.useImperativeHandle(ref, function () {\n    return navigation;\n  }, [navigation]);\n  var onDispatchAction = React.useCallback(function (action, noop) {\n    emitter.emit({\n      type: '__unsafe_action__',\n      data: {\n        action: action,\n        noop: noop,\n        stack: stackRef.current\n      }\n    });\n  }, [emitter]);\n  var lastEmittedOptionsRef = React.useRef();\n  var onOptionsChange = React.useCallback(function (options) {\n    if (lastEmittedOptionsRef.current === options) {\n      return;\n    }\n\n    lastEmittedOptionsRef.current = options;\n    emitter.emit({\n      type: 'options',\n      data: {\n        options: options\n      }\n    });\n  }, [emitter]);\n  var stackRef = React.useRef();\n  var builderContext = React.useMemo(function () {\n    return {\n      addListener: addListener,\n      addKeyedListener: addKeyedListener,\n      onDispatchAction: onDispatchAction,\n      onOptionsChange: onOptionsChange,\n      stackRef: stackRef\n    };\n  }, [addListener, addKeyedListener, onDispatchAction, onOptionsChange]);\n  var scheduleContext = React.useMemo(function () {\n    return {\n      scheduleUpdate: scheduleUpdate,\n      flushUpdates: flushUpdates\n    };\n  }, [scheduleUpdate, flushUpdates]);\n  var isInitialRef = React.useRef(true);\n  var getIsInitial = React.useCallback(function () {\n    return isInitialRef.current;\n  }, []);\n  var context = React.useMemo(function () {\n    return {\n      state: state,\n      getState: getState,\n      setState: setState,\n      getKey: getKey,\n      setKey: setKey,\n      getIsInitial: getIsInitial,\n      addOptionsGetter: addOptionsGetter\n    };\n  }, [state, getState, setState, getKey, setKey, getIsInitial, addOptionsGetter]);\n  var onStateChangeRef = React.useRef(onStateChange);\n  var stateRef = React.useRef(state);\n  React.useEffect(function () {\n    isInitialRef.current = false;\n    onStateChangeRef.current = onStateChange;\n    stateRef.current = state;\n  });\n  React.useEffect(function () {\n    var hydratedState = getRootState();\n\n    if (process.env.NODE_ENV !== 'production') {\n      if (hydratedState !== undefined) {\n        var serializableResult = checkSerializable(hydratedState);\n\n        if (!serializableResult.serializable) {\n          var location = serializableResult.location,\n              reason = serializableResult.reason;\n          var path = '';\n          var pointer = hydratedState;\n          var params = false;\n\n          for (var i = 0; i < location.length; i++) {\n            var curr = location[i];\n            var prev = location[i - 1];\n            pointer = pointer[curr];\n\n            if (!params && curr === 'state') {\n              continue;\n            } else if (!params && curr === 'routes') {\n              if (path) {\n                path += ' > ';\n              }\n            } else if (!params && typeof curr === 'number' && prev === 'routes') {\n              var _pointer;\n\n              path += (_pointer = pointer) === null || _pointer === void 0 ? void 0 : _pointer.name;\n            } else if (!params) {\n              path += \" > \" + curr;\n              params = true;\n            } else {\n              if (typeof curr === 'number' || /^[0-9]+$/.test(curr)) {\n                path += \"[\" + curr + \"]\";\n              } else if (/^[a-z$_]+$/i.test(curr)) {\n                path += \".\" + curr;\n              } else {\n                path += \"[\" + JSON.stringify(curr) + \"]\";\n              }\n            }\n          }\n\n          var message = \"Non-serializable values were found in the navigation state. Check:\\n\\n\" + path + \" (\" + reason + \")\\n\\nThis can break usage such as persisting and restoring state. This might happen if you passed non-serializable values such as function, class instances etc. in params. If you need to use components with callbacks in your options, you can use 'navigation.setOptions' instead. See https://reactnavigation.org/docs/troubleshooting#i-get-the-warning-non-serializable-values-were-found-in-the-navigation-state for more details.\";\n\n          if (!serializableWarnings.includes(message)) {\n            serializableWarnings.push(message);\n            console.warn(message);\n          }\n        }\n\n        var duplicateRouteNamesResult = checkDuplicateRouteNames(hydratedState);\n\n        if (duplicateRouteNamesResult.length) {\n          var _message = \"Found screens with the same name nested inside one another. Check:\\n\" + duplicateRouteNamesResult.map(function (locations) {\n            return \"\\n\" + locations.join(', ');\n          }) + \"\\n\\nThis can cause confusing behavior during navigation. Consider using unique names for each screen instead.\";\n\n          if (!duplicateNameWarnings.includes(_message)) {\n            duplicateNameWarnings.push(_message);\n            console.warn(_message);\n          }\n        }\n      }\n    }\n\n    emitter.emit({\n      type: 'state',\n      data: {\n        state: state\n      }\n    });\n\n    if (!isFirstMountRef.current && onStateChangeRef.current) {\n      onStateChangeRef.current(hydratedState);\n    }\n\n    isFirstMountRef.current = false;\n  }, [getRootState, emitter, state]);\n  var defaultOnUnhandledAction = React.useCallback(function (action) {\n    if (process.env.NODE_ENV === 'production') {\n      return;\n    }\n\n    var payload = action.payload;\n    var message = \"The action '\" + action.type + \"'\" + (payload ? \" with payload \" + JSON.stringify(action.payload) : '') + \" was not handled by any navigator.\";\n\n    switch (action.type) {\n      case 'NAVIGATE':\n      case 'PUSH':\n      case 'REPLACE':\n      case 'JUMP_TO':\n        if (payload !== null && payload !== void 0 && payload.name) {\n          message += \"\\n\\nDo you have a screen named '\" + payload.name + \"'?\\n\\nIf you're trying to navigate to a screen in a nested navigator, see https://reactnavigation.org/docs/nesting-navigators#navigating-to-a-screen-in-a-nested-navigator.\";\n        } else {\n          message += \"\\n\\nYou need to pass the name of the screen to navigate to.\\n\\nSee https://reactnavigation.org/docs/navigation-actions for usage.\";\n        }\n\n        break;\n\n      case 'GO_BACK':\n      case 'POP':\n      case 'POP_TO_TOP':\n        message += \"\\n\\nIs there any screen to go back to?\";\n        break;\n\n      case 'OPEN_DRAWER':\n      case 'CLOSE_DRAWER':\n      case 'TOGGLE_DRAWER':\n        message += \"\\n\\nIs your screen inside a Drawer navigator?\";\n        break;\n    }\n\n    message += \"\\n\\nThis is a development-only warning and won't be shown in production.\";\n    console.error(message);\n  }, []);\n  var element = React.createElement(NavigationContainerRefContext.Provider, {\n    value: navigation\n  }, React.createElement(ScheduleUpdateContext.Provider, {\n    value: scheduleContext\n  }, React.createElement(NavigationBuilderContext.Provider, {\n    value: builderContext\n  }, React.createElement(NavigationStateContext.Provider, {\n    value: context\n  }, React.createElement(UnhandledActionContext.Provider, {\n    value: onUnhandledAction != null ? onUnhandledAction : defaultOnUnhandledAction\n  }, React.createElement(EnsureSingleNavigator, null, children))))));\n\n  if (independent) {\n    element = React.createElement(NavigationRouteContext.Provider, {\n      value: undefined\n    }, React.createElement(NavigationContext.Provider, {\n      value: undefined\n    }, element));\n  }\n\n  return element;\n});\nexport default BaseNavigationContainer;","map":{"version":3,"sources":["BaseNavigationContainer.tsx"],"names":["CommonActions","React","checkDuplicateRouteNames","checkSerializable","NOT_INITIALIZED_ERROR","EnsureSingleNavigator","findFocusedRoute","NavigationBuilderContext","NavigationContainerRefContext","NavigationContext","NavigationRouteContext","NavigationStateContext","UnhandledActionContext","useChildListeners","useEventEmitter","useKeyedChildListeners","useOptionsGetters","ScheduleUpdateContext","useSyncState","serializableWarnings","duplicateNameWarnings","getPartialState","state","undefined","key","routeNames","partialState","stale","routes","map","route","BaseNavigationContainer","forwardRef","initialState","onStateChange","onUnhandledAction","independent","children","ref","parent","useContext","isDefault","Error","getState","setState","scheduleUpdate","flushUpdates","isFirstMountRef","useRef","navigatorKeyRef","getKey","useCallback","current","setKey","listeners","addListener","keyedListeners","addKeyedListener","dispatch","action","focus","console","error","navigation","canGoBack","result","handled","resetRoot","target","root","reset","getRootState","getCurrentRoute","emitter","addOptionsGetter","getCurrentOptions","useMemo","Object","keys","reduce","acc","name","create","isFocused","getParent","stateRef","isReady","useImperativeHandle","onDispatchAction","noop","emit","type","data","stack","stackRef","lastEmittedOptionsRef","onOptionsChange","options","builderContext","scheduleContext","isInitialRef","getIsInitial","context","onStateChangeRef","useEffect","hydratedState","process","env","NODE_ENV","serializableResult","serializable","location","reason","path","pointer","params","i","length","curr","prev","test","JSON","stringify","message","includes","push","warn","duplicateRouteNamesResult","locations","join","defaultOnUnhandledAction","payload","element"],"mappings":"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","sourceRoot":"../../src","sourcesContent":["import { CommonActions } from '@react-navigation/routers';\nimport * as React from 'react';\nimport checkDuplicateRouteNames from './checkDuplicateRouteNames';\nimport checkSerializable from './checkSerializable';\nimport { NOT_INITIALIZED_ERROR } from './createNavigationContainerRef';\nimport EnsureSingleNavigator from './EnsureSingleNavigator';\nimport findFocusedRoute from './findFocusedRoute';\nimport NavigationBuilderContext from './NavigationBuilderContext';\nimport NavigationContainerRefContext from './NavigationContainerRefContext';\nimport NavigationContext from './NavigationContext';\nimport NavigationRouteContext from './NavigationRouteContext';\nimport NavigationStateContext from './NavigationStateContext';\nimport UnhandledActionContext from './UnhandledActionContext';\nimport useChildListeners from './useChildListeners';\nimport useEventEmitter from './useEventEmitter';\nimport useKeyedChildListeners from './useKeyedChildListeners';\nimport useOptionsGetters from './useOptionsGetters';\nimport { ScheduleUpdateContext } from './useScheduleUpdate';\nimport useSyncState from './useSyncState';\nconst serializableWarnings = [];\nconst duplicateNameWarnings = [];\n\n/**\n * Remove `key` and `routeNames` from the state objects recursively to get partial state.\n *\n * @param state Initial state object.\n */\nconst getPartialState = state => {\n  if (state === undefined) {\n    return;\n  }\n\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  const {\n    key,\n    routeNames,\n    ...partialState\n  } = state;\n  return {\n    ...partialState,\n    stale: true,\n    routes: state.routes.map(route => {\n      if (route.state === undefined) {\n        return route;\n      }\n      return {\n        ...route,\n        state: getPartialState(route.state)\n      };\n    })\n  };\n};\n\n/**\n * Container component which holds the navigation state.\n * This should be rendered at the root wrapping the whole app.\n *\n * @param props.initialState Initial state object for the navigation tree.\n * @param props.onStateChange Callback which is called with the latest navigation state when it changes.\n * @param props.children Child elements to render the content.\n * @param props.ref Ref object which refers to the navigation object containing helper methods.\n */\nconst BaseNavigationContainer = /*#__PURE__*/React.forwardRef(function BaseNavigationContainer(_ref, ref) {\n  let {\n    initialState,\n    onStateChange,\n    onUnhandledAction,\n    independent,\n    children\n  } = _ref;\n  const parent = React.useContext(NavigationStateContext);\n  if (!parent.isDefault && !independent) {\n    throw new Error(\"Looks like you have nested a 'NavigationContainer' inside another. Normally you need only one container at the root of the app, so this was probably an error. If this was intentional, pass 'independent={true}' explicitly. Note that this will make the child navigators disconnected from the parent and you won't be able to navigate between them.\");\n  }\n  const [state, getState, setState, scheduleUpdate, flushUpdates] = useSyncState(() => getPartialState(initialState == null ? undefined : initialState));\n  const isFirstMountRef = React.useRef(true);\n  const navigatorKeyRef = React.useRef();\n  const getKey = React.useCallback(() => navigatorKeyRef.current, []);\n  const setKey = React.useCallback(key => {\n    navigatorKeyRef.current = key;\n  }, []);\n  const {\n    listeners,\n    addListener\n  } = useChildListeners();\n  const {\n    keyedListeners,\n    addKeyedListener\n  } = useKeyedChildListeners();\n  const dispatch = React.useCallback(action => {\n    if (listeners.focus[0] == null) {\n      console.error(NOT_INITIALIZED_ERROR);\n    } else {\n      listeners.focus[0](navigation => navigation.dispatch(action));\n    }\n  }, [listeners.focus]);\n  const canGoBack = React.useCallback(() => {\n    if (listeners.focus[0] == null) {\n      return false;\n    }\n    const {\n      result,\n      handled\n    } = listeners.focus[0](navigation => navigation.canGoBack());\n    if (handled) {\n      return result;\n    } else {\n      return false;\n    }\n  }, [listeners.focus]);\n  const resetRoot = React.useCallback(state => {\n    var _keyedListeners$getSt, _keyedListeners$getSt2;\n    const target = (state === null || state === void 0 ? void 0 : state.key) ?? ((_keyedListeners$getSt = (_keyedListeners$getSt2 = keyedListeners.getState).root) === null || _keyedListeners$getSt === void 0 ? void 0 : _keyedListeners$getSt.call(_keyedListeners$getSt2).key);\n    if (target == null) {\n      console.error(NOT_INITIALIZED_ERROR);\n    } else {\n      listeners.focus[0](navigation => navigation.dispatch({\n        ...CommonActions.reset(state),\n        target\n      }));\n    }\n  }, [keyedListeners.getState, listeners.focus]);\n  const getRootState = React.useCallback(() => {\n    var _keyedListeners$getSt3, _keyedListeners$getSt4;\n    return (_keyedListeners$getSt3 = (_keyedListeners$getSt4 = keyedListeners.getState).root) === null || _keyedListeners$getSt3 === void 0 ? void 0 : _keyedListeners$getSt3.call(_keyedListeners$getSt4);\n  }, [keyedListeners.getState]);\n  const getCurrentRoute = React.useCallback(() => {\n    const state = getRootState();\n    if (state == null) {\n      return undefined;\n    }\n    const route = findFocusedRoute(state);\n    return route;\n  }, [getRootState]);\n  const emitter = useEventEmitter();\n  const {\n    addOptionsGetter,\n    getCurrentOptions\n  } = useOptionsGetters({});\n  const navigation = React.useMemo(() => ({\n    ...Object.keys(CommonActions).reduce((acc, name) => {\n      acc[name] = function () {\n        return (\n          // @ts-expect-error: this is ok\n          dispatch(CommonActions[name](...arguments))\n        );\n      };\n      return acc;\n    }, {}),\n    ...emitter.create('root'),\n    dispatch,\n    resetRoot,\n    isFocused: () => true,\n    canGoBack,\n    getParent: () => undefined,\n    getState: () => stateRef.current,\n    getRootState,\n    getCurrentRoute,\n    getCurrentOptions,\n    isReady: () => listeners.focus[0] != null\n  }), [canGoBack, dispatch, emitter, getCurrentOptions, getCurrentRoute, getRootState, listeners.focus, resetRoot]);\n  React.useImperativeHandle(ref, () => navigation, [navigation]);\n  const onDispatchAction = React.useCallback((action, noop) => {\n    emitter.emit({\n      type: '__unsafe_action__',\n      data: {\n        action,\n        noop,\n        stack: stackRef.current\n      }\n    });\n  }, [emitter]);\n  const lastEmittedOptionsRef = React.useRef();\n  const onOptionsChange = React.useCallback(options => {\n    if (lastEmittedOptionsRef.current === options) {\n      return;\n    }\n    lastEmittedOptionsRef.current = options;\n    emitter.emit({\n      type: 'options',\n      data: {\n        options\n      }\n    });\n  }, [emitter]);\n  const stackRef = React.useRef();\n  const builderContext = React.useMemo(() => ({\n    addListener,\n    addKeyedListener,\n    onDispatchAction,\n    onOptionsChange,\n    stackRef\n  }), [addListener, addKeyedListener, onDispatchAction, onOptionsChange]);\n  const scheduleContext = React.useMemo(() => ({\n    scheduleUpdate,\n    flushUpdates\n  }), [scheduleUpdate, flushUpdates]);\n  const isInitialRef = React.useRef(true);\n  const getIsInitial = React.useCallback(() => isInitialRef.current, []);\n  const context = React.useMemo(() => ({\n    state,\n    getState,\n    setState,\n    getKey,\n    setKey,\n    getIsInitial,\n    addOptionsGetter\n  }), [state, getState, setState, getKey, setKey, getIsInitial, addOptionsGetter]);\n  const onStateChangeRef = React.useRef(onStateChange);\n  const stateRef = React.useRef(state);\n  React.useEffect(() => {\n    isInitialRef.current = false;\n    onStateChangeRef.current = onStateChange;\n    stateRef.current = state;\n  });\n  React.useEffect(() => {\n    const hydratedState = getRootState();\n    if (process.env.NODE_ENV !== 'production') {\n      if (hydratedState !== undefined) {\n        const serializableResult = checkSerializable(hydratedState);\n        if (!serializableResult.serializable) {\n          const {\n            location,\n            reason\n          } = serializableResult;\n          let path = '';\n          let pointer = hydratedState;\n          let params = false;\n          for (let i = 0; i < location.length; i++) {\n            const curr = location[i];\n            const prev = location[i - 1];\n            pointer = pointer[curr];\n            if (!params && curr === 'state') {\n              continue;\n            } else if (!params && curr === 'routes') {\n              if (path) {\n                path += ' > ';\n              }\n            } else if (!params && typeof curr === 'number' && prev === 'routes') {\n              var _pointer;\n              path += (_pointer = pointer) === null || _pointer === void 0 ? void 0 : _pointer.name;\n            } else if (!params) {\n              path += ` > ${curr}`;\n              params = true;\n            } else {\n              if (typeof curr === 'number' || /^[0-9]+$/.test(curr)) {\n                path += `[${curr}]`;\n              } else if (/^[a-z$_]+$/i.test(curr)) {\n                path += `.${curr}`;\n              } else {\n                path += `[${JSON.stringify(curr)}]`;\n              }\n            }\n          }\n          const message = `Non-serializable values were found in the navigation state. Check:\\n\\n${path} (${reason})\\n\\nThis can break usage such as persisting and restoring state. This might happen if you passed non-serializable values such as function, class instances etc. in params. If you need to use components with callbacks in your options, you can use 'navigation.setOptions' instead. See https://reactnavigation.org/docs/troubleshooting#i-get-the-warning-non-serializable-values-were-found-in-the-navigation-state for more details.`;\n          if (!serializableWarnings.includes(message)) {\n            serializableWarnings.push(message);\n            console.warn(message);\n          }\n        }\n        const duplicateRouteNamesResult = checkDuplicateRouteNames(hydratedState);\n        if (duplicateRouteNamesResult.length) {\n          const message = `Found screens with the same name nested inside one another. Check:\\n${duplicateRouteNamesResult.map(locations => `\\n${locations.join(', ')}`)}\\n\\nThis can cause confusing behavior during navigation. Consider using unique names for each screen instead.`;\n          if (!duplicateNameWarnings.includes(message)) {\n            duplicateNameWarnings.push(message);\n            console.warn(message);\n          }\n        }\n      }\n    }\n    emitter.emit({\n      type: 'state',\n      data: {\n        state\n      }\n    });\n    if (!isFirstMountRef.current && onStateChangeRef.current) {\n      onStateChangeRef.current(hydratedState);\n    }\n    isFirstMountRef.current = false;\n  }, [getRootState, emitter, state]);\n  const defaultOnUnhandledAction = React.useCallback(action => {\n    if (process.env.NODE_ENV === 'production') {\n      return;\n    }\n    const payload = action.payload;\n    let message = `The action '${action.type}'${payload ? ` with payload ${JSON.stringify(action.payload)}` : ''} was not handled by any navigator.`;\n    switch (action.type) {\n      case 'NAVIGATE':\n      case 'PUSH':\n      case 'REPLACE':\n      case 'JUMP_TO':\n        if (payload !== null && payload !== void 0 && payload.name) {\n          message += `\\n\\nDo you have a screen named '${payload.name}'?\\n\\nIf you're trying to navigate to a screen in a nested navigator, see https://reactnavigation.org/docs/nesting-navigators#navigating-to-a-screen-in-a-nested-navigator.`;\n        } else {\n          message += `\\n\\nYou need to pass the name of the screen to navigate to.\\n\\nSee https://reactnavigation.org/docs/navigation-actions for usage.`;\n        }\n        break;\n      case 'GO_BACK':\n      case 'POP':\n      case 'POP_TO_TOP':\n        message += `\\n\\nIs there any screen to go back to?`;\n        break;\n      case 'OPEN_DRAWER':\n      case 'CLOSE_DRAWER':\n      case 'TOGGLE_DRAWER':\n        message += `\\n\\nIs your screen inside a Drawer navigator?`;\n        break;\n    }\n    message += `\\n\\nThis is a development-only warning and won't be shown in production.`;\n    console.error(message);\n  }, []);\n  let element = /*#__PURE__*/React.createElement(NavigationContainerRefContext.Provider, {\n    value: navigation\n  }, /*#__PURE__*/React.createElement(ScheduleUpdateContext.Provider, {\n    value: scheduleContext\n  }, /*#__PURE__*/React.createElement(NavigationBuilderContext.Provider, {\n    value: builderContext\n  }, /*#__PURE__*/React.createElement(NavigationStateContext.Provider, {\n    value: context\n  }, /*#__PURE__*/React.createElement(UnhandledActionContext.Provider, {\n    value: onUnhandledAction ?? defaultOnUnhandledAction\n  }, /*#__PURE__*/React.createElement(EnsureSingleNavigator, null, children))))));\n  if (independent) {\n    // We need to clear any existing contexts for nested independent container to work correctly\n    element = /*#__PURE__*/React.createElement(NavigationRouteContext.Provider, {\n      value: undefined\n    }, /*#__PURE__*/React.createElement(NavigationContext.Provider, {\n      value: undefined\n    }, element));\n  }\n  return element;\n});\nexport default BaseNavigationContainer;\n//# sourceMappingURL=BaseNavigationContainer.js.map"]},"metadata":{},"sourceType":"module"}